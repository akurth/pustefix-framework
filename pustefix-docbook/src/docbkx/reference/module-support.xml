<?xml version="1.0"?>
<chapter xml:id="modulessupport" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>Module Support</title>
  <para>
    Modules allow you to share functionality, configuration options and view 
    elements between different Pustefix applications.
  </para>
  <para>
    Pustefix modules are OSGi bundles and are in fact structured similar to 
    Pustefix applications. However, instead of a 
    <filename>pustefix-application.xml</filename> a 
    <filename>pustefix-module.xml</filename> has to be placed in the 
    <filename>META-INF</filename> directory of the bundle. 
  </para>
  <programlisting language="xml"><![CDATA[<pustefix-module xmlns="http://www.pustefix-framework.org/2009/namespace/module-config">
  
  <application>
    <context-xml-service>
      <config-file>bundle:/META-INF/pustefix/app.conf.xml</config-file>
    </context-xml-service>
    <direct-output-service>
      <config-file>bundle:/META-INF/pustefix/direct.conf.xml</config-file>
    </direct-output-service>
    
    <extension type="application.static">
      <extend extension-point="static"/>
      <request-path-prefix>mymodule</request-path-prefix>
      <path>img</path>
    </extension>
  </application>
  
  <!-- TODO: Does this still apply to Pustefix 1.0? -->
  <!--
    Here you can configure which resources from which other module should be
    overridden by your module (see "Dynamic resource resolution").
    Resources can be specified either by their full path or using ant-style
    patterns.
  -->
  <override-modules>
    <module name="modulename">
      <resource path="path/to/resource"/>
      <resource path="path/**/to/*.xml"/>
      ...
    </module>
    ...
  </override-modules>

</pustefix-module>]]></programlisting>
  <para>
    Pustefix allows for extending applications by using an extension point
    mechanism. (TODO: Write chapter about extension points.)
  </para>
  <para>
    XML and XSL files used for rendering (TargetGenerator) meanwhile can be loaded directly from the jar file (if located in the <literal>PUSTEFIX-INF</literal> folder). For details on how to reference module resources and how to override modules, see <xref linkend="advanced.dyninclude"/>.
  </para>
  <para>
    Pustefix supports the automatic merging of statusmessage files. Statusmessages placed under <literal>dyntxt/statusmessages.xml</literal> within a module jar are automatically merged to <literal>projects/modules-override/MODULENAME/dyntxt/statusmessages-merged.xml</literal>. In contrast to <literal>resource-mappings</literal> the merged files aren't readonly, but are intended to be used to change (e.g. localize) the default messages provided by the module (see <xref linkend="concepts.statuscodes"/>).
  </para>
  
  <section xml:id="modulessupport.maven">
    <title>Creating new modules using the Maven archetype</title>
    <para>
      Pustefix provides a Maven archetype, which can be used to create new modules. It sets up
      a maven project with pre-configured POM, deployment descriptor and statusmessage support.
    </para>
    <screen>
mvn archetype:create \
-DarchetypeGroupId=org.pustefixframework.maven.archetypes \
-DarchetypeArtifactId=pustefix-module-archetype \
-DarchetypeVersion=0.1 \
-DgroupId=mytld.myorg.myapp.mysection \
-DartifactId=mymodule \
-Dversion=1.0  
    </screen>
    <para>
      You have to supply your own values for the <option>groupId</option>, <option>artifactId</option>
      and <option>version</option> parameters. The chosen <option>artifactId</option> will be used as 
default module and target folder name, the <option>groupId</option> as Java package name. Executing
      the above command creates the following directory structure and artifacts: 
    </para>
    <screen>
mymodule/
mymodule/pom.xml
mymodule/src
mymodule/src/main
mymodule/src/main/resources
mymodule/src/main/resources/dyntxt
mymodule/src/main/resources/dyntxt/statusmessages.xml
mymodule/src/main/resources/dyntxt/statuscodeinfo.xml
mymodule/src/main/resources/META-INF
mymodule/src/main/resources/META-INF/pustefix-module.xml
    </screen>
    <para>
      Building with <literal>mvn clean package</literal> creates a deployable Pustfix module. At the moment
      the only addition to the Maven standard build is the generation of StatusCode constant classes.
    </para>
  </section>
</chapter>
