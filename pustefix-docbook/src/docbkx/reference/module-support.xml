<?xml version="1.0"?>
<chapter xml:id="modulessupport" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>Module Support</title>
    <para>
      Modules allow you to share functionality, configuration options and view elements
      between different Pustefix installations.
    </para>
    <section xml:id="modulessupport.types">
      <title>Different module types</title>
      <para>
        Pustefix supports two ways for providing resources (include parts, images,
        stylesheets, etc.) used by different projects.
      </para>
      <section xml:id="modulessupport.types.new">
        <title>Resources within library JARs</title>
        <para>
          The first (preferred) way is to place a JAR archive somewhere in the library
          path (usually <filename>lib/</filename>) that contains a special deployment descriptor.
          This deployment descriptor has to be named <filename>META-INF/pustefix-module.xml</filename> in
          order to be recognized by the Pustefix build system. This deployment descriptor
          is a XML file with the following format:
        </para>
        <programlisting language="xml"><![CDATA[<module-descriptor 
  xmlns="http://www.pustefix-framework.org/2008/namespace/module-descriptor"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.pustefix-framework.org/2008/namespace/module-descriptor
                      http://www.pustefix-framework.org/2008/namespace/module-descriptor.xsd">

  <!--
    The module name is used to construct the path the resources will be extracted to.
    In this example the path would be modules/mytest/.
  -->  
  <module-name>mytest</module-name>
  <!-- You can optionally add the attribute "unpack" with value "obsolete" to the resources
       element, indicating that the resources shouldn't be extracted in the current or later 
       Pustefix versions, unless otherwise configured by adding <unpackObsolete>true</unpackObsolete>
       to the pustefix-webapp-plugin configuration.
  -->
  <resources>
    <!--
      The srcpath attributes the directory within the JAR archive that contains the
      resources. The targetpath attribute is optional and specifies the path the
      resources are copied to (relative to the module directory). An empty targetpath
      (the default) specifies the module directory itself
      (e.g. modules/mymodule) as the target directory.
    -->
    <resource-mapping srcpath="PUSTEFIX-INF/txt" targetpath="txt"/>
    <resource-mapping srcpath="PUSTEFIX-INF/images" targetpath="img"/>
  </resources>

  <!-- Here you can define which folders under PUSTEFIX-INF contain static webapp resources 
       and should be publicly available. The resources then can be accessed under the URL 
       path '/modules/[module-name]/[static-path]'. If you only want to grant access depending 
       on the application using the module, you can alternatively configure the static module 
       path in the project configuration.
  -->
  <static>
    <path>css</path>
    <path>img</path>
  </static>

  <!--
    Here you can configure which resources from which other module should be
    overridden by your module (see "Dynamic resource resolution").
  -->
  <override-modules>
    <module name="modulename">
      <resource path="path/to/resource"/>
      ...
    </module>
    ...
  </override-modules>

</module-descriptor>]]></programlisting>
  <para>
    While Pustefix is able to load any kind of resource directly from the module jar file, older versions or applications sometimes required that certain resources, like configuration files or images, are directly available in the webapp folder. Therefore the build process supports automatic extraction of these resources (using the <literal>resource-mapping</literal> configuration).
  </para>
  <para>
    XML and XSL files used for rendering (TargetGenerator) also can be loaded directly from the jar file (if located in the <literal>PUSTEFIX-INF</literal> folder). For details on how to reference module resources and how to override modules, see <xref linkend="advanced.dyninclude"/>.
  </para>
  <para>
    Besides those two variants of using resources from module jars, Pustefix supports the automatic merging of statusmessage files. Statusmessages placed under <literal>dyntxt/statusmessages.xml</literal> within a module jar are automatically merged to <literal>projects/modules-override/MODULENAME/dyntxt/statusmessages-merged.xml</literal>. In contrast to <literal>resource-mappings</literal> the merged files aren't readonly, but are intended to be used to change (e.g. localize) the default messages provided by the module (see <xref linkend="concepts.statuscodes"/>).
  </para>
      </section>
      <section xml:id="modulessupport.types.old">
        <title>Resources placed in modules/ directory</title>
        <para>
          The old way is to place a JAR file in the <filename>modules/</filename> directory of the Pustefix
          environment. In this case no deplyoment descriptor is needed (and even if
          present it is not read). However you have to ensure that all files within
          the JAR file are in a properly named directory as the archive will be directly
          extracted to the <filename>projects/modules/</filename> directory.
        </para>
        <warning>
          <title>Deprecated</title>
          <para>
            It is not recommended to use these types of modules in Pustefix 0.12.x or higher.
            The the new way (see <xref linkend="modulessupport.types.new"/>) is much more
            powerful, we will drop support for the <filename>modules</filename> directory
            in a future Pustefix release.
          </para>
        </warning>
      </section>
    </section>
    <section xml:id="modulessupport.actions">
      <title>Actions applied on module resources after unpacking</title>
      <para>
        If your module contains an ant build file, Pustefix can execute this build
        file after unpacking. If you want to deploy a build file, that is run automatically,
        place a buildfile called <filename>build.xml</filename> in the folder
        <filename>projects/modules/&lt;module-name&gt;/</filename>.
      </para>
    </section>
    <section xml:id="modulessupport.maven">
      <title>Creating new modules using the Maven archetype</title>
      <para>
        Pustefix provides a Maven archetype, which can be used to create new modules. It sets up
        a maven project with pre-configured POM, deployment descriptor and statusmessage support.
      </para>
      <screen>
mvn archetype:create \
-DarchetypeGroupId=org.pustefixframework.maven.archetypes \
-DarchetypeArtifactId=pustefix-module-archetype \
-DarchetypeVersion=0.1 \
-DgroupId=mytld.myorg.myapp.mysection \
-DartifactId=mymodule \
-Dversion=1.0  
      </screen>
      <para>
        You have to supply your own values for the <option>groupId</option>, <option>artifactId</option>
        and <option>version</option> parameters. The chosen <option>artifactId</option> will be used as 
	default module and target folder name, the <option>groupId</option> as Java package name. Executing
        the above command creates the following directory structure and artifacts: 
      </para>
      <screen>
mymodule/
mymodule/pom.xml
mymodule/src
mymodule/src/main
mymodule/src/main/resources
mymodule/src/main/resources/dyntxt
mymodule/src/main/resources/dyntxt/statusmessages.xml
mymodule/src/main/resources/dyntxt/statuscodeinfo.xml
mymodule/src/main/resources/META-INF
mymodule/src/main/resources/META-INF/pustefix-module.xml
      </screen>
      <para>
        Building with <literal>mvn clean package</literal> creates a deployable Pustfix module. At the moment
        the only addition to the Maven standard build is the generation of StatusCode constant classes.
      </para>
    </section>
</chapter>
