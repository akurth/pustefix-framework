<?xml version="1.0"?>
<chapter xml:id="upgrade" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>Upgrading to a newer Pustefix version</title>

  <section xml:id="upgrade.0_21_to_0_22">
    <title>Upgrading from Pustefix 0.21 to 0.22</title>

    <para>
      Pustefix now requires at least version 4.3 of the Spring framework (and supports version 5.0). If you rely on an older version
      you will have to update your application accordingly.
    </para>
    <para>
      No Pustefix specific changes will be required to make your application work with Spring 4.3. 
      If you want to switch to Spring 5 and you are using Pustefix states as MVC controllers together with custom <literal>WebArgumentResolvers</literal>,
      you have to migrate them to <literal>HandlerMethodArgumentResolvers</literal> and change the configuration from
      <xref linkend="springmvc.annotationmethodhandleradapter"/> to <xref linkend="springmvc.requestmappinghandleradapter"/>. 
    </para>

  </section>

  <section xml:id="upgrade.0_20_to_0_21">
    <title>Upgrading from Pustefix 0.20 to 0.21</title>

    <para>
      After changing internal logging from Log4j to SLF4J, Pustefix no longer has a Maven dependency on Log4j or another logging implementation,
      it only brings a dependency to the SLF4J API (<literal>org.slf4j:slf4j-api</literal>), i.e. depending on the logging framework of your choice, you have to adapt
      your Maven dependencies, logging configuration and code:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          If you want to stick with the old Log4j version, you have to add the Log4j library dependency (<literal>log4j:log4j</literal>),
          along with the dependency of the SLF4J-to-Log4j bridge (<literal>org.slf4j:slf4j-log4j12</literal>).
        </para>
        <para>
          No configuration or code change is required (<literal>pfixlog.xml</literal> is still supported).
        </para>
      </listitem>
      <listitem>
        <para>
         If you want to use Logback, you have to add the according Logback library dependencies (at least <literal>ch.qos.logback:logback-classic</literal>)
         or you can alternatively add the Pustefix Logback extension module
         (<literal>org.pustefixframework.logging:pustefix-logback</literal>), which already has the required dependencies and provides
         some useful configuration extensions.
        </para>
        <para>
         You will have to migrate your old Log4j configuration (from <literal>pfixlog.xml</literal>) to a new Logback configuration
         (e.g. located at <literal>src/main/resources/logback.xml</literal>). Details about the migration can be found in the Logback
         documentation (see <link xlink:href="https://logback.qos.ch/manual/migrationFromLog4j.html"/>). A base configuration for the
         Pustefix framework stuff comes as part of the Pustefix Logback module and can be included or used as reference, see
         <xref linkend="configuration.logging.logback"/>).
        </para>
        <para>
         Code using the old Log4j API should be migrated to the SLF4J API.
         If you can't migrate all your legacy code, you can temporarily use a legacy API bridge (see <link xlink:href="https://www.slf4j.org/legacy.html"/>).
        </para>
      </listitem>
      <listitem>
        <para>
         If you want to use Log4j 2, you have to add the according Log4j 2 library dependencies (at least <literal>org.apache.logging.log4j:log4j-slf4j-impl</literal>,
         <literal>org.apache.logging.log4j:log4j-web</literal> and <literal>org.apache.logging.log4j:log4j-jcl</literal>) or you can alternatively add the
         Pustefix Log4j extension module
         (<literal>org.pustefixframework.logging:pustefix-log4j</literal>), which already has the required dependencies and provides
         some useful configuration extensions.
        </para>
        <para>
         You will have to migrate your old Log4j configuration (from <literal>pfixlog.xml</literal>) to a new Log4j 2 configuration
         (e.g. located at <literal>src/main/webapp/WEB-INF/log4j2.xml</literal>). Details about the migration can be found in the Log4j
         documentation (see <link xlink:href="https://logging.apache.org/log4j/2.x/manual/migration.html"/>).  A base configuration for the
         Pustefix framework stuff comes as part of the Pustefix Log4j module and can be included or used as reference, see
         <xref linkend="configuration.logging.log4j2"/>).
        </para>
        <para>
         Code using the old Log4j API either has to be migrated to the new Log4j 2 API or to the SLF4J API.
         If you can't migrate all your legacy code, you can temporarily use a legacy API bridge (see <link xlink:href="https://logging.apache.org/log4j/2.x/manual/migration.html"/>
         and <link xlink:href="https://www.slf4j.org/legacy.html"/>).
        </para>
      </listitem>
    </itemizedlist>

  </section>

  <section xml:id="upgrade.0_18_to_0_19">
    <title>Upgrading from Pustefix 0.18 to 0.19</title>

    <section xml:id="upgrade.0_18_to_0_19.dependencies">
      <title>Library dependencies</title>
      <para>
        Pustefix 0.19 itself is completely backwards compatible, i.e. neither API, behaviour, configuration or XSL templates have changed.
        But some of its dependencies on other Java libraries have changed. 
      </para>
      <para>
        The main change is the upgrade to Spring 4, i.e. if your application is relying on the transitive Maven dependencies of Pustefix, it
        will get Spring 4 after the upgrade too. If your application requires an older version of Spring, it has to explicitely specify
        an alternative version in its Maven POM now.
      </para>
      <para>
        Another dependency change, that possibly affects your application, is the removal of the Apache ORO library. The library was used for
        regular expression checks in IWrappers and was replaced by using the JDK standard library. While Apache ORO regular expressions only slightly
        differ from the JDK ones, and Pustefix automatically tries to convert them on the fly, there's still a small chance that you're using
        some special expression which isn't compatible or can't be converted correctly.
      </para>
      <para>
        To support you in finding these incompatible regular expressions, Pustefix, since version 0.18.64, checks regular expressions in IWrappers 
        for compatibility and logs if they can't be converted or behave different. Just search your application's <literal>pustefix-servlet.log</literal> for 
        occurrences of <literal>INCOMPATIBLE_REGEX</literal> (different result) or <literal>REGEX_ERROR</literal> (conversion error) to fix them manually
        (you should ensure first, that Log4J is configured accordingly, i.e. that warnings from logger 
        <literal>de.schlund.pfixcore.generator.prechecks.RegexpCheck</literal> are really logged).
      </para>
    </section>
   
  </section>

  <section xml:id="upgrade.0_17_to_0_18">
    <title>Upgrading from Pustefix 0.17 to 0.18</title>

    <section xml:id="upgrade.0_17_to_0_18.depend_xml">
      <title>depend.xml</title>
      <para>
        With Pustefix 0.18 the navigation tree in <literal>depend.xml</literal> became obsolete. You should completely remove the
        <literal>&lt;navigation&gt;</literal> element and its content. If you still need a declarative page structure available during
        the XSL transformations, you can alternatively move the child elements of <literal>&lt;navigation&gt;</literal> into an own
        file called <literal>sitemap.xml</literal> under the <literal>&lt;sitemap&gt;</literal> root tag 
        (see <xref linkend="configuration.sitemap"/>).
      </para>
      <para> 
        Making the navigation tree obsolete, the XSL parameter <literal>$navitree</literal> was also removed. If you're application's
        providing a <literal>sitemap.xml</literal> file, you can reference its content instead by using the new XSL parameter
        <literal>$sitemap</literal>. Without a <literal>sitemap.xml</literal> the parameter value will be empty.
      </para>
      <para>
        If you didn't use the navigation tree within you XSL transformations you can remove the navigation without substitution because
        Pustefix itself doesn't need it any longer.
      </para>
    </section>
   
  </section>

  <section xml:id="upgrade.0_16_to_0_17">
    <title>Upgrading from Pustefix 0.16 to 0.17</title>
    <para>
      Pustefix 0.17 should be fully backwards compatible with 0.16. But the new render include mechanism required massive refactoring of
      the core XSL templates to make them independent of the page parameter on the master and metatags transformation levels. So you should
      invest some time into QA and especially check if buttons and links work as expected.
    </para>
  </section>
    
  <section xml:id="upgrade.0_15_to_0_16">
    <title>Upgrading from Pustefix 0.15 to 0.16</title>
  
    <section xml:id="upgrade.0_15_to_0_16.web_xml">
      <title>web.xml</title>
      <para>
        With Pustefix 0.16 URLs referencing pages no longer contain the <literal>/xml/xyz</literal> path prefix. Thus the according servlet
        mappings in <literal>src/main/webapp/WEB-INF/web.xml</literal> became obsolete. You can remove all <literal>&lt;servlet-mapping/&gt;</literal>
        elements containing an <literal>&lt;url-pattern&gt;</literal> starting with <literal>/xml</literal>.
      </para>
    </section>

    <section xml:id="upgrade.0_15_to_0_16.project_xml">
      <title>project.xml</title>
      <para>
        In Pustefix 0.16 URL paths no longer start with <literal>/xml/xyz</literal>. You should adapt the according path configurations
        in <literal>src/main/webapp/WEB-INF/project.xml</literal>.
        Within the <literal>&lt;application/&gt;</literal> section you can remove the according path configurations:
        the <literal>&lt;default-path&gt;</literal> element and 
        the <literal>&lt;path/&gt;</literal> elements beneath <literal>&lt;context-xml-service/&gt;</literal>,
        <literal>&lt;direct-output-service/&gt;</literal> and <literal>&lt;deref-service/&gt;</literal> (if available).
      </para>
      <para>
        The <literal>&lt;additional-trail-info&gt;</literal> element now is optional. If missing, Pustefix by default registers
        the default <literal>AdditionalTrailInfo</literal> implementation <literal>org.pustefixframework.http.DefaultAdditionalTrailInfoImpl</literal>.
        You have to be aware that the package name of the interface and the implementation changed from <literal>de.schlund.pfixxml.perflogging</literal>
        to <literal>org.pustefixframework.http</literal>. You either will have to adapt the package names, or if you're relying on
        the default implementation, you can just remove the complete <literal>&lt;additional-trail-info/&gt;</literal> element.
      </para>
      <para>
        The elements <literal>&lt;perflogging&gt;</literal> and <literal>&lt;testrecording&gt;</literal> became obsolete because the 
        performance logging and testrecording mechanisms are no longer 
        part of the Pustefix core framework. You can just remove these elements. The <literal>&lt;authadmin&gt;</literal> element is also no 
        longer supported and should be removed.
      </para>
      <para>
        If you're referencing a XML schema, you can change the schema location to
        <literal>http://www.pustefix-framework.org/2008/namespace/project-config-0_16.xsd</literal> to get an updated version.
      </para>
    </section>

    <section xml:id="upgrade.0_15_to_0_16.depend_xml">
      <title>depend.xml</title>
      <para>
        With Pustefix 0.16 URLs of all kind of pages (dynamic, directoutput) are directly served under the servlet context without using an additional
        path prefix. Therefore every page requires a unique name. If you use the same page name multiple times, e.g. for normal and directoutput pages,
        you will have to rename it making it unique.
      </para>
      <para>
        No longer requiring a path prefix for pages, you can remove all <literal>handler</literal> attributes from the
        <literal>&lt;page/&gt;</literal> elements within the <literal>&lt;navigation/&gt;</literal> section.
      </para>
      <para>
        If you're referencing a XML schema, you can change the schema location to
        <literal>http://www.pustefix-framework.org/2008/namespace/xml-generator-config-0_16.xsd</literal>
        to get an updated version.
      </para>
    </section>

    <section xml:id="upgrade.0_15_to_0_16.taglib">
      <title>Tag library</title>
      <para>
        The <literal>&lt;pfx:image/&gt;</literal> tag behaviour changed when used within XML includes coming from modules. Without specifying
        a module using the <literal>module</literal> attribute, the image source now is searched within the module itself instead of the
        webapp. You either have to add the <literal>search="dynamic"</literal> attribute to look up the image in the webapp before trying to
        get it from the module or you can set the <literal>module</literal> attribute to the special value <literal>WEBAPP</literal> to force
        getting it from the webapp.  
      </para>
    </section>

    <section xml:id="upgrade.0_15_to_0_16.modules">
      <title>Modules</title>
      <para>
        Pustefix 0.16 no longer extracts resources from modules (the former <literal>resource-mappings</literal> from the Pustefix module
        descriptor are ignored now). Pustefix itself meanwhile can load every type of required resource directly from the module Jar files.
        If your application code directly accesses extracted resources, e.g. using <literal>java.io.File</literal>, you will have to change
        this and switch over to loading the resources via the classpath, ServletContext or Pustefix's resource abstraction layer.
      </para> 
    </section>

    <section xml:id="upgrade.0_15_to_0_16.sessions">
      <title>Session handling</title>
      <para>
        Since 0.16 Pustefix supports different session tracking strategies, whereas the new cookie based approach became the default strategy.
        Although Pustefix tries to make session id handling transparent to the application by hiding it in its core templates and internal code,
        there are use cases where applications directly access the session id, e.g. for creating links without using the core tags.
      </para>
      <para>
      	Because URL rewriting of the session id now by default is only done if the client disabled cookies, you will have to adapt code, which
        manually creates session-aware links. You should only include the session id, if necessary. Therefore Pustefix introduced two new 
        XSL parameters: <literal>__sessionId</literal>, which is always set to the current session id, and <literal>__sessionIdPath</literal>, which
        is set to the path extension for the session on demand , e.g. <literal>;jsessionid=xyz</literal>. The <literal>__sessionIdPath</literal> parameter
        will be empty if the session id came from a cookie. Thus you can easily create session-aware URLs by just adding the value to your URL
        without having to take care if cookies are enabled or not.
      </para>
      <para>
        The XSL parameter <literal>__sessid</literal> was removed as its contract doesn't exactly match one of the new parameters. You will have to
        replace it according to your requirements using one the new ones.
      </para>
    </section>

    <section xml:id="upgrade.0_15_to_0_16.webservices">
      <title>AJAX webservices</title>
      <para>
        The JSON and SOAP Javascript libraries were moved from the Pustefix core module to the Pustefix webservice modules.
        If your application uses these libraries, you will have to adapt the according <literal>script</literal> tags, replacing
        <literal>pustefix-core</literal> by <literal>pustefix-webservices-jaxws</literal> or <literal>pustefix-webservices-jsonws</literal>,
        e.g.
<programlisting language="xml"><![CDATA[<script type="text/javascript" src="{$__contextpath}/modules/pustefix-core/script/webservice.js"></script>
<script type="text/javascript" src="{$__contextpath}/modules/pustefix-core/script/webservice_json.js"></script>]]></programlisting>
        has to be changed to:
<programlisting language="xml"><![CDATA[<script type="text/javascript" src="{$__contextpath}/modules/pustefix-webservices-jaxws/script/webservice.js"></script>
<script type="text/javascript" src="{$__contextpath}/modules/pustefix-webservices-jsonws/script/webservice_json.js"></script>]]></programlisting>
      </para>
      <para>
        Generated Javascript SOAP stubs aren't delivered statically any longer, i.e. you also have to use the <literal>pfx:wsscript</literal> tag
        to include the stub file (instead of statically referencing it), e.g.
<programlisting language="xml"><![CDATA[<script type="text/javascript" src="{$__contextpath}/xml/wsscript/MyService.js"></script>]]></programlisting>
        has to be changed to:
<programlisting language="xml"><![CDATA[<pfx:wsscript name="MyService" type="soap"/>]]></programlisting>
        The <literal>type</literal> attribute only is required if you enabled multiple webservice protocols for the service within the configuration.
      </para>
      <para>
        If you manually build webservice URLs, e.g. if you don't want to use the generated stubs, you have to be aware that the request path no
        longer contains the <literal>xml</literal> part, e.g. you will have to change <literal>http://anyhost/xml/webservice/MyService</literal> to
        <literal>http://anyhost/webservice/MyService</literal>.
      </para>
    </section>
  
  </section>
  
</chapter>
