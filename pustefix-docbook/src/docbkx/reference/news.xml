<?xml version="1.0"?>
<chapter xml:id="news" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>What's new in Pustefix 0.15.x</title>    
  <section xml:id="news.0_15_6">
    <title>What's new in Pustefix 0.15.6</title>
  
    <section xml:id="news.0_15_6.modules">
      <title>Module enhancements</title>
      <para>
        Introduced pre-defined special module names <literal>WEBAPP</literal> and 
        <literal>PAGEDEF</literal>, which can be set as <literal>module</literal> values at <literal>&lt;pfx:include&gt;</literal>
        and <literal>&lt;pfx:image&gt;</literal> tags to explicitly refer to resources from the webapp folder
        or resources from within the module where a page is defined (see <xref linkend="advanced.dyninclude.modinclude.special"/>).
      </para>
      <para>
        The config-include mechanism now supports directly referencing config
        fragment files from modules by adding a <literal>module</literal> attribute to the according
        <literal>&lt;config-include&gt;</literal> elements (see <xref linkend="configuration.depend"/> and <xref linkend="configuration.servlet.contextxml"/>).
      </para>
    </section>
  
  </section>
  
  <section xml:id="news.0_15_7">
    <title>What's new in Pustefix 0.15.7</title>

    <section xml:id="news.0_15_7.modules">
      <title>Module enhancements</title>
      <para>
        Static web resources now can be delivered directly from modules without having to extract them to the webapp folder first
        by the build process. Thus it's no longer necessary to define resource mappings in the module's descriptor file (see
        <xref linkend="modulessupport"/>). Making
        resources from modules publicly available now just requires to define an according static path in the project configuration,
        e.g. <literal>&lt;path&gt;/modules/mymodule/mypath/img&lt;/path&gt;</literal> makes available the according folder 
        <literal>/PUSTEFIX-INF/mypath/img</literal> from the module/JAR file <literal>mymodule</literal>.
      </para>
      <para>
        Status message files no longer require to be extracted using a resource mapping. 
        Now they're automatically detected within module jars
        and merged to the according <literal>modules-override</literal> folder.
      </para> 
   
    </section>
  </section>

  <section xml:id="news.0_15_11">
    <title>What's new in Pustefix 0.15.11</title>

    <section xml:id="news.0_15_11.config">
      <title>Configuration system enhancements</title>
      <para>
        We improved the configuration customization support by making context init parameters available as environment properties
        and thus usable as XPath variables during the customization process (see <xref linkend="configuration.customization"/>).
      </para>
      <para>
        Besides we dropped the storage of environment properties during the build (and the reusage at runtime). Thus a WAR file
        doesn't contain build-dependent settings any longer and can be used in different environments. Environment specific
        config customizations can be controlled by setting according context init parameters.
      </para>
   
    </section>
  </section>

  <section xml:id="news.0_15_13">
    <title>What's new in Pustefix 0.15.13</title>

    <section xml:id="news.0_15_13.config">
      <title>Module/configuration enhancements</title>
      <para>
        Including configuration fragments from modules now can be done without having to directly specify the module names.
        Therefor the <literal>config-include</literal> element now supports <literal>module</literal> attribute values
        containing simple patterns, which will be matched against the names of the modules available in the classpath,
        e.g. <literal>module="*"</literal> will include all according configuration fragments found in the classpath,
        <literal>module="*-us"</literal> will include only fragments from modules whose name ends with <literal>-us</literal>.
      </para>
    </section>
    <section xml:id="news.0_15_13.tooling">
      <title>Tooling enhancements</title>
      <para>
        When hovering the closing include part delimiters displayed in edit mode, the tooltip now shows additional information for dynamic
        includes. It prints out the complete dynamic search chain, e.g. something like 
        <literal>webapp(?) module-a(-) module-aa(+) module-ab(+)</literal>, whereas <literal>(?)</literal> means that the file doesn't
        exist, <literal>(-)</literal> says that the file exists but doesn't contain the part, and <literal>(+)</literal> implies 
        that a file containing the part is found.
      </para>
      <para>
        Introduced the Pustefix internals page. Similar to the DOM tree view this page provides some additional information useful
        during development, e.g. environment, JVM and module information (see <xref linkend="tooling.pfxinternals"/>). 
      </para>
    </section>
  </section>

</chapter>
