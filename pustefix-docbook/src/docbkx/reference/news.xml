<?xml version="1.0"?>
<chapter xml:id="news" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>What's new in Pustefix 0.18.x</title>    
  
  <para>This section lists the new features and enhancements of the current Pustefix release line. 
        If you're interested in new features which already became available with the prior Pustefix release line,
        you can take a look at <xref linkend="newsarchive"/>.</para>

  <para>If you're migrating an existing appliation to the new Pustefix version, you should have a look at <xref linkend="upgrade"/>.</para>

  <section xml:id="news.0_18_0">
    <title>What's new in Pustefix 0.18.0</title>
  
    <para>Pustefix 0.18.0 focuses on new internationalization features. It brings multi-tenancy on the view layer, supporting
          different views for different tenants (like countries or markets) within a single application instance, along with
	  runtime-switchable multi-language support, including internationalized page names.
    </para>

    <section xml:id="news.0_18_0.multitenancy">
      <title>Multi-tenancy</title>
      <para>
        Pustefix 0.18 provides multi-tenancy support on the view layer, i.e. it can create and deliver alternative versions of a page
        depending on a selected tenant. Tenants are automatically selected by matching host name patterns against the requested
        host name. Alternative page versions are created by applying filters to the dynamic include mechanism, thus overriding
        and extending the core page content with tenant- and/or language-specific content from according tenant/language modules
        (see <xref linkend="advanced.multitenancy"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.multilanguage">
      <title>Multi-language</title>
      <para>
        Up to Pustefix 0.17 the only way to make the language of your application switchable at runtime was using
        the <literal>&lt;pfx:langselect&gt;</literal> tags to directly embed all language dependent content into the same
        part and theme side by side. With Pustefix 0.18 it's possible to automatically create different versions of a page serving
        different languages using the dynamic override mechanism, e.g. you can source out all language dependent content
        into own modules (language packs) which override a language independent core module (see <xref linkend="advanced.i18n"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.sitemap">
      <title>Sitemap and i18n pagenames</title>
      <para>
        Pustefix 0.18 differentiates between logical page names and display page names. Thus you can rename pages or provide
        internationalized page names without having to change existing page references (to the logical page name). Such page aliases
        are configured in a file called <literal>sitemap.xml</literal> which is replacing the <literal>navigation</literal> configuration
        from <literal>depend.xml</literal> (see <xref linkend="configuration.sitemap"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.pagealt">
      <title>Page alternatives</title>
      <para>
        Page alternatives are a new concept for creating different representations of a page (including possible variants). Page
        alternatives are internally used to create different versions for languages/tenants, but can be also used for
        pages which are based on a common page, assigned to the same logical page, but with different content and display pagename, e.g.
        landing pages (see <xref linkend="advanced.pagealternatives"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.modules">
      <title>Pustefix modules</title>
      <para>
        The module mechanism has been extended to support sourcing out every kind of resource into modules, e.g. you
        can put arbitrary configuration files into modules (like <literal>project.xml</literal>, <literal>depend.xml</literal> or
        <literal>spring.xml</literal>). The Pustefix resource loading mechanism has been extended and now additionally 
        implements Spring's Resource abstraction layer. Thus you can use module URIs within the Spring configuration, e.g.
        for injecting module resources into beans.
      </para>
      <para>
        The dynamic search mechanism now supports adding modules to the default search chain. This is declaratively done
        in the module descriptor <literal>pustefix-module.xml</literal>. You can additionally set a search priority to define
        a search order. Using filter attributes you can define a dynamic search filter allowing to include/exclude certain
        modules from searching/overriding, which is useful for multi-tenant/language applications to filter by tenant or language
        (see <xref linkend="modulessupport.types.new"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.autoconfig">
      <title>Automatic configuration</title>
      <para>
        Pustefix 0.18 extends the <literal>depend.xml</literal> configuration by providing a <literal>&lt;auto-standardpage&gt;</literal>
        element which can be used as template, which automatically creates standardpage definitions for pages found in a specified
        folder (see <xref linkend="configuration.depend.autostandardpage"/>).
      </para>
    </section>
  
  </section>

  <section xml:id="news.0_18_2">
    <title>What's new in Pustefix 0.18.2</title>

    <section xml:id="news.0_18_2.xslterrors">
      <title>Context information for XSLT errors</title>
      <para>
        The default error page for XSLT errors now provides additional contextual information. The error line from the XML file causing the
        error is cut out (including some surrounding lines) and added to the error page.
      </para>
    </section>
 
    <section xml:id="news.0_18_2.xslttooling">
      <title>Switchable XSLT tooling extensions</title>
      <para>
        In prior versions the XSLT tooling extensions (dynamic include information, console, etc.) were always enabled if not running
        in production mode. Now you can selectively enable/disable the tooling extensions in all modes (except production mode). Therefore
        Pustefix introduced the configuration element <literal>&lt;tooling-extensions&gt;</literal> (see 
        <xref linkend="configuration.project.projectxml"/>).
      </para>
      <para>
        Besides the XSLT tooling has been decoupled from the editor settings, i.e. you can use the include information tooling without
        having the editor enabled.
      </para>
    </section>

    <section xml:id="news.0_18_2.sitemap">
      <title>Search-engine sitemap generation</title>
      <para>
        Pustefix now supports generating search-engine sitemaps according to the sitemaps protocol (see
        <link xlink:href="http://www.sitemaps.org/protocol.html">Sitemaps protocol specification</link>).
        Sitemap generation can be enabled by adding the <literal>&lt;searchengine-sitemap/&gt;</literal> element to the
        project configuration (see <xref linkend="configuration.project.projectxml"/>).
      </para>
    </section>

    <section xml:id="news.0_18_2.pagealts">
      <title>Direct page alternative linking</title>
      <para>
        In prior Pustefix versions links to page alternatives created with <literal>&lt;pfx:button&gt;</literal> referenced the logical page
        and the application logic was responsible for detecting/setting the page alternative and thus triggering a redirect to the 
        according page alternative by Pustefix. 
      </para>
      <para>
        Now <literal>&lt;pfx:button&gt;</literal> supports directly setting the page alternative key using the <literal>altkey</literal>
        attribute or <literal>&lt;pfx:altkey&gt;</literal> element. Thus Pustefix can directly reference the according page alternative
        name without having to do a redirect (see <xref linkend="xslt.pfx.button"/>).
      </para>
    </section>

   <section xml:id="news.0_18_2.oxm">
      <title>OXM support for BigDecimal and BigInteger</title>
      <para>
        Pustefix's object-to-XML mapping mechanism now can serialize BigDecimal and BigInteger objects.
      </para>
   </section>

  </section>

  <section xml:id="news.0_18_5">
    <title>What's new in Pustefix 0.18.5</title>

    <section xml:id="news.0_18_5.cmis">
      <title>CMIS support</title>
      <para>
        Added basic support for loading resources from content management systems using CMIS/AtomPub. 
      </para>
    </section>
   <section xml:id="news.0_18_5.pagealiases">
      <title>Page aliases</title>
      <para>
        Added XPath function to get current display page name during rendering (see <xref linkend="xslt.extensions.xpathfunctions.getdisplaypagename"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_6">
    <title>What's new in Pustefix 0.18.6</title>

    <section xml:id="news.0_18_6.xslt">
      <title>Include part existence check</title>
      <para>
        Added support for checking the existence of an include part during rendering, e.g. for displaying an include part depending on the existence of another include part (see <xref linkend="xslt.pfx.checkinclude"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_7">
    <title>What's new in Pustefix 0.18.7</title>

    <section xml:id="news.0_18_7.sitemap">
      <title>Custom sitemap attributes</title>
      <para>
        Added support for using custom XML attributes at page elements within the sitemap configuration (see <xref linkend="configuration.sitemap"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_9">
    <title>What's new in Pustefix 0.18.9</title>

    <section xml:id="news.0_18_9.logging">
      <title>Log directory configuration</title>
      <para>
        Added support for setting the log directory using the context init parameter <literal>logroot</literal>. 
        The directory can be referenced in the log configuration file <literal>pfixlog.xml</literal> using the custom tag <literal>&lt;cus:logroot/&gt;</literal>.
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_13">
    <title>What's new in Pustefix 0.18.13</title>

    <section xml:id="news.0_18_13.xslt">
      <title>Getting environment properties from within XSLT</title>
      <para>
        Added support for getting environment from within XSLT using the XPath function <literal>pfx:getEnvProperty</literal> (see <xref linkend="xslt.extensions.xpathfunctions"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_14">
    <title>What's new in Pustefix 0.18.14</title>

    <section xml:id="news.0_18_14.session">
      <title>External session invalidation synchronization support</title>
      <para>
        Invalidating sessions outside of Pustefix, e.g. within a ServletFilter or Spring WebRequestInterceptor, can break concurrently running requests operating on the same session.
        Pustefix now can block such a session invalidation until all requests using this session are processed. Therefor Pustefix provides the new utility method 
        <literal>SessionUtils.invalidate(session)</literal>, which can be used instead of directly calling <literal>invalidate()</literal> at the <literal>HttpSession</literal>
        object.
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_27">
    <title>What's new in Pustefix 0.18.27</title>

    <section xml:id="news.0_18_27.contextresources">
      <title>Global output resources</title>
      <para>
        Added support for global output resources, i.e. output resources/ContextResources can be globally declared, thus being automatically added as output resources to all pagerequests.
        That's an alternative solution for adding global data and could replace the necessity of doing this programmatically via a basic <literal>State</literal> implementation.
        Global resources can be added to the new <literal>&lt;global-output/&gt;</literal> section of the context configuration
        (see <xref linkend="configuration.servlet.contextxml"/>).
      </para>
    </section>

    <section xml:id="news.0_18_27.sessiontracking">
      <title>Cookie-only session tracking</title>
      <para>
        Added new sessiontracking strategy which forces cookie-based session tracking without falling back to URL rewriting when the browser has cookies disabled.
        The new strategy can be enabled by setting <literal>&lt;session-tracking-strategy&gt;</literal> to <literal>COOKIEONLY</literal> in the project configuration
        (see <xref linkend="configuration.project.projectxml"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_29">
    <title>What's new in Pustefix 0.18.29</title>

    <section xml:id="news.0_18_29.renderextensions">
      <title>Contextual render includes</title>
      <para>
        Added support for setting the context node of the main transformation as the context node of a render include sub-transformation by specifying 
        render parts as <literal>contextual</literal>.
        (see <xref linkend="xslt.renderextensions"/>).
      </para>
    </section>

    <section xml:id="news.0_18_29.xslt">
      <title>XSL parameters within include parameter XPath expressions</title>
      <para>
        Added support for using XSL parameters within include parameter XPath expressions, e.g. you can access the page and sitemap parameters to dynamically create include part names. 
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_30">
    <title>What's new in Pustefix 0.18.30</title>

    <section xml:id="news.0_18_30.oxm">
      <title>Object-to-XML mapping with JAXB</title>
      <para>
        Pustefix's object-to-XML mapping layer now alternatively supports marshalling via JAXB, e.g. <literal>ContextResources</literal> annotated with the according JAXB annotation 
        now are automatically serialized to the DOM tree via <literal>JAXB</literal> instead of the builtin serialization mechanism (see <xref linkend="advanced.object2xml.jaxb"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_31">
    <title>What's new in Pustefix 0.18.31</title>

    <section xml:id="news.0_18_31.pfxinternals">
      <title>TargetGenerator tooling extensions toggle</title>
      <para>
        Pustefix now supports toggling of the XSL tooling extensions at runtime. Thus you can generate pages in development mode being fully identical with the production version, which
        can be very helpful if you're debugging problems caused by the additional markup from the XSL tooling (like whitespace differences). The toggle can be found as action on the
        Pustefix internals page (see <xref linkend="tooling.pfxinternals"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_34">
    <title>What's new in Pustefix 0.18.34</title>

    <section xml:id="news.0_18_34.includeparams">
      <title>Extended include parameter support</title>
      <para>
        More Pustefix templates now support using include parameter expressions in attribute values (see <xref linkend="xslt.pfx.includeparams"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_35">
    <title>What's new in Pustefix 0.18.35</title>

    <section xml:id="news.0_18_35.logging">
      <title>Early logging configuration</title>
      <para>
        Pustefix now supports setting up Log4j at early application startup time using a ServletContextListener, thus being able to log errors/messages occurring
        before the Spring application context is started (see <xref linkend="configuration.logging"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_38">
    <title>What's new in Pustefix 0.18.38</title>

    <section xml:id="news.0_18_38.pfxinternals">
      <title>Full text search</title>
      <para>
        Pustefix's development tooling now offers a full text search (at runtime). The search can be found on the <literal>pfxinternals</literal> page and supports searching the webapp, modules and the classpath using file name patterns and regular expressions (see <xref linkend="tooling.pfxinternals.search"/>).
      </para>
    </section>

    <section xml:id="news.0_18_38.sitemap">
      <title>Default page alternatives</title>
      <para>
        Now you can choose a page alternative to be the default page alternative for a page. Thus linking or directly calling the logical page will trigger the according default page alternative
        (see <xref linkend="configuration.sitemap"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_39">
    <title>What's new in Pustefix 0.18.39</title>

    <section xml:id="news.0_18_39.xslt">
      <title>Setting pfx:button page at runtime</title>
      <para>
        The <literal>&lt;pfx:button/&gt;</literal> template now supports setting the page name at runtime using the <literal>&lt;pfx:page/&gt;</literal> child element (see <xref linkend="xslt.pfx.button"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_42">
    <title>What's new in Pustefix 0.18.42</title>

    <section xml:id="news.0_18_42.multitenancy">
      <title>Multitenancy/-language support for static resources</title>
      <para>
        Static resources now can be delivered in language/tenant-specific versions, whereas tenant/language act as additional path components, e.g. <literal>/bar/foo.gif</literal> is searched under <literal>/bar/en_CA/foo.gif</literal> and <literal>/bar/en/foo.gif</literal> first (see example in <xref linkend="advanced.multitenancy"/>). This feature can be enabled on directory basis by addding the boolean attribute <literal>i18n</literal> to the according static path configurations (see <xref linkend="configuration.project.projectxml"/> and <xref linkend="modulessupport.types.new"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_59">
    <title>What's new in Pustefix 0.18.59</title>

    <section xml:id="news.0_18_59.tooling">
      <title>Rendering pages with static DOM tree during development</title>
      <para>
        Introduced new special parameter <literal>__staticdom</literal>, which lets you render pages with the static DOM tree provided by the default <literal>State</literal>, e.g. for
        debugging view problems (see <xref linkend="tooling.specialparams"/>).
      </para>
    </section>
    <section xml:id="news.0_18_59.xslt">
      <title>Added XSL extension elements for logging and debugging</title>
      <para>
        Added some XSL extension elements extending the standard way of outputting messages in XSL by supporting log level and Log4J loggers. Added extension element for fail-safe
        XSLT processing, e.g. on tooling or test pages (see <xref linkend="xslt.extensions.extensionelements"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_63">
    <title>What's new in Pustefix 0.18.63</title>

    <section xml:id="news.0_18_63.xslt">
      <title>Instance level XSLT extension functions</title>
      <para>
        Using the new XSLT extension function <literal>pfx:getBean()</literal> you can look up Spring beans and pass them as first argument to XSLT extension functions
        for making instance level method calls (see <xref linkend="xslt.extensions.xpathfunctions.misc"/>).
      </para>
    </section>
    <section xml:id="news.0_18_63.urls">
      <title>Preserving parameters on redirect</title>
      <para>
        Sometimes request parameters should be preserved when redirecting after a request has been processed, e.g. for tracking purposes. See <xref linkend="configuration.servlet.contextxml"/>
        for details about the <literal>&lt;preserve-params&gt;</literal> configuration.
      </para>
    </section>
    <section xml:id="news.0_18_63.includes">
      <title>Reflective include information</title>
      <para>
        Pustefix now provides some reflective include information during the XSL transformation. Using the new <literal>pfx:getIncludeInfo</literal> XPath function you can query the names 
        of all parts contained in a file, e.g. useful to automatically include generated include parts based on naming conventions 
        (see <xref linkend="xslt.extensions.xpathfunctions.include"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_64">
    <title>What's new in Pustefix 0.18.64</title>

    <section xml:id="news.0_18_64.iwrapper">
      <title>Support standard Java regular expressions in IWrapper checks</title>
      <para>
        IWrapper parameters now can be checked using standard Java regular expressions instead of the special Perl5/Apache ORO expressions. To be backwards-compatible existing expressions, starting
        with <literal>/</literal>, still will be handled as Perl5 expressions. Other expressions will be treated as Java standard expression. Future Pustefix versions will completely remove
        the Apache ORO and convert Perl5 expressions to Java standard expression under the hood.
      </para>
    </section>
    <section xml:id="news.0_18_64.multitenancy">
      <title>Support multitenant property configuration</title>
      <para>
        Properties within the Pustefix configuration files now can be configured tenant-dependent. The tenant can be specified using a <literal>tenant</literal> attribute, 
        e.g. <literal>&lt;prop name="foo" tenant="UK"&gt;bar&lt;/prop&gt;</literal> (see <xref linkend="configuration.format.props"/>).
      </para>
    </section>
    <section xml:id="news.0_18_64.tooling">
      <title>Configurable result DOM viewing</title>
      <para>
        Viewing of the result DOM now is configurable using the <literal>&lt;show-dom/&gt;</literal> configuration element (see <xref linkend="configuration.project.projectxml"/>).
        Additionally you can mark selected sessions as debuggable via JMX and thus make the DOM tree available for debugging purposes on production systems too.
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_70">
    <title>What's new in Pustefix 0.18.70</title>

    <section xml:id="news.0_18_70.aliases">
      <title>Page alias names with slashes</title>
      <para>
        Pustefix now supports using slashes in page alias names, e.g. <literal>mysection/mypage</literal>, which can help to create more user- or SEO-friendly URLs.
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_71">
    <title>What's new in Pustefix 0.18.71</title>

    <section xml:id="news.0_18_71.spring">
      <title>Environment-dependent Spring property files</title>
      <para>
        Pustefix provides a new <literal>PropertyPlaceholderConfigurer</literal> implementation which can be used to organize Spring properties in different environment-dependent files (see <xref linkend="configuration.spring.envprops"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_87">
    <title>What's new in Pustefix 0.18.87</title>

    <section xml:id="news.0_18_87.xslt">
      <title>New XPath string functions using pattern matching</title>
      <para>
        Pustefix provides the new XPath functions <literal>pfx:matches()</literal> and <literal>pfx:replace()</literal>, which basically are a backport of the according XPath 2.0 function, making pattern matching available in XSLT 1 (see <xref linkend="xslt.extensions.xpathfunctions.string"/>).
      </para>
    </section>

  </section>

</chapter>
