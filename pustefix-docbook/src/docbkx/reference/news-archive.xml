<?xml version="1.0"?>
<chapter xml:id="newsarchive" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>What's new (coming from the preceding release line)</title>    
  <section xml:id="news.0_15_6">
    <title>What's new in Pustefix 0.15.6</title>
  
    <section xml:id="news.0_15_6.modules">
      <title>Module enhancements</title>
      <para>
        Introduced pre-defined special module names <literal>WEBAPP</literal> and 
        <literal>PAGEDEF</literal>, which can be set as <literal>module</literal> values at <literal>&lt;pfx:include&gt;</literal>
        and <literal>&lt;pfx:image&gt;</literal> tags to explicitly refer to resources from the webapp folder
        or resources from within the module where a page is defined (see <xref linkend="advanced.dyninclude.modinclude.special"/>).
      </para>
      <para>
        The config-include mechanism now supports directly referencing config
        fragment files from modules by adding a <literal>module</literal> attribute to the according
        <literal>&lt;config-include&gt;</literal> elements (see <xref linkend="configuration.depend"/> and <xref linkend="configuration.servlet.contextxml"/>).
      </para>
    </section>
  
  </section>
  
  <section xml:id="news.0_15_7">
    <title>What's new in Pustefix 0.15.7</title>

    <section xml:id="news.0_15_7.modules">
      <title>Module enhancements</title>
      <para>
        Static web resources now can be delivered directly from modules without having to extract them to the webapp folder first
        by the build process. Thus it's no longer necessary to define resource mappings in the module's descriptor file (see
        <xref linkend="modulessupport"/>). Making
        resources from modules publicly available now just requires to define an according static path in the project configuration,
        e.g. <literal>&lt;path&gt;/modules/mymodule/mypath/img&lt;/path&gt;</literal> makes available the according folder 
        <literal>/PUSTEFIX-INF/mypath/img</literal> from the module/JAR file <literal>mymodule</literal>.
      </para>
      <para>
        Status message files no longer require to be extracted using a resource mapping. 
        Now they're automatically detected within module jars
        and merged to the according <literal>modules-override</literal> folder.
      </para> 
   
    </section>
  </section>

  <section xml:id="news.0_15_11">
    <title>What's new in Pustefix 0.15.11</title>

    <section xml:id="news.0_15_11.config">
      <title>Configuration system enhancements</title>
      <para>
        We improved the configuration customization support by making context init parameters available as environment properties
        and thus usable as XPath variables during the customization process (see <xref linkend="configuration.customization"/>).
      </para>
      <para>
        Besides we dropped the storage of environment properties during the build (and the reusage at runtime). Thus a WAR file
        doesn't contain build-dependent settings any longer and can be used in different environments. Environment specific
        config customizations can be controlled by setting according context init parameters.
      </para>
   
    </section>
  </section>

  <section xml:id="news.0_15_13">
    <title>What's new in Pustefix 0.15.13</title>

    <section xml:id="news.0_15_13.config">
      <title>Module/configuration enhancements</title>
      <para>
        Including configuration fragments from modules now can be done without having to directly specify the module names.
        Therefor the <literal>config-include</literal> element now supports <literal>module</literal> attribute values
        containing simple patterns, which will be matched against the names of the modules available in the classpath,
        e.g. <literal>module="*"</literal> will include all according configuration fragments found in the classpath,
        <literal>module="*-us"</literal> will include only fragments from modules whose name ends with <literal>-us</literal>.
      </para>
      <para>
        Added support for conditional unpacking of module resources.
        Within the module descriptor you can set the optional <literal>resources</literal> element's 
        attribute <literal>unpack</literal> to <literal>obsolete</literal>. Thus the resources won't be extracted
	in the current or newer Pustefix versions (despite containing resource mappings).
        If you still want that obsolete resources are extracted, you can configure the Maven <literal>pustefix-webapp-plugin</literal>
	by adding <literal>&lt;unpackObsolete&gt;true&lt;/unpackObsolete&gt;</literal> to its configuration.
	This should help migrating modules and applications towards avoiding extracting resources at all, while keeping
        backwards compatibility for modules shared between different applications (see <xref linkend="modulessupport"/>).
      </para>
    </section>
    <section xml:id="news.0_15_13.tooling">
      <title>Tooling enhancements</title>
      <para>
        When hovering the closing include part delimiters displayed in edit mode, the tooltip now shows additional information for dynamic
        includes. It prints out the complete dynamic search chain, e.g. something like 
        <literal>webapp(?) module-a(-) module-aa(+) module-ab(+)</literal>, whereas <literal>(?)</literal> means that the file doesn't
        exist, <literal>(-)</literal> says that the file exists but doesn't contain the part, and <literal>(+)</literal> implies 
        that a file containing the part is found.
      </para>
      <para>
        Introduced the Pustefix internals page. Similar to the DOM tree view this page provides some additional information useful
        during development, e.g. environment, JVM and module information (see <xref linkend="tooling.pfxinternals"/>). 
      </para>
    </section>
  </section>

  <section xml:id="news.0_15_14">
    <title>What's new in Pustefix 0.15.14</title>

    <section xml:id="news.0_15_14.iwrapper">
      <title>IWrapper enhancements</title>
      <para>Annotation-based IWrappers now also support assigning IHandler beans by name. Therefor the <literal>@IWrapper</literal>
            annotation provides the new <literal>beanRef</literal> attribute (see <xref linkend="advanced.iwrapperannotations.reference"/>).
      </para>
    </section>
  </section>

  <section xml:id="news.0_15_17">
    <title>What's new in Pustefix 0.15.17</title>

    <section xml:id="news.0_15_17.modules">
      <title>Module enhancements</title>
      <para>Modules now can define which directories contain static resources and should be publicly available. Thus you don't have
            to configure it in every application using the module. This configuration is done in the module deployment descriptor
            using <literal>&lt;path/&gt;</literal> elements within the <literal>&lt;static/&gt;</literal> top-level section 
            (see <xref linkend="modulessupport"/>).
      </para>
    </section>
  </section>

  <section xml:id="news.0_16_0">
    <title>What's new in Pustefix 0.16.0</title>
  
    <para>Pustefix 0.16.0 focuses on SEO. It brings more user and search engine friendly URLs. The main features are:</para>

    <itemizedlist>
      <listitem>
        <para>
          New session tracking strategies:
          <itemizedlist>
            <listitem>Cookie-based session tracking</listitem>
            <listitem>Specialized session tracking strategy for search engine bots</listitem>
          </itemizedlist>
        </para>
      </listitem>
      <listitem>
        <para>
          URL cleanup
          <itemizedlist>
            <listitem>Page URLs without /xml prefix</listitem>
            <listitem>Use __frame parameter only on demand</listitem>
            <listitem>Sessionless URLs</listitem>
            <listitem>Home page under / (without redirect)</listitem>
          </itemizedlist> 
        </para>
      </listitem>
    </itemizedlist>

    <para>If you're migrating an existing appliation to Pustefix 0.16.0, you should have a look at <xref linkend="upgrade"/>.</para>
  
  </section>

  <section xml:id="news.0_16_5">
    <title>What's new in Pustefix 0.16.5</title>
  
    <para>Pustefix 0.16.5 brings some CMS improvements. The CMS editor now supports editing of resources coming from modules
          (if they're loaded via the live mechanism). Modules are readonly by default, but can be made editable by adding
          <literal>&lt;content-editable&gt;true&lt;/content-editable&gt;</literal> to the module descriptor 
          (see <xref linkend="modulessupport.types.new"/>). 
    </para>

  </section>

  <section xml:id="news.0_17_0">
    <title>What's new in Pustefix 0.17.0</title>
  
    <para>Pustefix 0.17.0 focuses on XSLT rendering improvements. It brings the so-called render extensions, a mechanism which allows
          to call an extension function to produce additional output and write it to the result of the main transformation (on the last
          transformation level).
    </para>
    <para>The default render extension implementation, the so-called render include mechanism, supports the standalone rendering/outputting of 
        include parts.
        Thus you're able to include parts at runtime, e.g. based on the data from the result tree. In contrast to the traditional runtime
        includes, which are restricted to simple content and a subset of tags available on the last transformation level, the render includes support     
        arbitrary content because the metatags and master XSLT transformations are also applied (see <xref linkend="xslt.renderextensions"/>).
    </para>
    <para>
        Render include parts not just can be rendered within a regular main transformation, but can be also rendered standalone, i.e. you can 
        request a rendered part via AJAX to dynamically update your page. 
    </para>

    <para>If you're migrating an existing appliation to Pustefix 0.17.0, you should have a look at <xref linkend="upgrade"/>.</para>
  
  </section>

  <section xml:id="news.0_18_0">
    <title>What's new in Pustefix 0.18.0</title>
  
    <para>Pustefix 0.18.0 focuses on new internationalization features. It brings multi-tenancy on the view layer, supporting
          different views for different tenants (like countries or markets) within a single application instance, along with
	  runtime-switchable multi-language support, including internationalized page names.
    </para>

    <section xml:id="news.0_18_0.multitenancy">
      <title>Multi-tenancy</title>
      <para>
        Pustefix 0.18 provides multi-tenancy support on the view layer, i.e. it can create and deliver alternative versions of a page
        depending on a selected tenant. Tenants are automatically selected by matching host name patterns against the requested
        host name. Alternative page versions are created by applying filters to the dynamic include mechanism, thus overriding
        and extending the core page content with tenant- and/or language-specific content from according tenant/language modules
        (see <xref linkend="advanced.multitenancy"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.multilanguage">
      <title>Multi-language</title>
      <para>
        Up to Pustefix 0.17 the only way to make the language of your application switchable at runtime was using
        the <literal>&lt;pfx:langselect&gt;</literal> tags to directly embed all language dependent content into the same
        part and theme side by side. With Pustefix 0.18 it's possible to automatically create different versions of a page serving
        different languages using the dynamic override mechanism, e.g. you can source out all language dependent content
        into own modules (language packs) which override a language independent core module (see <xref linkend="advanced.i18n"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.sitemap">
      <title>Sitemap and i18n pagenames</title>
      <para>
        Pustefix 0.18 differentiates between logical page names and display page names. Thus you can rename pages or provide
        internationalized page names without having to change existing page references (to the logical page name). Such page aliases
        are configured in a file called <literal>sitemap.xml</literal> which is replacing the <literal>navigation</literal> configuration
        from <literal>depend.xml</literal> (see <xref linkend="configuration.sitemap"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.pagealt">
      <title>Page alternatives</title>
      <para>
        Page alternatives are a new concept for creating different representations of a page (including possible variants). Page
        alternatives are internally used to create different versions for languages/tenants, but can be also used for
        pages which are based on a common page, assigned to the same logical page, but with different content and display pagename, e.g.
        landing pages (see <xref linkend="advanced.pagealternatives"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.modules">
      <title>Pustefix modules</title>
      <para>
        The module mechanism has been extended to support sourcing out every kind of resource into modules, e.g. you
        can put arbitrary configuration files into modules (like <literal>project.xml</literal>, <literal>depend.xml</literal> or
        <literal>spring.xml</literal>). The Pustefix resource loading mechanism has been extended and now additionally 
        implements Spring's Resource abstraction layer. Thus you can use module URIs within the Spring configuration, e.g.
        for injecting module resources into beans.
      </para>
      <para>
        The dynamic search mechanism now supports adding modules to the default search chain. This is declaratively done
        in the module descriptor <literal>pustefix-module.xml</literal>. You can additionally set a search priority to define
        a search order. Using filter attributes you can define a dynamic search filter allowing to include/exclude certain
        modules from searching/overriding, which is useful for multi-tenant/language applications to filter by tenant or language
        (see <xref linkend="modulessupport.types.new"/>).
      </para>
    </section>

    <section xml:id="news.0_18_0.autoconfig">
      <title>Automatic configuration</title>
      <para>
        Pustefix 0.18 extends the <literal>depend.xml</literal> configuration by providing a <literal>&lt;auto-standardpage&gt;</literal>
        element which can be used as template, which automatically creates standardpage definitions for pages found in a specified
        folder (see <xref linkend="configuration.depend.autostandardpage"/>).
      </para>
    </section>
  
  </section>

  <section xml:id="news.0_18_2">
    <title>What's new in Pustefix 0.18.2</title>

    <section xml:id="news.0_18_2.xslterrors">
      <title>Context information for XSLT errors</title>
      <para>
        The default error page for XSLT errors now provides additional contextual information. The error line from the XML file causing the
        error is cut out (including some surrounding lines) and added to the error page.
      </para>
    </section>
 
    <section xml:id="news.0_18_2.xslttooling">
      <title>Switchable XSLT tooling extensions</title>
      <para>
        In prior versions the XSLT tooling extensions (dynamic include information, console, etc.) were always enabled if not running
        in production mode. Now you can selectively enable/disable the tooling extensions in all modes (except production mode). Therefore
        Pustefix introduced the configuration element <literal>&lt;tooling-extensions&gt;</literal> (see 
        <xref linkend="configuration.project.projectxml"/>).
      </para>
      <para>
        Besides the XSLT tooling has been decoupled from the editor settings, i.e. you can use the include information tooling without
        having the editor enabled.
      </para>
    </section>

    <section xml:id="news.0_18_2.sitemap">
      <title>Search-engine sitemap generation</title>
      <para>
        Pustefix now supports generating search-engine sitemaps according to the sitemaps protocol (see
        <link xlink:href="http://www.sitemaps.org/protocol.html">Sitemaps protocol specification</link>).
        Sitemap generation can be enabled by adding the <literal>&lt;searchengine-sitemap/&gt;</literal> element to the
        project configuration (see <xref linkend="configuration.project.projectxml"/>).
      </para>
    </section>

    <section xml:id="news.0_18_2.pagealts">
      <title>Direct page alternative linking</title>
      <para>
        In prior Pustefix versions links to page alternatives created with <literal>&lt;pfx:button&gt;</literal> referenced the logical page
        and the application logic was responsible for detecting/setting the page alternative and thus triggering a redirect to the 
        according page alternative by Pustefix. 
      </para>
      <para>
        Now <literal>&lt;pfx:button&gt;</literal> supports directly setting the page alternative key using the <literal>altkey</literal>
        attribute or <literal>&lt;pfx:altkey&gt;</literal> element. Thus Pustefix can directly reference the according page alternative
        name without having to do a redirect (see <xref linkend="xslt.pfx.button"/>).
      </para>
    </section>

   <section xml:id="news.0_18_2.oxm">
      <title>OXM support for BigDecimal and BigInteger</title>
      <para>
        Pustefix's object-to-XML mapping mechanism now can serialize BigDecimal and BigInteger objects.
      </para>
   </section>

  </section>

  <section xml:id="news.0_18_5">
    <title>What's new in Pustefix 0.18.5</title>

    <section xml:id="news.0_18_5.cmis">
      <title>CMIS support</title>
      <para>
        Added basic support for loading resources from content management systems using CMIS/AtomPub. 
      </para>
    </section>
   <section xml:id="news.0_18_5.pagealiases">
      <title>Page aliases</title>
      <para>
        Added XPath function to get current display page name during rendering (see <xref linkend="xslt.extensions.xpathfunctions.getdisplaypagename"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_6">
    <title>What's new in Pustefix 0.18.6</title>

    <section xml:id="news.0_18_6.xslt">
      <title>Include part existence check</title>
      <para>
        Added support for checking the existence of an include part during rendering, e.g. for displaying an include part depending on the existence of another include part (see <xref linkend="xslt.pfx.checkinclude"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_7">
    <title>What's new in Pustefix 0.18.7</title>

    <section xml:id="news.0_18_7.sitemap">
      <title>Custom sitemap attributes</title>
      <para>
        Added support for using custom XML attributes at page elements within the sitemap configuration (see <xref linkend="configuration.sitemap"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_9">
    <title>What's new in Pustefix 0.18.9</title>

    <section xml:id="news.0_18_9.logging">
      <title>Log directory configuration</title>
      <para>
        Added support for setting the log directory using the context init parameter <literal>logroot</literal>. 
        The directory can be referenced in the log configuration file <literal>pfixlog.xml</literal> using the custom tag <literal>&lt;cus:logroot/&gt;</literal>.
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_13">
    <title>What's new in Pustefix 0.18.13</title>

    <section xml:id="news.0_18_13.xslt">
      <title>Getting environment properties from within XSLT</title>
      <para>
        Added support for getting environment from within XSLT using the XPath function <literal>pfx:getEnvProperty</literal> (see <xref linkend="xslt.extensions.xpathfunctions"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_14">
    <title>What's new in Pustefix 0.18.14</title>

    <section xml:id="news.0_18_14.session">
      <title>External session invalidation synchronization support</title>
      <para>
        Invalidating sessions outside of Pustefix, e.g. within a ServletFilter or Spring WebRequestInterceptor, can break concurrently running requests operating on the same session.
        Pustefix now can block such a session invalidation until all requests using this session are processed. Therefor Pustefix provides the new utility method 
        <literal>SessionUtils.invalidate(session)</literal>, which can be used instead of directly calling <literal>invalidate()</literal> at the <literal>HttpSession</literal>
        object.
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_27">
    <title>What's new in Pustefix 0.18.27</title>

    <section xml:id="news.0_18_27.contextresources">
      <title>Global output resources</title>
      <para>
        Added support for global output resources, i.e. output resources/ContextResources can be globally declared, thus being automatically added as output resources to all pagerequests.
        That's an alternative solution for adding global data and could replace the necessity of doing this programmatically via a basic <literal>State</literal> implementation.
        Global resources can be added to the new <literal>&lt;global-output/&gt;</literal> section of the context configuration
        (see <xref linkend="configuration.servlet.contextxml"/>).
      </para>
    </section>

    <section xml:id="news.0_18_27.sessiontracking">
      <title>Cookie-only session tracking</title>
      <para>
        Added new sessiontracking strategy which forces cookie-based session tracking without falling back to URL rewriting when the browser has cookies disabled.
        The new strategy can be enabled by setting <literal>&lt;session-tracking-strategy&gt;</literal> to <literal>COOKIEONLY</literal> in the project configuration
        (see <xref linkend="configuration.project.projectxml"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_29">
    <title>What's new in Pustefix 0.18.29</title>

    <section xml:id="news.0_18_29.renderextensions">
      <title>Contextual render includes</title>
      <para>
        Added support for setting the context node of the main transformation as the context node of a render include sub-transformation by specifying 
        render parts as <literal>contextual</literal>.
        (see <xref linkend="xslt.renderextensions"/>).
      </para>
    </section>

    <section xml:id="news.0_18_29.xslt">
      <title>XSL parameters within include parameter XPath expressions</title>
      <para>
        Added support for using XSL parameters within include parameter XPath expressions, e.g. you can access the page and sitemap parameters to dynamically create include part names. 
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_30">
    <title>What's new in Pustefix 0.18.30</title>

    <section xml:id="news.0_18_30.oxm">
      <title>Object-to-XML mapping with JAXB</title>
      <para>
        Pustefix's object-to-XML mapping layer now alternatively supports marshalling via JAXB, e.g. <literal>ContextResources</literal> annotated with the according JAXB annotation 
        now are automatically serialized to the DOM tree via <literal>JAXB</literal> instead of the builtin serialization mechanism (see <xref linkend="advanced.object2xml.jaxb"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_31">
    <title>What's new in Pustefix 0.18.31</title>

    <section xml:id="news.0_18_31.pfxinternals">
      <title>TargetGenerator tooling extensions toggle</title>
      <para>
        Pustefix now supports toggling of the XSL tooling extensions at runtime. Thus you can generate pages in development mode being fully identical with the production version, which
        can be very helpful if you're debugging problems caused by the additional markup from the XSL tooling (like whitespace differences). The toggle can be found as action on the
        Pustefix internals page (see <xref linkend="tooling.pfxinternals"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_34">
    <title>What's new in Pustefix 0.18.34</title>

    <section xml:id="news.0_18_34.includeparams">
      <title>Extended include parameter support</title>
      <para>
        More Pustefix templates now support using include parameter expressions in attribute values (see <xref linkend="xslt.pfx.includeparams"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_35">
    <title>What's new in Pustefix 0.18.35</title>

    <section xml:id="news.0_18_35.logging">
      <title>Early logging configuration</title>
      <para>
        Pustefix now supports setting up Log4j at early application startup time using a ServletContextListener, thus being able to log errors/messages occurring
        before the Spring application context is started (see <xref linkend="configuration.logging"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_38">
    <title>What's new in Pustefix 0.18.38</title>

    <section xml:id="news.0_18_38.pfxinternals">
      <title>Full text search</title>
      <para>
        Pustefix's development tooling now offers a full text search (at runtime). The search can be found on the <literal>pfxinternals</literal> page and supports searching the webapp, modules and the classpath using file name patterns and regular expressions (see <xref linkend="tooling.pfxinternals.search"/>).
      </para>
    </section>

    <section xml:id="news.0_18_38.sitemap">
      <title>Default page alternatives</title>
      <para>
        Now you can choose a page alternative to be the default page alternative for a page. Thus linking or directly calling the logical page will trigger the according default page alternative
        (see <xref linkend="configuration.sitemap"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_39">
    <title>What's new in Pustefix 0.18.39</title>

    <section xml:id="news.0_18_39.xslt">
      <title>Setting pfx:button page at runtime</title>
      <para>
        The <literal>&lt;pfx:button/&gt;</literal> template now supports setting the page name at runtime using the <literal>&lt;pfx:page/&gt;</literal> child element (see <xref linkend="xslt.pfx.button"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_42">
    <title>What's new in Pustefix 0.18.42</title>

    <section xml:id="news.0_18_42.multitenancy">
      <title>Multitenancy/-language support for static resources</title>
      <para>
        Static resources now can be delivered in language/tenant-specific versions, whereas tenant/language act as additional path components, e.g. <literal>/bar/foo.gif</literal> is searched under <literal>/bar/en_CA/foo.gif</literal> and <literal>/bar/en/foo.gif</literal> first (see example in <xref linkend="advanced.multitenancy"/>). This feature can be enabled on directory basis by addding the boolean attribute <literal>i18n</literal> to the according static path configurations (see <xref linkend="configuration.project.projectxml"/> and <xref linkend="modulessupport.types.new"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_59">
    <title>What's new in Pustefix 0.18.59</title>

    <section xml:id="news.0_18_59.tooling">
      <title>Rendering pages with static DOM tree during development</title>
      <para>
        Introduced new special parameter <literal>__staticdom</literal>, which lets you render pages with the static DOM tree provided by the default <literal>State</literal>, e.g. for
        debugging view problems (see <xref linkend="tooling.specialparams"/>).
      </para>
    </section>
    <section xml:id="news.0_18_59.xslt">
      <title>Added XSL extension elements for logging and debugging</title>
      <para>
        Added some XSL extension elements extending the standard way of outputting messages in XSL by supporting log level and Log4J loggers. Added extension element for fail-safe
        XSLT processing, e.g. on tooling or test pages (see <xref linkend="xslt.extensions.extensionelements"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_63">
    <title>What's new in Pustefix 0.18.63</title>

    <section xml:id="news.0_18_63.xslt">
      <title>Instance level XSLT extension functions</title>
      <para>
        Using the new XSLT extension function <literal>pfx:getBean()</literal> you can look up Spring beans and pass them as first argument to XSLT extension functions
        for making instance level method calls (see <xref linkend="xslt.extensions.xpathfunctions.misc"/>).
      </para>
    </section>
    <section xml:id="news.0_18_63.urls">
      <title>Preserving parameters on redirect</title>
      <para>
        Sometimes request parameters should be preserved when redirecting after a request has been processed, e.g. for tracking purposes. See <xref linkend="configuration.servlet.contextxml"/>
        for details about the <literal>&lt;preserve-params&gt;</literal> configuration.
      </para>
    </section>
    <section xml:id="news.0_18_63.includes">
      <title>Reflective include information</title>
      <para>
        Pustefix now provides some reflective include information during the XSL transformation. Using the new <literal>pfx:getIncludeInfo</literal> XPath function you can query the names 
        of all parts contained in a file, e.g. useful to automatically include generated include parts based on naming conventions 
        (see <xref linkend="xslt.extensions.xpathfunctions.include"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_64">
    <title>What's new in Pustefix 0.18.64</title>

    <section xml:id="news.0_18_64.iwrapper">
      <title>Support standard Java regular expressions in IWrapper checks</title>
      <para>
        IWrapper parameters now can be checked using standard Java regular expressions instead of the special Perl5/Apache ORO expressions. To be backwards-compatible existing expressions, starting
        with <literal>/</literal>, still will be handled as Perl5 expressions. Other expressions will be treated as Java standard expression. Future Pustefix versions will completely remove
        the Apache ORO and convert Perl5 expressions to Java standard expression under the hood.
      </para>
    </section>
    <section xml:id="news.0_18_64.multitenancy">
      <title>Support multitenant property configuration</title>
      <para>
        Properties within the Pustefix configuration files now can be configured tenant-dependent. The tenant can be specified using a <literal>tenant</literal> attribute, 
        e.g. <literal>&lt;prop name="foo" tenant="UK"&gt;bar&lt;/prop&gt;</literal> (see <xref linkend="configuration.format.props"/>).
      </para>
    </section>
    <section xml:id="news.0_18_64.tooling">
      <title>Configurable result DOM viewing</title>
      <para>
        Viewing of the result DOM now is configurable using the <literal>&lt;show-dom/&gt;</literal> configuration element (see <xref linkend="configuration.project.projectxml"/>).
        Additionally you can mark selected sessions as debuggable via JMX and thus make the DOM tree available for debugging purposes on production systems too.
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_70">
    <title>What's new in Pustefix 0.18.70</title>

    <section xml:id="news.0_18_70.aliases">
      <title>Page alias names with slashes</title>
      <para>
        Pustefix now supports using slashes in page alias names, e.g. <literal>mysection/mypage</literal>, which can help to create more user- or SEO-friendly URLs.
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_71">
    <title>What's new in Pustefix 0.18.71</title>

    <section xml:id="news.0_18_71.spring">
      <title>Environment-dependent Spring property files</title>
      <para>
        Pustefix provides a new <literal>PropertyPlaceholderConfigurer</literal> implementation which can be used to organize Spring properties in different environment-dependent files (see <xref linkend="configuration.spring.envprops"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_18_87">
    <title>What's new in Pustefix 0.18.87</title>

    <section xml:id="news.0_18_87.xslt">
      <title>New XPath string functions using pattern matching</title>
      <para>
        Pustefix provides the new XPath functions <literal>pfx:matches()</literal> and <literal>pfx:replace()</literal>, which basically are a backport of the according XPath 2.0 function, making pattern matching available in XSLT 1 (see <xref linkend="xslt.extensions.xpathfunctions.string"/>).
      </para>
    </section>

  </section>

  <section xml:id="news.0_19_0">
    <title>What's new in Pustefix 0.19.0</title>
  
    <para>Pustefix 0.19.0 focuses on upgrading the underlying technologies/libraries. It added support for Servlet API 3 and Spring 4.
          The legacy dependency to Apache ORO was removed, i.e. stuff like regular expressions and LRU caches now are implemented completely
          based on the JDK standard library.
    </para>
  </section>

  <section xml:id="news.0_19_4">
    <title>What's new in Pustefix 0.19.4</title>
  
    <para>Beginning with this version the Pustefix 0.19 line becomes the main development line. All new features from 0.18 now are available
          in 0.19 too and the development of the 0.18 line will be discontinued. It's recommended to upgrade existing applications to 0.19 soon
          (see <xref linkend="upgrade.0_18_to_0_19"/>).
    </para>
  </section>

  <section xml:id="news.0_19_8">
    <title>What's new in Pustefix 0.19.8</title>
  
    <para>Passing through the last pageflow using the <literal>__lf</literal> URL parameter has become optional. It can be disabled using the new configuration switch
          <literal>&lt;disable-pageflow-passthrough/&gt;</literal> (see <link linkend="configuration.servlet.contextxml.passthrough">configuration section</link>).
    </para>
  </section>

  <section xml:id="news.0_19_9">
    <title>What's new in Pustefix 0.19.9</title>
  
    <para>Pustefix now supports modularized log4j configurations and provides an appropriate default configuration, which helps keeping the logging configuration
          up-to-date with the latest Pustefix version and simplifies the maintenance of complex application logging configurations 
          (see <link linkend="configuration.logging.includes">logging configuration</link>). Additionally Pustefix now allows changing of log levels at runtime
          via JMX.
    </para>
  </section>

  <section xml:id="news.0_19_11">
    <title>What's new in Pustefix 0.19.11</title>
  
    <para>Extended form error checking tag by optionally supporting IWrapper parameter prefix/name and request trigger conditions, and adding a new tag
          with inverted semantics (see <link linkend="xslt.forms.errors.fields">tag reference</link>).
    </para>
    <para>Improved render include Javascript library: support for passing arguments as JSON object, HTTP error callback functions
          (see <link linkend="xslt.renderextensions.javascript">Javascript example</link>).
    </para>
  </section>

  <section xml:id="news.0_19_14">
    <title>What's new in Pustefix 0.19.14</title>
  
    <para>Added new Maven plugin for generating a complete list with display names of all renderable pages, e.g. can be used for automatic testing.
          (see <xref linkend="tooling.mavenplugins.pagelist"/>).
    </para>
    <para>Beautified and more SEO-friendly URLs by removing the <literal>__reuse</literal> parameter from redirect URLs (replaced by Spring flash attributes).</para>
    <para>Pustefix now provides a simple Spring/annotation-based event mechanism. It should replace the deprecated way of coupling <literal>ContextResources</literal>
          using the <literal>ContextResourceObserver</literal> and <literal>ObservableContextResource</literal> interfaces (see <xref linkend="advanced.eventbus"/>).</para>
  </section>

  <section xml:id="news.0_19_15">
    <title>What's new in Pustefix 0.19.15</title>
    <para>Added support for rendering pages with non-200 status code (see <literal>SPDocument.setResponseStatus()</literal>) and 
          overriding declared error pages (see <literal>SPDocument.setResponseErrorPageOverride()</literal>).
    </para>
  </section>

  <section xml:id="news.0_19_17">
    <title>What's new in Pustefix 0.19.17</title>
    <para>Added support for Spring profiles. Pustefix now by default activates a profile for the current execution environment mode
          (see <xref linkend="configuration.spring.profiles"/>).
    </para>
  </section>

  <section xml:id="news.0_19_21">
    <title>What's new in Pustefix 0.19.21</title>
    <para>Added support for using Google Closure Compiler to compress inline Javascript (default compressor will be the YUI compressor, if available in the classpath).
    </para>
  </section>

  <section xml:id="news.0_19_23">
    <title>What's new in Pustefix 0.19.23</title>
    <para>Improved rendering perforamnce (by extension function caching).</para>
  </section>

  <section xml:id="news.0_19_24">
    <title>What's new in Pustefix 0.19.24</title>
    <para>Added new <literal>DefaultIWrapperState</literal> method <literal>handleWrapperErrors</literal> for processing validation errors,
          e.g. to log them.</para>
  </section>

  <section xml:id="news.0_19_25">
    <title>What's new in Pustefix 0.19.25</title>
    <para>Added new <literal>Context</literal> method <literal>invalidateSessionAfterCompletion</literal> for guaranteed invalidation of 
          session after current request has been processed.</para>
  </section>

  <section xml:id="news.0_19_27">
    <title>What's new in Pustefix 0.19.27</title>
    <para>Added new tool for analyzing XSL transformation performance.</para>
  </section>

  <section xml:id="news.0_19_28">
    <title>What's new in Pustefix 0.19.28</title>
    <para>Improved rendering performance for pages with lots of runtime includes (by include extension function caching).</para>
    <para>Added servlet filter for performance logging.</para>
  </section>

  <section xml:id="news.0_19_29">
    <title>What's new in Pustefix 0.19.29</title>
    <para>Improved rendering performance for pages with lots of internal links (by caching callbacks).</para>
  </section>

  <section xml:id="news.0_19_30">
    <title>What's new in Pustefix 0.19.30</title>
    <para><emphasis>We officially discontinue support for Java 1.7!</emphasis> This is the first version which makes use of Java 1.8 features. 
          Almost a year after the EOL of Java 1.7 it's really about time to say goodbye.</para>
    <para>Added support for generating request IDs which let you correlate log entries with specific web requests (see <xref linkend="advanced.requestid"/>).</para>
    <para>Added Eclipse m2e lifecycle mappings for Pustefix plugins to improve Eclipse IDE integration of Pustefix projects.</para>
  </section>

  <section xml:id="news.0_20_0">
    <title>What's new in Pustefix 0.20.0</title>
    <para>
      Added support for custom page URL paths: you can group pages using a common path prefix (so-called page <literal>page groups</literal>,
      see <xref linkend="configuration.sitemap"/>) or map pageflow names to a URL path prefix.
    </para>
  </section>

  <section xml:id="news.0_20_1">
    <title>What's new in Pustefix 0.20.1</title>
    <para>
      Added a DOM history in development mode, i.e. on the DOM view page, you can not only view last DOM but select an older version
      from a list of the previously used DOMs.
    </para>
    <para>
      Added support for headless rendering of Pustefix pages, i.e. you can programmatically do the rendering of a page or part
      and process the resulting content on the server side.
    </para>
  </section>

  <section xml:id="news.0_20_14">
    <title>What's new in Pustefix 0.20.14</title>
    <para>
      Pustefix backported some useful XPath 2.0 functions to make them avaiable with XSLT 1: <literal>pfx:encode-for-uri()</literal>,
      <literal>pfx:string-length()</literal> and <literal>pfx:substring()</literal> (see <xref linkend="xslt.extensions.xpathfunctions.string"/>).
    </para>
    <para>
      Extended the <literal>pfx:button</literal> template to support the creation of REST-style links using the new <literal>@path</literal> attribute,
      or the <literal>pfx:path</literal>/<literal>pfx:segment</literal> elements (see <xref linkend="xslt.pfx.button"/>).
    </para>
    <para>
      Added the new method <literal>getModelAndView()</literal> to the <literal>ResultDocument</literal> class. This enables you to retrieve
      the <literal>ModelAndView</literal> instance created by Spring MVC when using <literal>RequestMappings</literal>, e.g. when overriding the
      <literal>getDocument()</literal> method of a <literal>State</literal> and you need to check for model changes.
    </para>
  </section>

  <section xml:id="news.0_20_19">
    <title>What's new in Pustefix 0.20.19</title>
    <para>
      Added <literal>&lt;pfx:checkmessage&gt;</literal> and <literal>&lt;pfx:checknomessage&gt;</literal> tags for checking if a <literal>MessageSource</literal>
      message is existing or not (see <xref linkend="xslt.messages.tags"/>).
    </para>
    <para>
      Added support for configuring the Spring <literal>MessageSource</literal> in <literal>project.xml</literal>, which makes it available
      during page pre-generation too (see <xref linkend="xslt.messages.configuration"/>).
    </para>
  </section>

  <section xml:id="news.0_20_20">
    <title>What's new in Pustefix 0.20.20</title>
    <para>
      Added support for markup in message arguments and strings (unescaped rendering is enable by setting the new <literal>&lt;pfx:message&gt;</literal>
      attribute <literal>disable-output-escaping</literal> to <literal>yes</literal> (see <xref linkend="xslt.messages.tags"/>).
   </para>
  </section>

  <section xml:id="news.0_20_25">
    <title>What's new in Pustefix 0.20.25</title>
    <para>
      Added support for configuring if a matching <literal>RequestMapping</literal> method is call before/after <literal>IHandlers</literal> are processed.
      By default the <literal>RequestMapping</literal> is called first. This behaviour can be changed by setting <literal>&lt;input premvc="true"/&gt;</literal>
      (see <xref linkend="configuration.servlet.contextxml.input"/>).
   </para>
  </section>

  <section xml:id="news.0_20_26">
    <title>What's new in Pustefix 0.20.26</title>
    <para>
      Added multilanguage support for projects without tenants, i.e. specifying multiple supported languages in <literal>project.xml</literal>, an own version
      of a page per language can be generated (like it's already done for multitenant projects with multiple languages).
    </para>
    <para>
      Added support for the Spring <literal>Locale</literal> mechanism, i.e. by default Pustefix makes its currently set language available via Spring's
      <literal>LocaleResolver</literal> mechanism, e.g. for passing the <literal>Locale</literal> to request dispatching methods.
    </para>
  </section>

  <section xml:id="news.0_20_27">
    <title>What's new in Pustefix 0.20.27</title>
    <para>
      Added support for session tracking modes introduced with Servlet API 3.0, i.e. the Pustefix <literal>SessionTrackingStrategy</literal> now is derived
      from the session tracking mode setting done in <literal>web.xml</literal> (or directly via Servlet API). The <literal>&lt;session-tracking-strategy&gt;</literal>
      configuration element becomes deprecated and should be replaced by according <literal>&lt;tracking-mode&gt;</literal> settings in <literal>web.xml</literal>
      (by default <literal>COOKIE</literal> and <literal>URL</literal> tracking modes are set, which corresponds to the Pustefix <literal>COOKIE</literal>
      session tracking strategy using cookies with URL fallback, if you want <literal>COOKIEONLY</literal> strategy, you have to set the <literal>COOKIE</literal> tracking mode only).
   </para>
  </section>

  <section xml:id="news.0_20_28">
    <title>What's new in Pustefix 0.20.28</title>
    <para>
      Added support for setting the expiration time of static resources. You can set a default time for all resources or specify it per content type.
      The setting is done within the <literal>&lt;static&gt;</literal> element of the project configuration file
      (see <xref linkend="configuration.project.projectxml"/>).
    </para>
    <para>
      Pustefix now can generate CSP nonce randoms for explicitely permitting inline script, i.e. if you add an according response header, e.g.
      <literal>&lt;prop name="responseheader.Content-Security-Policy"&gt;script-src 'self' 'nonce-[NONCE]';&lt;/prop&gt;</literal>, Pustefix will
      replace <literal>[NONCE]</literal> by a secure random value, which will be automatically added as <literal>nonce</literal> attribute to
      the <literal>script</literal> elements of a page (if using the <literal>&lt;pfx:script&gt;</literal> tag). The value will be also accessible
      as <literal>nonce</literal> XSLT parameter.
    </para>
  </section>

  <section xml:id="news.0_20_29">
    <title>What's new in Pustefix 0.20.29</title>
    <para>
      Added support for generating <literal>lastmod</literal> elements into the searchengine sitemap
      (see <link xlink:href="http://www.sitemaps.org/protocol.html">Sitemaps protocol specification</link>). Therefor you have
      to add according <literal>lastmod</literal> attributes to the <literal>page</literal> or <literal>alt</literal> elements within
      the Pustefix <literal>sitemap.xml</literal> configuration file (see <xref linkend="configuration.sitemap"/>).
    </para>
  </section>

  <section xml:id="news.0_20_31">
    <title>What's new in Pustefix 0.20.31</title>
    <para>
      Pustefix states acting as Spring MVC controllers (<xref linkend="springmvc.controllerstates"/>) now support redirecting
      using redirect prefixes, i.e. a request mapped method can return a view name prefixed with <literal>redirect:</literal>
      or you can set an according view name at the <literal>ModelAndView</literal> object. The redirect will be handled by Spring,
      thus URI template variables are working too.
    </para>
  </section>

  <section xml:id="news.0_21_0">
    <title>What's new in Pustefix 0.21.0</title>
    <para>
      Pustefix now uses SLF4J as logging framework. It still supports the, meanwhile deprecated, first version of Log4j, but
      you're recommended to switch over to Logback or Log4j 2 instead. For both frameworks Pustefix provides some useful extensions
      (see <xref linkend="configuration.logging"/> and <xref linkend="upgrade.0_20_to_0_21"/> for details).
    </para>
  </section>

</chapter>
