<?xml version="1.0"?>
<chapter xml:id="ajax-calculator" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>AJAX Calculator tutorial</title>
  
  <info>
    <title>AJAX Calculator tutorial</title>
  </info>
  
  <para>
    In this tutorial you will learn how to create an AJAX application with Pustefix. As an example, you will build a very simple
    calculator, which does the real calculation in Java on the server. As in the other tutorials, the business logic has been kept
    extremely simple to focus on the tasks that are required to implement an AJAX application with the Pustefix framework.
  </para>
  <para>
    No matter how complex your business logic is, the tasks required to set up an AJAX application will be almost the same as in
    this tutorial.
  </para>
  <section xml:id="ajax-calculator.setup">
    <title>Setup</title>
    <para>
      To build this tutorial, create a new project <literal>calculator</literal> as described in
      <xref linkend="wrapper-handler.setup"/>. But this time, use the Maven archetype <literal>pustefix-archetype-application</literal> with the following data:
    </para>
    <informaltable>
      <thead>
        <tr>
          <th>Property</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>groupId</td>
          <td>org.pustefixframework.tutorial</td>
        </tr>
        <tr>
          <td>artifactId</td>
          <td>calculator</td>
        </tr>
        <tr>
          <td>version</td>
          <td>default</td>
        </tr>
        <tr>
          <td>package</td>
          <td>org.pustefixframework.tutorial.calculator</td>
        </tr>
        <tr>
          <td>pustefixVersion</td>
          <td>the latest version</td>
        </tr>
      </tbody>
    </informaltable>
    <para>
      This Maven archetype will create an application which is already set up for AJAX applications, i.e.
      it contains the required Maven dependencies and configuration.
    </para>
  </section>
  <section xml:id="ajax-calculator.businesslogic">
    <title>Implementing the business logic</title>
    <para>
      In Pustefix, a web service always has to consist of a service interface and an implementation.
      In this tutorial, you will implement a very simple webservice which provides three methods to
      execute mathematical operations.
    </para>
    <itemizedlist>
      <listitem><para>Add two integer numbers</para></listitem>
      <listitem><para>Subtract two integer numbers</para></listitem>
      <listitem><para>Multiply two integer numbers</para></listitem>
    </itemizedlist>
    <para>
      The interface for this business logic is very easy to implement:
    </para>
    <programlisting language="java"><![CDATA[package org.pustefixframework.tutorial.calculator;

public interface CalculatorService {
    public int add(int a, int b);
    public int subtract(int a, int b);
    public int multiply(int a, int b);
}]]></programlisting>
    <para>
      The implementation for this interface is not any harder to implement than the interface iteself:
    </para>
    <programlisting language="java"><![CDATA[package org.pustefixframework.tutorial.calculator;

public class CalculatorServiceImpl implements CalculatorService {
    public int add(int a, int b) {
        return a+b;
    }

    public int subtract(int a, int b) {
        return a-b;
    }

    public int multiply(int a, int b) {
        return a*b;
    }
}]]></programlisting>
  </section>
  <section xml:id="ajax-calculator.expose">
    <title>Exposing the service</title>
    <para>
      Now that you have defined the interface for your service and also provided an implementation for it, the next
      step is to expose this service and make it available to the frontend.
    </para>
    <para>
      This is done by adding a Spring bean definition for the service implementation and export this bean as a webservice.
      Your Spring configuration file <filename>src/main/webapp/WEB-INF/spring.xml</filename> should look like this:
    </para>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:ws="http://pustefixframework.org/schema/webservices"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://pustefixframework.org/schema/webservices
                           http://pustefixframework.org/schema/webservices/pustefix-webservices.xsd">

  <context:annotation-config/>

  <bean id="calculator" class="org.pustefixframework.tutorial.calculator.CalculatorServiceImpl"/>

  <ws:webservice 
    id="CalculatorService" 
    servicename="CalculatorService" 
    interface="org.pustefixframework.tutorial.calculator.CalculatorService" 
    ref="calculator" 
  />

</beans>]]></programlisting>
  </section>
  <section xml:id="ajax-calculator.consume">
    <title>Consuming the service</title>
    <para>
      With these steps, you have finished all Java and configuration work packages and can continue implementing the client
      side of your application. Open the <filename>Home.xml</filename> file and add some HTML as a frontend for
      your calculator application (we just use the default page of the generated application):
    </para>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<include_parts xmlns:ixsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:pfx="http://www.schlund.de/pustefix/core">

  <part name="content">
    <theme name="default">
      <h1>AJAX Calculator Tutorial</h1>
      <fieldset>
        <legend>Calculator</legend>
        A: <input type="text" id="a"/><br/>
        B: <input type="text" id="b"/><br/>
        <input type="button" value="add" onClick="add();"/>
        <input type="button" value="subtract" onClick="subtract();"/>
        <input type="button" value="multiply" onClick="multiply();"/>
      </fieldset>
    </theme>
  </part>

</include_parts>]]></programlisting>
    <para>
      The HTML page contains several controls:
    </para>
    <itemizedlist>
      <listitem><para>Two text input fields (with ids <literal>a</literal> and <literal>b</literal>), in which the user enters the two values, that are used for the calculation.</para></listitem>
      <listitem><para>A button labeled <literal>add</literal> which will call the JavaScript function <function>add()</function> when clicked.</para></listitem>
      <listitem><para>A button labeled <literal>subtract</literal> which will call the JavaScript function <function>subtract()</function> when clicked.</para></listitem>
      <listitem><para>A button labeled <literal>multiply</literal> which will call the JavaScript function <function>multiply()</function> when clicked.</para></listitem>
    </itemizedlist>
    <para>
      To implement an AJAX application, you will have to use JavaScript. This has been left out in the last example of your page.
      We will add it in a separate part named <literal>head</literal>, which will be automatically included in the head section
      of the page (this is done in the <literal>frame.xml</literal> previously created by the archetype - just to separate the HTML 
      from all your JavaScript includes and make the pages more maintainable).
    </para>
    <para>
      Pustefix does not only provide server side implementation helpers for your AJAX applications, but also some client side JavaScript
      classes which hide all transportation details from you. Pustefix will also generate JavaScript stub classes for the Java services
      you have exported. Therefor you have to include the following files:
    </para>
    <itemizedlist>
      <listitem><para><filename>httpRequest.js</filename> provides an abstraction over the different <literal>XmlHttpRequest</literal> implementations in the different browsers.</para></listitem>
      <listitem><para><filename>webservice_json.js</filename> provides an abstraction of the <literal>JSONWS</literal> protocol used by Pustefix.</para></listitem>
      <listitem>
        <para>
          The JavaScript stub for your calculator service is not available as a file, but is generated on demand.
          To include this generated JavaScript code, Pustefix provides the <literal>&lt;pfxwsscript/&gt;</literal> tag, which takes the name of the
          service (as specified in the <literal>&lt;webservice/&gt;</literal> tag in your web service configuration) in the <literal>name</literal>
          attribute. This tag will generate the <literal>&lt;script/&gt;</literal> tag that requests the generated JavaScript code from
          the server. 
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The following listing shows the according <literal>head</literal> part, you should add to your <filename>Home.xml</filename> file:
    </para>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<include_parts xmlns:ixsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:pfx="http://www.schlund.de/pustefix/core">
  
  <part name="content">
    <!-- content, including part "javascript-includes", see above -->
  </part>
  
  <part name="head">
    <theme name="default">
      <script type="text/javascript" src="{$__contextpath}/modules/pustefix-core/script/httpRequest.js"></script>
      <script type="text/javascript" src="{$__contextpath}/modules/pustefix-webservices-jsonws/script/webservice_json.js"></script>
      <pfx:wsscript name="CalculatorService"/>
    </theme>
  </part>

</include_parts>]]></programlisting>
    <para>
      If you are taking a look at the generated JavaScript code, you will see, that this code defines a new class called
      <classname>WS_CalculatorService</classname>, which provides three methods:
    </para>
    <itemizedlist>
      <listitem><para><function>add()</function></para></listitem>
      <listitem><para><function>subtract()</function></para></listitem>
      <listitem><para><function>divide()</function></para></listitem>
    </itemizedlist>
    <para>
      These are exactly the same methods that the <classname>CalculatorService</classname> interface declared in your Java code.
    </para>
    <programlisting>//Autogenerated webservice stub (don't modify this code manually!)
function WS_CalculatorService(context) {
  pfx.ws.json.BaseStub.call(this,"CalculatorService",context);
}
WS_CalculatorService.prototype=new pfx.ws.json.BaseStub;
WS_CalculatorService.prototype.subtract=function() {
  return this.callMethod("subtract",arguments,2);
}
WS_CalculatorService.prototype.multiply=function() {
  return this.callMethod("multiply",arguments,2);
}
WS_CalculatorService.prototype.add=function() {
  return this.callMethod("add",arguments,2);
}
</programlisting>
    <para>
      This class acts as a <emphasis>remote proxy</emphasis> for the Java business logic you implemented earlier. If you call
      any of these methods, the calculation will not be done on the client, but the request will be sent to the server, where
      it will be processed by the Java implementation. The response will then be sent back to the client and is available
      in your JavaScript application.
    </para>
    <para>
      So all that is left to do, is implement the client side logic, that will create the proxy object and delegate the
      calculation to it. You can just add the Javascript to the already existing <literal>head</literal> part of your page.
    </para>
    <para>
      You are using the <literal>&lt;pfx:script/&gt;</literal> tag, which is used to insert inline JavaScript
      into your page. In this script, you create a new instance of <classname>WS_Calculator</classname> and assign it to
      a global JavaScript variable.
    </para>
    <para>
      Furthermore, you implement the three missing functions <function>add()</function>, <function>subtract()</function> and
      <function>multiply()</function>, which are called, if the corresponding buttons are clicked. All three methods are implemented
      the same way: The values of the two input fields are read and the corresponding method of the proxy object is called with
      these values. The return value of the proxy method is displayed to the user, using the <function>alert()</function> function.
    </para>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<include_parts xmlns:ixsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="http://www.schlund.de/pustefix/core">

  <part name="head">
    <theme name="default">
      <script type="text/javascript" src="{$__contextpath}/modules/pustefix-core/script/httpRequest.js"></script>
      <script type="text/javascript" src="{$__contextpath}/modules/pustefix-webservices-jsonws/script/webservice_json.js"></script>
      <pfx:wsscript name="CalculatorService"/>
      
      <pfx:script>
        var calcProxy = new WS_CalculatorService();
        function add() {
          var a = parseInt(document.getElementById('a').value);
          var b = parseInt(document.getElementById('b').value);
          alert(calcProxy.add(parseInt(a),parseInt(b)));
        }
        function subtract() {
          var a = parseInt(document.getElementById('a').value);
          var b = parseInt(document.getElementById('b').value);
          alert(calcProxy.subtract(parseInt(a),parseInt(b)));
        }
        function multiply() {
          var a = parseInt(document.getElementById('a').value);
          var b = parseInt(document.getElementById('b').value);
          alert(calcProxy.multiply(parseInt(a),parseInt(b)));
        }
      </pfx:script>
    </theme>
  </part>
</include_parts>]]></programlisting>
    <para>
      Now you can open the page, enter any two integer numbers and click on any button. Your application will send the request to
      your business logic on the server and display the result on the client without reloading the page.
    </para>
  </section>
  <section xml:id="ajax-calculator.conclusion">
    <title>Conclusion</title>
    <para>
      This tutorial showed you, how to implement an AJAX application based on Pustefix in several minutes. While this example only used
      a very simple business logic and transferred only primitive type, AJAX applications in Pustefix are not restricted to built-in
      Java types. Pustefix is able to send any Java-bean style objects from the client to the server and vice-versa. You only need to
      make sure, that there is an empty constructor in your beans.
    </para>
  </section>
</chapter>
