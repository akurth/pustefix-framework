/*
 * This file is part of Pustefix.
 *
 * Pustefix is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Pustefix is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Pustefix; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package org.pustefixframework.webservices.jsgen;

import java.io.IOException;
import java.io.OutputStream;
import java.util.StringTokenizer;

/**
 * Javascript class representation.
 * 
 * @author mleidig@schlund.de
 */
public class JsClass {

    String name;
    String baseName;
    JsMethod[] methods;
    JsBlock constBody;
    JsParam[] constParams;

    public JsClass(String name, String baseName, JsParam[] constParams) {
        this.name = name;
        this.baseName = baseName;
        methods = new JsMethod[0];
        constBody = new JsBlock();
        this.constParams = constParams;
    }

    public String getName() {
        return name;
    }

    public String getBaseName() {
        return baseName;
    }

    public void addMethod(JsMethod method) {
        JsMethod[] upd = new JsMethod[methods.length + 1];
        for (int i = 0; i < methods.length; i++)
            upd[i] = methods[i];
        upd[upd.length - 1] = method;
        methods = upd;
    }

    public JsMethod[] getMethods() {
        return methods;
    }

    public JsBlock getConstructorBody() {
        return constBody;
    }

    public String getConstructorParamList() {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < constParams.length; i++) {
            sb.append(constParams[i].getName());
            if (i < constParams.length - 1) sb.append(",");
        }
        return sb.toString();
    }

    public void printCode(OutputStream out) throws IOException {
        StringBuffer sb = new StringBuffer();
        sb.append("//Autogenerated webservice stub (don't modify this code manually!)\n");
        if (getName().contains(".")) {
            StringTokenizer st = new StringTokenizer(getName(), ".");
            String subNs = null;
            while (st.hasMoreTokens()) {
                String ns = st.nextToken();
                if (subNs == null) {
                    sb.append("if(!window." + ns + ") " + ns + "={};\n");
                    subNs = ns;
                } else if (st.hasMoreTokens()) {
                    subNs = subNs + "." + ns;
                    sb.append("if(!" + subNs + ") " + subNs + "={};\n");
                }
            }
        }
        sb.append("function " + getName() + "(" + getConstructorParamList() + ") {\n");
        out.write(sb.toString().getBytes());
        getConstructorBody().printCode("  ", out);
        sb = new StringBuffer();
        sb.append("}\n");
        sb.append(name + ".prototype=new " + baseName + ";\n");
        out.write(sb.toString().getBytes());
        for (int i = 0; i < methods.length; i++)
            methods[i].printCode("  ", out);
    }

}
