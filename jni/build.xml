<?xml version="1.0" encoding="UTF-8"?>

<project name="jni" basedir="." default="all">

    <property environment="env"/>
    <property name="javahome"   location="${env.JAVA_HOME}"/>
    <property name="dir.jni" location="${basedir}"/>
    <property name="dir.jnipkg"  location="${basedir}"/>
    <property name="name.jnipkg" value="jni.tar.gz"/>
    <property name="file.jnipkg" location="${name.jnipkg}"/>
    <property name="class"      value="de.schlund.pfixxml.loader.ObjectBuilder"/>
    <property name="dir.java"   location="../src"/>                                    <!-- take care of target headers-check when -->
    <property name="name.java"  value="de/schlund/pfixxml/loader/ObjectBuilder.java"/> <!-- changing the *.java properties -->
    <property name="dir.class"  location="../build"/>
    <property name="name.class" value="de/schlund/pfixxml/loader/ObjectBuilder.class"/>
    <property name="dir.h"      location="include"/>
    <property name="name.h"     value="de_schlund_pfixxml_loader_ObjectBuilder.h"/>
    <property name="file.h"     value="${dir.h}/${name.h}"/>
    <property name="dir.c"      location="src"/>
    <property name="name.c"     value="de_schlund_pfixxml_loader_ObjectBuilder.c"/>
    <property name="dir.so"     location="build"/>
    <property name="name.so"    value="libapploader.so"/>
    
    <path id="cp">
        <pathelement location="${dir.class}"/>
        <fileset dir=".." includes="pfixcore-*.jar"/>
    </path>

    <target name="help">
        <echo message="Environment variable JAVA_HOME has to point to a j2sdk installation."/>
        <echo message="(currently points to JAVA_HOME=${env.JAVA_HOME})"/>
        <pathconvert property="echo.cp" pathsep="${path.separator}"><path refid="cp"/></pathconvert>
        <echo message="class ${class} has to exist on classpath cp=${echo.cp}"/>
    </target>
        
    <target name="init">
        <mkdir dir="${dir.so}"/>
        <mkdir dir="${dir.h}"/>
    </target>
    
    <target name="clean">
        <delete>
            <fileset dir="${dir.so}" includes="*.so"/>
            <fileset dir="${dir.h}" includes="*.h"/>
        </delete>
        <delete file="${file.jnipkg}"/>
    </target>
    
    <target name="all" depends="lib" description="creates header and shared library">
    </target>
    
    <target name="headers-check" depends="init" unless="pfx.force">
        <!-- As this build file is used both within pfixcore/jni and pfixcore/skel/lib/jni
             we define the source dependencies appropriate to the two different environments.
             The odd declaration of the src dir is the outcome of the fact that the srcfiles
             type fails with a build error if the directory specified in the dir attribute 
             does not exist.
        -->
        <uptodate property="upd.h" targetfile="${file.h}">
            <srcfiles dir="${dir.jni}/..">
                <patternset><include name="src/${name.java}"/> </patternset>
            </srcfiles>
            <srcfiles dir=".." includes="pfixcore-*.jar"/>
        </uptodate>
    </target>

    <target name="headers" depends="init, headers-check" unless="upd.h" description="creates C header out of Java class file">
        <echo message="creating ${name.h}" level="info"/>
        <javah
            destdir="${dir.h}"
            class="${class}"
            classpathref="cp"
            >
        </javah>
        <!-- for some reason lastmodified time does not get updated by javah -->
        <touch file="${file.h}"/>
    </target>

    <target name="lib-check" depends="init" unless="pfx.force">
        <uptodate property="upd.so" targetfile="${dir.so}/${name.so}">
            <srcfiles dir="${dir.h}" includes="${name.h}"/>
            <srcfiles dir="${dir.c}" includes="${name.c}"/>
        </uptodate>
    </target>

    <target name="lib" depends="init, headers, lib-check" unless="upd.so" description="comiles C header and source to shared library">
        <echo message="creating ${name.so}" level="info"/>
        <exec executable="cc" dir="${dir.c}">
            <arg line="-I${javahome}/include -I${javahome}/include/linux -I${dir.h} -fPIC -shared -o ${dir.so}/${name.so}"/>
            <arg file="${dir.c}/${name.c}"/>
        </exec>
    </target>
        
    <target name="dist" description="creates jni.tar.gz including build.xml and C source file">
        <description></description>
        <!-- REMOVEMAKEFILE -->
        <delete dir="${dir.jni}/pkg"/>
        <copy todir="${dir.jni}/pkg" file="Makefile.pkg" preservelastmodified="true">
            <fileset dir="${dir.jni}" includes="Makefile.pkg"/>
            <mapper type="merge" to="Makefile"/>            
        </copy>
        <!-- /REMOVEMAKEFILE -->
        <tar destfile="${file.jnipkg}" compression="gzip">
            <!-- REMOVEMAKEFILE -->
            <tarfileset dir="${dir.jni}/pkg" includes="Makefile" prefix="jni"/>
            <!-- /REMOVEMAKEFILE -->
            <tarfileset dir="${dir.jni}" includes="build.xml" prefix="jni"/>
            <tarfileset dir="${dir.jni}" includes="src/**" prefix="jni"/>
        </tar>
        <!-- REMOVEMAKEFILE -->
        <delete dir="${dir.jni}/pkg"/>
        <!-- /REMOVEMAKEFILE -->
    </target>
    
    <target name="force" description="disables uptodate checks">
        <!-- All targets *-check that have set the attribute unless="pfx.force"
             will be skipped, so the uptodate properties (upd.*), the execution of the actual tasks
             depends on, do not get set and in turn the actual tasks get executed. -->
        <property name="pfx.force" value="true"/>
    </target>
    
</project>

<!--
            <srcfiles id="sf.h" dir="${dir.java}" includes="${name.java}"/>
        <mkdir dir="pkg"/>
        <fileset dir="${dir.jni}/Makefile.pkg"></fileset><mapper type="glob" from="Makefile.pkg" to="Makefile"></mapper>

test commandline
cd /home/adam/workspace/pfixcore/testskel/skel/lib && rm -r /home/adam/workspace/pfixcore/testskel/skel/lib/jni /home/adam/workspace/pfixcore/testskel/skel/lib/jni.tar.gz ; (cd ~/workspace/pfixcore/jni && ant dist) && cp ~/workspace/pfixcore/jni/jni.tar.gz /home/adam/workspace/pfixcore/testskel/skel/lib && tar xzvf /home/adam/workspace/pfixcore/testskel/skel/lib/jni.tar.gz && cd /home/adam/workspace/pfixcore/testskel/skel/lib/jni

-->
