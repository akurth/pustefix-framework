<?xml version="1.0" encoding="ISO-8859-1"?>

<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:pfx="http://www.schlund.de/pustefix/core"
                xmlns:ixsl="http://www.w3.org/1999/XSL/TransformOutputAlias"
                xmlns:cus="http://www.schlund.de/pustefix/customize"> 

  <xsl:namespace-alias stylesheet-prefix="ixsl" result-prefix="xsl"/>
  
  <!-- needed for the template below to work... ughh, bloody hack. -->
  <xsl:template match="pfx:invisible"></xsl:template>
  <xsl:template match="pfx:argument"></xsl:template>
  <xsl:template match="pfx:command"></xsl:template>
  <xsl:template match="pfx:anchor"></xsl:template>
  <xsl:template match="pfx:host">
    <cus:documentation>
      <description>Always a child of &lt;pfx:elink&gt;. See there for usage information.</description>
    </cus:documentation>
  </xsl:template>
  
  <xsl:template match="pfx:button">
    <cus:documentation>
      <description>You can use this tag as a switch (for sending formulars) or as a link. The content of this tag will be the link content</description>
      <param required="0">
        <name>activeclass</name>
        <standard>core_button_active</standard>
        <possible_values></possible_values>
        <description>css class in the active mode (that means, when the page the button points to is the current page)</description>
      </param>
      <param required="0">
        <name>normalclass</name>
        <standard>core_button_normal</standard>
        <possible_values></possible_values>
        <description>css class in the normal mode (that means, it is possible to click the link)</description>
      </param>
      <param required="0">
        <name>invisibleclass</name>
        <standard></standard>
        <possible_values>core_button_inivisble</possible_values>
        <description>css class in the invisible mode (whenever the link is not clickable, e.g. when the target page is inaccessible)</description>
      </param>
      <param required="0">
        <name>page</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>Use the page attribute to jump to another page as defined in the depend.xml.in file. If this is empty, the current page name is used.
          Note that you need to give the mode=force attribute in this case if you want the link to be clickable. 
        </description>
      </param>
      <param required="0">
        <name>target</name>
        <standard>parent</standard>
        <possible_values></possible_values>
        <description>The target in the frameset</description>
      </param>
      <param required="0">
        <name>mode</name>
        <standard></standard>
        <possible_values>desc|force</possible_values>
        <description>Using mode="force": The button is always displayed as a link, and the normalclass css is used.
          Using mode="desc" : The button is considered to be in active mode (aka: NOT clickable) not only when the page attribute
          points to the current page, but also when a subpage of the target page is the current page. The activeclass css is used in this case.
        </description>
      </param>
      <param required="0">
        <name>frame</name> <standard></standard>
        <possible_values></possible_values> <description>The name of
        the target frame that should be loaded as defined in the
        structural xml file for the page. Note that by using @target
        and @frame you can load a certain frame definition into a
        different target frame.</description>
      </param>
      <param required="0">
        <name>popupwidth</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>Width of the popup window</description>
      </param>
      <param required="0">
        <name>popupheigh</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>Height of the popup window</description>
      </param>
      <param required="0">
        <name>popupid</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>The id of the popup window</description>
      </param>
      <param required="0">
        <name>nodata</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>This attribute must be given to inhibit the submission of the __submittingdata=1 parameter. Normally the system
          automatically adds this parameter whenever you use &lt;pfx:argument&gt; tags in the button. Occasionally this is not what you want.
          Use this attribut to suppress this behaviour.</description>
      </param>
      <children>
        <name>pfx:active</name>
        <description>content of the link in the active mode (not clickable)</description>        
      </children>
      <children>
        <name>pfx:normal</name>
        <description>content of the link in the normal mode (clickable)</description>        
      </children>
      <children>
        <name>pfx:invisible</name>
        <description>content of the link in the invisible mode (not clickable, because the target page is not accessible)</description>        
      </children>
      <children>
        <name>pfx:argument</name>
        <description>Use &lt;pfx:argument&gt;, if you need to submit parameters to the pustefix system.
          <xmlcode>
            <pfx:button page="foo">
              <pfx:argument name="pic.Toggle">true</pfx:argument>
              <pfx:argument name="foo">baz</pfx:argument>
            </pfx:button>
          </xmlcode>
        </description>
      </children>
      <children>
        <name>pfx:command</name>
        <description>Use &lt;pfx:command&gt; to submit special commands to the pustefix system.
          In almost all cases currently this will be the SELWRP command to select a subset of interface wrappers.
          <xmlcode>
            <pfx:button page="foo">
              <pfx:command name="SELWRP">counter</pfx:command>
            </pfx:button>
          </xmlcode>
        </description>
      </children>
      <children>
        <name>pfx:anchor</name>
      </children>
      <example>
        <input>
          <xmlcode>
            <pfx:button page="documentation" frame="top" activeclass="active" mode="desc">
              <pfx:argument name="pic.Toggle">true</pfx:argument>
              <pfx:argument name="foo">baz</pfx:argument>
              Link
            </pfx:button>
          </xmlcode>
        </input>
        <output>
          If the current page is not "documentation" or any subpage of it:
          <xmlcode>
            <a target="_parent" class="core_button_normal"
               href="/documentation;jsessionid=1234567896.foo?__frame=top&amp;__sendingdata=1&amp;pic.Toggle=true&amp;foo=baz">
              Link
            </a>
          </xmlcode>
          Any other case will result in this:
          <xmlcode>
            <span class="active">Link</span>
          </xmlcode>
        </output>
      </example>
    </cus:documentation>
    
    <xsl:call-template name="pfx:button_impl">
      <xsl:with-param name="normal">
        <xsl:choose>
          <xsl:when test="./pfx:normal">
            <xsl:apply-templates select="./pfx:normal/node()"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates select="./node()"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:with-param>
      <xsl:with-param name="active">
        <xsl:choose>
          <xsl:when test="./pfx:active">
            <xsl:apply-templates select="./pfx:active/node()"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates select="./node()"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:with-param>
      <xsl:with-param name="invisible">
        <xsl:choose>
          <xsl:when test="./pfx:invisible">
            <xsl:apply-templates select="./pfx:invisible/node()"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates select="./node()"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:with-param>
      <xsl:with-param name="normalclass"><xsl:value-of select="@normalclass"/></xsl:with-param>
      <xsl:with-param name="activeclass"><xsl:value-of select="@activeclass"/></xsl:with-param>
      <xsl:with-param name="invisibleclass"><xsl:value-of select="@invisibleclass"/></xsl:with-param>
      <xsl:with-param name="args" select="./pfx:argument"/>
      <xsl:with-param name="cmds" select="./pfx:command"/>
      <xsl:with-param name="anchors" select="./pfx:anchor"/>
      <xsl:with-param name="nodata" select="@nodata"/>
      <xsl:with-param name="buttpage" select="@page"/>
      <xsl:with-param name="frame" select="@frame"/>
      <xsl:with-param name="target" select="@target"/>
      <xsl:with-param name="mode" select="@mode"/>
      <xsl:with-param name="popupwidth" select="@popupwidth"/>
      <xsl:with-param name="popupheight" select="@popupheight"/>
      <xsl:with-param name="popupid" select="@popupid"/>
    </xsl:call-template>
  </xsl:template>

  <xsl:template match="pfx:jsbutton">
    <cus:documentation>
      <description>Similar to the &lt;pfx:button&gt;. This uses JavaScript mouse-over and mouse-out to create a rollover image.</description>
      <param required="0">
        <name>onmout</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>Name of the mouse-out picture</description>
      </param>
      <param required="0">
        <name>omnover</name>
        <description>Name of the mouse-over picture</description>
        <standard></standard>
        <possible_values></possible_values>        
      </param>
      <example>
        <input>
          <xmlcode><pfx:jsbutton name="NameOfButton" omout="NameMouseOutPicture"   omover="NameMouseOverPicture" page="PageName"/></xmlcode>
        </input>
        <output>
          <xmlcode>
            <script language="JavaScript"><!--
              top.__js_but["NameOfButton"] = new top.__js_button("NameMouseOutPicture","NameMouseOverPicture");
              //--></script>
            <a target="_parent" class="core_button_normal" onmouseover="top.__js_moveover(document,'NameOfButton'); return true" onmouseout="top.__js_moveout(document,'NameOfButton')" href="/PageName;jsessionid=12345.foo?__frame=_top">
              <img border="0" src="NameMouseOutPicture" name="NameOfButton"/>
            </a>
          </xmlcode>
        </output>
      </example>
    </cus:documentation>  

    <xsl:param name="act_src">
      <xsl:choose>
        <xsl:when test="@active">
          <xsl:value-of select="@active"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="@omover"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:param>
    <xsl:param name="inv_src">
      <xsl:choose>
        <xsl:when test="@invisible">
          <xsl:value-of select="@invisible"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="@omout"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:param>
    <script language="JavaScript">
      <ixsl:comment>
        top.__js_but["<xsl:value-of select="@name"/>"] =
        new top.__js_button("<xsl:value-of select="@omout"/>","<xsl:value-of select="@omover"/>");
        //</ixsl:comment>
    </script>
    <xsl:call-template name="pfx:button_impl">
      <xsl:with-param name="normal">
        <img border="0">
          <xsl:attribute name="src"><xsl:value-of select="@omout"/></xsl:attribute>
          <xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
          <xsl:call-template name="pfx:image_geom_impl">
            <xsl:with-param name="src"><xsl:value-of select="@omout"/></xsl:with-param>
          </xsl:call-template>
        </img>
      </xsl:with-param>
      <xsl:with-param name="active">
        <img border="0" alt="{@alt}">
          <xsl:attribute name="src"><xsl:value-of select="$act_src"/></xsl:attribute>
          <xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
          <xsl:call-template name="pfx:image_geom_impl">
            <xsl:with-param name="src"><xsl:value-of select="$act_src"/></xsl:with-param>
          </xsl:call-template>
        </img>
      </xsl:with-param>
      <xsl:with-param name="invisible">
        <img border="0" alt="{@alt}">
          <xsl:attribute name="src"><xsl:value-of select="$inv_src"/></xsl:attribute>
          <xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute>
          <xsl:call-template name="pfx:image_geom_impl">
            <xsl:with-param name="src"><xsl:value-of select="$inv_src"/></xsl:with-param>
          </xsl:call-template>
        </img>
      </xsl:with-param>
      <xsl:with-param name="normalclass"><xsl:value-of select="@normalclass"/></xsl:with-param>
      <xsl:with-param name="activeclass"><xsl:value-of select="@activeclass"/></xsl:with-param>
      <xsl:with-param name="invisibleclass"><xsl:value-of select="@invisibleclass"/></xsl:with-param>
      <xsl:with-param name="omover">top.__js_moveover(document,'<xsl:value-of select="@name"/>'); return true</xsl:with-param>
      <xsl:with-param name="omout">top.__js_moveout(document,'<xsl:value-of select="@name"/>')</xsl:with-param>
      <xsl:with-param name="args" select="./pfx:argument"/>
      <xsl:with-param name="cmds" select="./pfx:command"/>
      <xsl:with-param name="anchors" select="./pfx:anchor"/>
      <xsl:with-param name="nodata" select="@nodata"/>
      <xsl:with-param name="buttpage" select="@page"/>
      <xsl:with-param name="frame" select="@frame"/>
      <xsl:with-param name="target" select="@target"/>
      <xsl:with-param name="mode" select="@mode"/>
      <xsl:with-param name="popupwidth" select="@popupwidth"/>
      <xsl:with-param name="popupheight" select="@popupheight"/>
      <xsl:with-param name="popupid" select="@popupid"/>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="pfx:button_impl">
    <cus:documentation>
      <description>Called by &lt;pfx:button&gt; and &lt;pfx:jsbutton&gt;</description>
    </cus:documentation>
    <xsl:param name="omover"/>
    <xsl:param name="omout"/>
    <xsl:param name="buttpage"/>
    <xsl:param name="normal"/>
    <xsl:param name="active"/>
    <xsl:param name="invisible"/>
    <xsl:param name="normalclass"/>
    <xsl:param name="activeclass"/>
    <xsl:param name="invisibleclass"/>
    <xsl:param name="frame"/>
    <xsl:param name="target"/>
    <xsl:param name="mode"/>
    <xsl:param name="popupwidth"/>
    <xsl:param name="popupheight"/>
    <xsl:param name="popupid"/>
    <xsl:param name="nodata"/>
    <xsl:param name="args"/>
    <xsl:param name="cmds"/>
    <xsl:param name="anchors"/>
    <xsl:param name="buttpage_impl">
      <xsl:choose>
        <xsl:when test="not(string($buttpage) = '')">
          <xsl:value-of select="$buttpage"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$page"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:param>
    <xsl:param name="frame_impl">
      <xsl:choose>
        <xsl:when test="$frame">
          <xsl:value-of select="$frame"/>
        </xsl:when>  
        <xsl:when test="ancestor-or-self::pfx:frame[position()=2]/@name">
          <xsl:value-of select="ancestor-or-self::pfx:frame[position()=2]/@name"/>
        </xsl:when>
        <xsl:otherwise>_top</xsl:otherwise>
      </xsl:choose>
    </xsl:param>
    <xsl:param name="target_impl">
      <xsl:choose>
        <xsl:when test="$target">
          <xsl:value-of select="$target"/>
        </xsl:when>
        <xsl:when test="$target = '_popup'">_blank</xsl:when>
        <xsl:otherwise>_parent</xsl:otherwise>
      </xsl:choose>
    </xsl:param>
    <xsl:variable name="thebuttpage" select="$navitree//page[@name = $buttpage_impl]"/>
    <ixsl:choose>
      <!-- <ixsl:when test="/formresult/navigation//page[@name = '{$buttpage_impl}']/@visible = '0'"> -->
      <ixsl:when>
        <xsl:attribute name="test">/formresult/navigation<xsl:for-each select="$thebuttpage/ancestor-or-self::page">/page[@name='<xsl:value-of select="./@name"/>']</xsl:for-each>/@visible = '0'</xsl:attribute>
        <span>
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="$invisibleclass = ''">core_button_invisible</xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$invisibleclass"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:copy-of select="$invisible"/>
        </span>
      </ixsl:when>
      <ixsl:otherwise>
        <xsl:choose>
          <xsl:when test="not($mode = 'force')
                    and (($mode = 'desc' and $thebuttpage//page[@name=$page])
                    or ($page = $buttpage_impl))">
            <span>
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="$activeclass = ''">core_button_active</xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$activeclass"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:copy-of select="$active"/>
            </span>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="thehandler" select="$thebuttpage/@handler"/>
            <xsl:variable name="thequery">__frame=<xsl:value-of select="$frame_impl"/></xsl:variable>
            <xsl:variable name="prelink">
              <xsl:value-of select="$thehandler"/>/<xsl:value-of select="$buttpage_impl"/>
            </xsl:variable>
            <xsl:variable name="postlink">
              <xsl:text>?</xsl:text><xsl:value-of select="$thequery"/>
            </xsl:variable>
            <a target="{$target_impl}">
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="$normalclass = ''">core_button_normal</xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$normalclass"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:if test="$omover">
                <xsl:attribute name="onmouseover"><xsl:value-of select="$omover"/></xsl:attribute></xsl:if>
              <xsl:if test="$omout">
                <xsl:attribute name="onmouseout"><xsl:value-of select="$omout"/></xsl:attribute></xsl:if>
              <xsl:if test="$target = '_popup'">
                <ixsl:attribute name="onclick">javascript:top.__js_popup('<xsl:value-of select="$prelink"/>;<ixsl:value-of select="$__sessid"/><xsl:value-of select="$postlink"/><xsl:if test="$args and not($nodata)">&amp;__sendingdata=1</xsl:if><xsl:for-each select="$args">&amp;<xsl:value-of select="./@name"/>=<xsl:apply-templates select="./node()"/></xsl:for-each><xsl:for-each select="$cmds">&amp;__CMD[<xsl:choose><xsl:when test="./@page"><xsl:value-of select="./@page"/></xsl:when><xsl:otherwise><xsl:value-of select="$page"/></xsl:otherwise></xsl:choose>]:<xsl:value-of select="./@name"/>:<xsl:apply-templates select="./node()"/>:=_</xsl:for-each><xsl:for-each select="$anchors">&amp;__anchor=<xsl:value-of select="@frame"/>|<xsl:apply-templates select="./node()"/></xsl:for-each>','<xsl:value-of select="$popupid"/>','<xsl:value-of select="$popupwidth"/>','<xsl:value-of select="$popupheight"/>');return(false);</ixsl:attribute>
              </xsl:if>
              <ixsl:attribute name="href"><xsl:value-of select="$prelink"/>;<ixsl:value-of select="$__sessid"/><xsl:value-of select="$postlink"/><xsl:if test="$args and not($nodata)">&amp;__sendingdata=1</xsl:if><xsl:for-each select="$args">&amp;<xsl:value-of select="./@name"/>=<xsl:apply-templates select="./node()"/></xsl:for-each><xsl:for-each select="$cmds">&amp;__CMD[<xsl:choose><xsl:when test="./@page"><xsl:value-of select="./@page"/></xsl:when><xsl:otherwise><xsl:value-of select="$page"/></xsl:otherwise></xsl:choose>]:<xsl:value-of select="./@name"/>:<xsl:apply-templates select="./node()"/>:=_</xsl:for-each><xsl:for-each select="$anchors">&amp;__anchor=<xsl:value-of select="@frame"/>|<xsl:apply-templates select="./node()"/></xsl:for-each></ixsl:attribute>
              <xsl:copy-of select="$normal"/>
            </a>
          </xsl:otherwise> 
        </xsl:choose>
      </ixsl:otherwise>
    </ixsl:choose>
  </xsl:template>

  <xsl:template match="pfx:elink"> 
    <cus:documentation>     
      <description>Creates a link to an external page. If you want
        to create a dynamic link, leave href blank and
        use the child:pfx:host
      </description>
      <param required="1">
        <name>href</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>protocol and uri of the external link</description>
      </param>
      <param required="0">
        <name>target</name>
        <standard></standard>
        <possible_values>_popup</possible_values>
        <description>_popup/_blank opens the new page in a popup window. You can also use other targets</description>
      </param>
      <param required="0">
        <name>popupwidth</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>Width of the popup window</description>
      </param>
      <param required="0">
        <name>popupheigh</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>Height of the popup window</description>
      </param>
      <param required="0">
        <name>popupid</name>
        <standard></standard>
        <possible_values></possible_values>
        <description>name of the popup-window</description>
      </param>
      <children>
        <name>pfx:argument</name>
        <description>Use pfx:argument, if you need Parameters in your href
          <xmlcode>
            <pfx:elink href="foo">
              <pfx:argument name="pic.Toggle">true</pfx:argument>
              <pfx:argument name="foo">baz</pfx:argument>
            </pfx:elink>            
          </xmlcode>          
        </description>        
      </children>
      <children>
        <name>pfx:host</name>
        <description>Always a child of &lt;pfx:elink&gt;. Use &lt;pfx:host&gt;, if you want to
          create a link to a server whose name can only be computed dynamically at runtime.
          <xmlcode>
            <pfx:elink href="http://www.yahoo.de">
              <pfx:host><ixsl:value-of select="/formresult/dynhost/text()"/></pfx:host>
              Dynamic Link
            </pfx:elink>
          </xmlcode>
        </description>
      </children>
      <example>
        <input>
          <xmlcode>
            <pfx:elink href="http://www.gimp.org" target="_popup">
              <pfx:argument name="foo"><ixsl:value-of select="/formresult/foo/@id"/></pfx:argument>
              Goto Gimp!
            </pfx:elink>
          </xmlcode>
        </input>
        <output>
          <xmlcode><a href="/xml/deref?link=http://www.gimp.org%3ffoo%3dFOOBAR" target="_blank"
                      onclick="javascript:top.__js_popup('/xml/deref?link=http://www.gimp.org%3ffoo%3dFOOBAR','','','');return(false);">
              Goto Gimp!</a>
          </xmlcode>
        </output>
      </example>
    </cus:documentation>
    
    <xsl:choose>
      <xsl:when test="not(@href and ./pfx:host)">
        <xsl:choose>
          <xsl:when test="@href or ./pfx:host">
            <xsl:choose>
              <xsl:when test="not(contains(@href, '?'))">               
                <xsl:variable name="href">
                  <xsl:if test="@href">
                    <xsl:value-of select="concat('/xml/deref?link=',@href)"/>    
                  </xsl:if>            
                  <xsl:if test="./pfx:host">
                    <xsl:text>/xml/deref?link=</xsl:text>
                    <xsl:apply-templates select="./pfx:host/node()"/>   
                  </xsl:if>
                  <xsl:if test="./pfx:argument">
                    <xsl:text>%3f</xsl:text>
                    <xsl:for-each select="pfx:argument">
                      <xsl:value-of select="@name"/>%3d<xsl:apply-templates select="./node()"/>
                      <xsl:if test="following-sibling::pfx:argument">
                        <xsl:text>%26</xsl:text>
                      </xsl:if>
                    </xsl:for-each>
                  </xsl:if>
                </xsl:variable>               
                <a>
                  <xsl:copy-of select="@*"/>
                  <xsl:if test="@target = '_popup'">
                    <xsl:attribute name="target">_blank</xsl:attribute>
                    <ixsl:attribute name="onclick">
                      <xsl:text>javascript:top.__js_popup('</xsl:text>
                      <xsl:copy-of select="$href"/>
                      <xsl:text>','</xsl:text>
                      <xsl:value-of select="@popupid"/>
                      <xsl:text>','</xsl:text>
                      <xsl:value-of select="@popupwidth"/>
                      <xsl:text>','</xsl:text>
                      <xsl:value-of select="@popupheight"/>
                      <xsl:text>');return(false);</xsl:text>
                    </ixsl:attribute>
                  </xsl:if>
                  <ixsl:attribute name="href">
                    <xsl:copy-of select="$href"/>
                  </ixsl:attribute>
                  <xsl:apply-templates/>
                </a>
              </xsl:when>
              <xsl:otherwise>
                <img src="/core/img/error.gif"/><span class="core_xml_errorbox">Error: Do not use a questionmark in the href attribute !</span>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <img src="/core/img/error.gif"/><span class="core_xml_errorbox">Error: Need either @href or ./pfx:host child node</span>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <img src="/core/img/error.gif"/><span class="core_xml_errorbox">Error: Need just one of @href or ./pfx:host child node - both were used</span>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template match="pfx:wizardnavigation">
    <cus:documentation>
      <description>will be documentated later</description>
      <children>
        <name>pfx:group</name>
        <description></description>
      </children>  
      <children>
        <name>pfx:flat</name>
        <description></description>
      </children>  
    </cus:documentation>  
    
    <ixsl:choose>
      <ixsl:when test="/formresult/iwrappergroups/@lastindex = 0">
        <xsl:apply-templates select="./pfx:flat/node()"/>
      </ixsl:when> 
      <ixsl:otherwise>
        <xsl:apply-templates select="./pfx:group/node()"/>
      </ixsl:otherwise>
    </ixsl:choose>
  </xsl:template>

  <xsl:template match="pfx:wizardprevious">
    <cus:documentation>
      <description>will be documentated later</description>
      <children>
        <name>pfx:active</name>
        <description></description>        
      </children>
      <children>
        <name>pfx:inactive</name>
        <description></description>        
      </children>
      <example>
        <input>
          <xmlcode>
            <pfx:wizardprevious>
              <pfx:active>&lt;&lt;Previous</pfx:active>
              <pfx:inactive>&lt;&lt; Previous</pfx:inactive>
            </pfx:wizardprevious>
          </xmlcode>
        </input>
        <output>
        </output>
      </example> 
    </cus:documentation>  

    <xsl:variable name="frame_impl">
      <xsl:choose>
        <xsl:when test="ancestor-or-self::pfx:frame[position()=1]/@name">
          <xsl:value-of select="ancestor-or-self::pfx:frame[position()=1]/@name"/>
        </xsl:when>
        <xsl:otherwise>_top</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="thehandler" select="$navitree//page[@name=$page]/@handler"/>
    <ixsl:choose>
      <ixsl:when test="/formresult/iwrappergroups/@currentindex = 0">
        <span>
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="not(@wizprev_inactive)">core_wizprev_inactive</xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="@wizprev_inactive"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:apply-templates select="./pfx:inactive/node()"/>
        </span>
      </ixsl:when>
      <ixsl:otherwise>
        <span>
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="not(@wizprev_active)">core_wizprev_active</xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="@wizprev_active"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <a><ixsl:attribute name="href"><xsl:value-of select="concat($thehandler, '/', $page)"/>;<ixsl:value-of select="$__sessid"/>?__currentindex[<xsl:value-of select="$page"/>]=<ixsl:value-of select="/formresult/iwrappergroups/@currentindex - 1"/>&amp;__frame=<xsl:value-of select="$frame_impl"/></ixsl:attribute><xsl:apply-templates select="./pfx:active/node()"/></a>
        </span>
      </ixsl:otherwise>
    </ixsl:choose>
  </xsl:template>

  <xsl:template match="pfx:wizardnext">
    <cus:documentation>
      <description>will be documentated later</description>
      <children>
        <name>pfx:active</name>
        <description></description>        
      </children>
      <children>
        <name>pfx:inactive</name>
        <description></description>        
      </children>
      <example>
        <input>
          <xmlcode>
            <pfx:wizardnext>
              <pfx:active>
                <pfx:xinp onclick="top.__js_progress_start_show_work(1);" type="submit" value="Next &gt;&gt;">
                  <pfx:command name="SELGRP">NEXT</pfx:command>
                </pfx:xinp>
              </pfx:active>
              <pfx:inactive>Next &gt;&gt;</pfx:inactive>
            </pfx:wizardnext>
          </xmlcode>
        </input>
        <output>
          <xmlcode></xmlcode>
        </output>
      </example>     
    </cus:documentation>
    
    <ixsl:choose>
      <ixsl:when test="/formresult/iwrappergroups/@currentindex = /formresult/iwrappergroups/@lastindex">
        <xsl:apply-templates select="./pfx:inactive/node()"/>
      </ixsl:when>
      <ixsl:otherwise>
        <xsl:apply-templates select="./pfx:active/node()"/>
      </ixsl:otherwise>
    </ixsl:choose>
  </xsl:template>
  
  <xsl:template match="pfx:wizardfinish">
    <cus:documentation>    
      <description>will be documentated later</description>
      <children>
        <name>pfx:active</name>
        <description></description>        
      </children>
      <children>
        <name>pfx:inactive</name>
        <description></description>        
      </children>
      <example>
        <input>
          <xmlcode>
            <pfx:wizardfinish>
              <pfx:active>   
                <pfx:xinp onclick="top.__js_progress_start_show_work(1);" type="submit" value="Finish"/>
              </pfx:active>
              <pfx:inactive>Finish</pfx:inactive>
            </pfx:wizardfinish>
          </xmlcode>
        </input>
        <output>
          <xmlcode></xmlcode>
        </output>
      </example>
    </cus:documentation>
    
    <ixsl:choose>
      <ixsl:when test="/formresult/iwrappergroups/@currentindex = /formresult/iwrappergroups/@lastindex">
        <xsl:apply-templates select="./pfx:active/node()"/>
      </ixsl:when>
      <ixsl:otherwise>
        <xsl:apply-templates select="./pfx:inactive/node()"/>
      </ixsl:otherwise>
    </ixsl:choose>
  </xsl:template>
</xsl:stylesheet>

<!-- 
Local Variables: 
mode: xml 
End: 
--> 
