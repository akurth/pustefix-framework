<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet version="1.1"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ixsl="http://www.w3.org/1999/XSL/TransformOutputAlias"
                xmlns:pfx="http://www.schlund.de/pustefix/core"
                xmlns:cus="http://www.schlund.de/pustefix/customize"
                xmlns:include="xalan://de.schlund.pfixxml.IncludeDocumentExtension"
                xmlns:runtime="xalan://de.schlund.pfixxml.DependencyTracker"
                xmlns:geometry="xalan://de.schlund.pfixxml.ImageGeometry"
                exclude-result-prefixes="include runtime geometry">

  <!-- The needed parameters must be set in the including stylesheet! -->

  <xsl:namespace-alias stylesheet-prefix="ixsl" result-prefix="xsl"/>

  <xsl:param name="__editmode"/>
  <xsl:param name="__recordmode"/>
  <xsl:param name="recordmode_allowed"/>
  <xsl:param name="__sessid"/>
  <xsl:param name="__target_gen"/>
  <xsl:param name="__target_key"/>
  <xsl:param name="prohibitEdit">no</xsl:param>
  
  <xsl:template match="pfx:editconsole">
    <cus:documentation>
      <responsible>JTL</responsible>
      <description>Generates a toolbar when in development mode</description>
    </cus:documentation>
    <xsl:if test="$prohibitEdit = 'no'">
      <form target="_top">
        <table width="1px" cellpadding="0" cellspacing="0" border="0">
          <tr>
            <td width="1px">
              <ixsl:choose>
                <ixsl:when test="$__editmode='admin'">
                  <a target="_top">
                    <ixsl:attribute name="href">
                      <ixsl:value-of select="$__uri"/>?__editmode=none</ixsl:attribute>
                    <img border="0" title="Switch edit mode OFF" src="/core/img/do_noedit.gif"/>
                  </a>
                </ixsl:when>
                <ixsl:otherwise>
                  <a target="_top">
                    <ixsl:attribute name="href">
                      <ixsl:value-of select="$__uri"/>?__editmode=admin</ixsl:attribute>
                    <img border="0" title="Switch edit mode ON" src="/core/img/do_edit.gif"/>
                  </a>
                </ixsl:otherwise>
              </ixsl:choose>
            </td>
            <td width="1px">
              <a target="__xml_source__">
                <ixsl:attribute name="href">
                  <ixsl:value-of select="$__uri"/>?__reuse=<ixsl:value-of select="$__reusestamp"/>&amp;__xmlonly=1</ixsl:attribute>
                <img border="0" title="Show last XML tree" src="/core/img/show_xml.gif"/></a>
            </td>  
            <ixsl:choose>
              <ixsl:when test="$recordmode_allowed = 'true'">
                <td nowrap="nowrap" style="border: black solid 1px; background-color: #999999;">
                  <ixsl:choose>
                    <ixsl:when test="$__recordmode and $__recordmode!='0'">
                      <input style="font-family: Verdana,Sans; margin-left:3px; margin-right:1px; border: black dotted 1px; color: #000000; background-color: #c0c0c0;"
                        readonly="readonly" align="center" name="__recordmode" type="text" size="4">
                        <ixsl:attribute name="value"><ixsl:value-of select="$__recordmode"/></ixsl:attribute>
                      </input>
                      <pfx:xinp type="image" align="center" src="/core/img/record_stop.gif" title="Switch record mode OFF">
                        <pfx:argument name="__recordmode">0</pfx:argument>
                      </pfx:xinp>
                    </ixsl:when>
                    <ixsl:otherwise>
                      <pfx:xinp type="text" style="font-family: Verdana,Sans; margin-left:3px; margin-right:1px; border: black solid 1px;"
                        name="__recordmode" size="4" maxlength="20"/>
                      <pfx:xinp type="image" align="center" src="/core/img/record_start.gif" title="Switch record mode ON"/>
                    </ixsl:otherwise>
                  </ixsl:choose>
                </td>
              </ixsl:when>
              <ixsl:otherwise>
                <td>&#160;</td>
              </ixsl:otherwise>
            </ixsl:choose>
          </tr>
          <tr>
            <td nowrap="nowrap" colspan="3" style="font-family: Verdana,Sans; font-size: 8px; background-color: black; color: white; padding-left: 5px; padding-right: 2px;">
              P: <ixsl:value-of select="$page"/>
            </td>
          </tr>
          <tr>
            <td nowrap="nowrap" colspan="3" style="font-family: Verdana,Sans; font-size: 8px; background-color: black; color: white; padding-left: 5px; padding-right: 2px;">
              F: <ixsl:value-of select="$pageflow"/>
            </td>
          </tr>
        </table>
      </form>
    </xsl:if>
  </xsl:template>

  <xsl:template match="pfx:attribute">
    <cus:documentation>
      <description>This template allows you to create dynamic attributes  
        for every tag that does an apply-templates of it's body.
      </description>
      <param required="1">
        <name>name</name>
        <description>The name of the attribute</description>
      </param>
      <example>
        <input>
          <xmlcode><foo><pfx:attribute name="bar"><ixsl:value-of select="/baz"/></pfx:attribute></foo></xmlcode>
        </input>
        <output>
          This results in the following code in the final stylesheet:<br/>
          <xmlcode><foo><ixsl:attribute name="bar"><ixsl:value-of select="/baz"/></ixsl:attribute></foo></xmlcode>
        </output>
      </example>
    </cus:documentation>
    <ixsl:attribute name="{@name}">
      <!-- this stupid construct makes sure that only text is copied into the attribute -->
      <ixsl:variable name="tmp"><xsl:apply-templates/></ixsl:variable>
      <ixsl:value-of select="$tmp"/>
    </ixsl:attribute>
  </xsl:template>

  <xsl:template match="pfx:argref">
    <xsl:param name="__env"/>
    <xsl:variable name="pos">
      <xsl:choose>
        <xsl:when test="@pos"><xsl:value-of select="@pos"/></xsl:when>
        <xsl:otherwise>1</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="args" select="$__env/pfx:arg[position() = $pos]/@value"/>
    <xsl:choose>
      <xsl:when test="$args"><xsl:value-of select="$args"/></xsl:when>
      <xsl:otherwise><b>[?]</b></xsl:otherwise>
    </xsl:choose>
  </xsl:template>
 
  <xsl:template name="pfx:missinc">
    <xsl:param name="part"/>
    <xsl:param name="href"/>
    <xsl:variable name="thetext">Missing include: '<xsl:value-of select="$part"/>' in file '<xsl:value-of select="$href"/>'</xsl:variable>
    <img src="/core/img/warning.gif">
      <xsl:attribute name="alt"><xsl:value-of select="$thetext"/></xsl:attribute>
      <xsl:attribute name="title"><xsl:value-of select="$thetext"/></xsl:attribute>
    </img>
    <xsl:message>*** Include not found:
      Document = <xsl:value-of select="$href"/>
      Part = <xsl:value-of select="$part"/> ***</xsl:message>
    <cus:documentation>
      <responsible>JTL</responsible>
      <description>
        Called by &lt;pfx:include&gt;. This template will
        be executed if an include part cannot be found. Instead a
        warning-icon and a warning-message will be displayed
      </description>
    </cus:documentation>
  </xsl:template>

  <xsl:template match="pfx:include" name="pfx:include">
    <xsl:param name="__env"/>
    <xsl:param name="computed_inc">false</xsl:param>
    <xsl:param name="parent_part"><xsl:value-of select="ancestor::part[position() = 1]/@name"/></xsl:param>
    <xsl:param name="parent_product"><xsl:value-of select="ancestor::product[position() = 1]/@name"/></xsl:param>
    <xsl:param name="noerror"><xsl:value-of select="@noerror"/></xsl:param>
    <xsl:param name="noedit"><xsl:value-of select="@noedit"/></xsl:param>
    <xsl:param name="part"><xsl:value-of select="@part"/></xsl:param>
    <xsl:param name="href">
      <xsl:if test="@href">
        <xsl:choose>
          <xsl:when test="starts-with(@href, '/')">
            <xsl:value-of select="substring-after(@href, '/')"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="@href"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </xsl:param>
    <xsl:param name="realpath">
      <xsl:if test="not($__target_key = '__NONE__')">
        <xsl:choose>
          <xsl:when test="not(string($href) = '')">
            <xsl:value-of select="string($href)"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="include:makeSystemIdRelative('dummy')"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </xsl:param>
    <xsl:choose>
      <xsl:when test="string($part) = ''">
        <b>[Error: &lt;pfx:include&gt; needs "part" attribute]</b>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="incnodes"
                      select="include:get(string($href), string($part), string($product),
                      string($__target_gen), string($__target_key),
                      string($parent_part), string($parent_product), $computed_inc)"/>
        <!-- Start image of edited region -->
        <xsl:choose>
          <xsl:when test="$noedit = 'true'"/> <!-- Do NOTHING! -->
          <xsl:when test="not($__target_key = '__NONE__') and $prohibitEdit = 'no'">
            <ixsl:if test="$__editmode='admin'">
              <img border="0" src="/core/img/edit_start.gif"/>
            </ixsl:if>
          </xsl:when>
          <xsl:when test="$__target_key = '__NONE__' and $__editmode = 'admin'">
            <img border="0" src="/core/img/edit_start.gif"/>
          </xsl:when>
        </xsl:choose>
        <!-- -->
        <xsl:choose>
          <xsl:when test="$incnodes and $incnodes[name() = 'product']">
            <xsl:choose>
              <xsl:when test="$incnodes/lang">
                <!-- Have lang nodes as children -->
                <xsl:choose>
                  <xsl:when test="not($__target_key = '__NONE__')">
                    <xsl:choose>
                      <xsl:when test="not($incnodes/lang[not(@name = 'default')])">
                        <xsl:choose> 
                          <xsl:when test="$incnodes/lang[@name = 'default']">
                            <xsl:apply-templates select="$incnodes/lang[@name = 'default']/node()">
                              <xsl:with-param name="__env" select="."/>
                            </xsl:apply-templates>
                          </xsl:when>
                          <xsl:when test="not($noerror = 'true')">
                            <xsl:call-template name="pfx:missinc">
                              <xsl:with-param name="href" select="$realpath"/>
                              <xsl:with-param name="part" select="$part"/>
                            </xsl:call-template>
                          </xsl:when>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <ixsl:choose>
                          <xsl:for-each select="$incnodes/lang[not(@name = 'default')]">
                            <ixsl:when test="$lang = '{./@name}'">
                              <xsl:apply-templates select="./node()">
                                <xsl:with-param name="__env" select="."/>
                              </xsl:apply-templates>
                            </ixsl:when>
                          </xsl:for-each>
                          <xsl:choose> 
                            <xsl:when test="$incnodes/lang[@name = 'default']">
                              <ixsl:otherwise>
                                <xsl:apply-templates select="$incnodes/lang[@name = 'default']/node()">
                                  <xsl:with-param name="__env" select="."/>
                                </xsl:apply-templates>
                              </ixsl:otherwise>
                            </xsl:when>
                            <xsl:when test="not($noerror = 'true')">
                              <ixsl:otherwise>
                                <xsl:call-template name="pfx:missinc">
                                  <xsl:with-param name="href" select="$realpath"/>
                                  <xsl:with-param name="part" select="$part"/>
                                </xsl:call-template>
                              </ixsl:otherwise>
                            </xsl:when>
                          </xsl:choose>
                        </ixsl:choose>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="langnodes" select="$incnodes/lang[@name = $lang]"/>
                    <xsl:variable name="deflangnodes" select="$incnodes/lang[@name = 'default']"/>
                    <xsl:choose>
                      <xsl:when test="$langnodes">
                        <xsl:apply-templates select="$langnodes/node()">
                          <xsl:with-param name="__env" select="."/>
                        </xsl:apply-templates>
                      </xsl:when>
                      <xsl:when test="$deflangnodes">
                        <xsl:apply-templates select="$deflangnodes/node()">
                          <xsl:with-param name="__env" select="."/>
                        </xsl:apply-templates>
                      </xsl:when>
                      <xsl:when test="not($noerror = 'true')">
                        <xsl:call-template name="pfx:missinc">
                          <xsl:with-param name="href" select="$realpath"/>
                          <xsl:with-param name="part" select="$part"/>
                        </xsl:call-template>
                      </xsl:when>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
                <!-- End of having lang nodes as children -->
              </xsl:when>
              <xsl:when test="not($noerror = 'true')">
                <!-- Have no language nodes as child -->
                <xsl:call-template name="pfx:missinc">
                  <xsl:with-param name="href" select="$realpath"/>
                  <xsl:with-param name="part" select="$part"/>
                </xsl:call-template>
                <!-- End of have no language nodes as child -->
              </xsl:when>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="not($noerror = 'true')">
            <xsl:call-template name="pfx:missinc">
              <xsl:with-param name="href" select="$realpath"/>
              <xsl:with-param name="part" select="$part"/>
            </xsl:call-template>
          </xsl:when>
        </xsl:choose>
        <!-- ===================================================== -->
        <xsl:choose>
          <xsl:when test="$noedit = 'true'"/> <!-- Do NOTHING! -->
          <xsl:when test="not($__target_key = '__NONE__') and $prohibitEdit = 'no'">
            <ixsl:if test="$__editmode = 'admin'">
              <a href="">
                <ixsl:attribute name="onclick">window.open('/xml/edit/includes;<ixsl:value-of select="$__sessid"/>?extinc.Path=<xsl:value-of select="string($realpath)"/>&amp;extinc.Part=<xsl:value-of select="$part"/>&amp;extprod.Name=<xsl:value-of select="$product"/>&amp;__anchor=left_navi|<xsl:value-of select="$realpath"/>','PustefixEditor','menubar=yes,status=yes,resizable=yes');return(false);</ixsl:attribute>
                <img border="0" src="/core/img/edit.gif"
                     alt="Edit include: '{$part}' in file '{$realpath}'"
                     title="Edit include: '{$part}' in file '{$realpath}'"/>
              </a>
            </ixsl:if>
          </xsl:when>
          <xsl:when test="$__target_key='__NONE__' and $__editmode = 'admin'">
            <a href="" onclick="window.open('/xml/edit/commons;{$__sessid}?extcom.Path={$realpath}&amp;extcom.Part={$part}&amp;extprod.Name={$product}&amp;__anchor=left_navi|{$realpath}','PustefixEditor','menubar=yes,status=yes,resizable=yes');return(false);">
              <img border="0" src="/core/img/edit.gif" alt="Edit include: '{$part}' in file '{$realpath}'" title="Edit include: '{$part}' in file '{$realpath}'"/>
            </a>
          </xsl:when>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template match="pfx:image" name="pfx:image">
    <xsl:param name="src"><xsl:value-of select="@src"/></xsl:param>
    <img border="0" alt="">
      <xsl:copy-of select="./@*"/>
      <xsl:attribute name="src"><xsl:value-of select="$src"/></xsl:attribute>
      <xsl:call-template name="pfx:image_geom_impl">
        <xsl:with-param name="src"><xsl:value-of select="$src"/></xsl:with-param>
      </xsl:call-template>
      <xsl:apply-templates/> <!--FIXME  ??????????????? wtf is this ? -->
    </img>
    <cus:documentation>
      <responsible>JTL</responsible>
      <description>
        Used to add images. Standard value for border is 0. If
        you want to change this, add the border attribute. All
        attributes are copied into the resulting img tag.
     </description>
     <param required="1">
        <name>src</name>
        <values><path/></values>
        <description>path to the image</description>
     </param>
     <param required="0">
        <name>border</name>
        <values><html default="0"/></values>
        <description>border</description>
      </param>
      <param required="0">
        <name>width</name>
        <values><html default="auto"/></values>
        <description>Width (different from the original width)</description>
      </param>
      <param required="0">
        <name>height</name>
        <values><html default="auto"/></values>
        <description>Height (different from the orgignal height)</description>
      </param>
      <example>
        <input>
          <xmlcode><pfx:image src="/sample1/img/test.gif"/></xmlcode>
        </input> <output>
          <xmlcode><img border="0" alt="" src="/sample1/img/test.gif"
          width="120" height="82"/></xmlcode>
        </output>
      </example>
    </cus:documentation>
  </xsl:template>

  <xsl:template name="pfx:image_geom_impl">
    <xsl:param name="src">
      <xsl:value-of select="./@src"/>
    </xsl:param>
    <xsl:choose>
      <xsl:when test="string($src) = ''">
        <xsl:message terminate="no">**** Caution:      Error calling pfx:image_geom_impl: no src specified ****</xsl:message>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="path">
          <xsl:choose>
            <xsl:when test="starts-with($src, '/')">
              <xsl:value-of select="substring-after($src, '/')"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$src"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="parent_part"><xsl:value-of select="ancestor::part[position() = 1]/@name"/></xsl:variable>
        <xsl:variable name="parent_product"><xsl:value-of select="ancestor::product[position() = 1]/@name"/></xsl:variable>
        <xsl:variable name="add_dep" select="runtime:logImage(string($path),
                      string($parent_part),string($parent_product),
                      string($__target_gen),string($__target_key))"/>
        <xsl:variable name="width">
          <xsl:choose>
            <xsl:when test="./@width">
              <xsl:value-of select="./@width"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="geometry:getWidth(string($path))"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="height">
          <xsl:choose>
            <xsl:when test="./@height">
              <xsl:value-of select="./@height"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="geometry:getHeight(string($path))"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:if test="not($add_dep = '0')">
          <xsl:message terminate="no">**** Caution:      Error calling DependencyTracker ****</xsl:message>
          <xsl:message terminate="no">|    path:         <xsl:value-of select="$src"/></xsl:message>
          <xsl:message terminate="no">|    __target_gen: <xsl:value-of select="$__target_gen"/></xsl:message>
          <xsl:message terminate="no">|    __target_key: <xsl:value-of select="$__target_key"/></xsl:message>
        </xsl:if>
        <xsl:if test="not($width = -1)">
          <xsl:attribute name="width">
            <xsl:value-of select="$width"/>
          </xsl:attribute>
        </xsl:if>
        <xsl:if test="not($height = -1)">
          <xsl:attribute name="height">
            <xsl:value-of select="$height"/>
          </xsl:attribute>
        </xsl:if>
      </xsl:otherwise>
    </xsl:choose>
    <cus:documentation>
      <responsible>JTL</responsible>
      <description>Called by pfx:image</description>
    </cus:documentation>
  </xsl:template>
  
</xsl:stylesheet>
