<?xml version="1.0" encoding="utf-8"?>
<document>

  <properties>
    <title>High level view of the system</title>
  </properties>

  <body>

  <section name="High level view of the system">

  <p>
    The figure below shows the two main parts of the Pustefix
    system. On the left you can see the java framework. A request coming
    from the browser enters the business logic. After the processing has
    finished, the business logic delivers the result as a (in memory) DOM tree.
    To get a more detailed overview of the business logic, go <a href="java.html">here</a>.
  </p>

  <p>The stylesheet that's responsible to render the UI
    to displays the result data is requested from the XML/XSLT
    generator.  It uses the DOM tree as input to
    create the HTML output that is displayed on the browser.</p>

  <p>
    The stylesheet generator makes heavy use of caching to ensure that
    transformations are never made twice unless the result is out of
    date. Normally all generated stylesheets are cached in memory (and
    on disc). If you don't have enough memory to hold your site in
    RAM, you can specify other cache objects. E.g. we supply a LRU
    cache that can be configured to hold only the last N generated
    objects in memory. Learn more about the XML/XSLT generator on <a href="xml.html">this page</a>.
  </p>
  
  <subsection name="A high level view of the whole system">
    <img src="images/overview.png"/>

    <p>Note: The image above does not exactly reflect the class structure as it is realized in Pustefix.
      The functional elements described here may be split in many (or even mixed together in one) classes.
      Nonetheless it proves useful to think of the system as being split into two completely independent parts.
    </p>
  </subsection>
  </section>
</body>
</document>
