<?xml version="1.0" encoding="utf-8"?>
<document>

  <properties>
    <title>Java property files in Pustefix</title>
  </properties>

  <body>

  <section name="Java property files in Pustefix">

  <p>The configuration of the Java part of the framework (which
    encompasses all the servlets and other services used by the application) is done
    with standard java property files. Those property files are not
    edited directly, but instead property source files (with the extension
    <code>.prop.in</code>) are used. These files use XML tags to
    describe properties. Additionally a customization mechanism is
    provided that helps to configure the configuration files according
    to local needs.</p>

  <p>The general structure of a <code>.prop.in</code> file is very easy:</p>

  <xmlcode>
    <xproperties xmlns:cus="http://www.schlund.de/pustefix/customize">
      <xmlnote>
          The <code>cus</code> namespace is needed to use the customization tags explained below.
      </xmlnote>
      <prop name="statuscodefactory.messagefile">common/dyntxt/statusmessages.xml</prop>
      <xmlnote>
          The <code>prop</code> tag is the most primitive way to enter a single property.
          The example above would simply result in the java property<br/><br/>
          <code>statuscodefactory.messagefile=common/dyntxt/statusmessages.xml</code><br/>
      </xmlnote>
    </xproperties>
  </xmlcode>

  <p><a name="custom"/>Pustefix allows to customize the creation of
  the property files in certain ways. When the build system starts the
  transformation of the <code>.prop.in</code> files to
  <code>.prop</code> files, it supplies certain parameters to the
  transforming stylesheet.</p>

  <ul>
    <li>
      The value of the <b>MAKE_MODE</b> environment variable, or
      "<b>test</b>" if the variable is not set (the default behavior
      can be changed by tweaking the build.xml files). This can be
      used to easily switch preferences depending on the "mode" that
      is active when the application is made, e.g. "test" on the
      development machines, and "prod" on the production servers. The
      value is supplied as the parameter <code>mode</code>.  Note that
      the value of MAKE_MODE also determines if certain features are
      allowed like the possiblity to use the Pustefix editor or to
      get the XML result instead of the rendered page. These features
      are turned off for security reasons when the mode is "prod".
    </li>

    <li>The <code>docroot</code>, i.e. the directory where your
    project's configuration and XML/XSLT files are located in.</li>

    <li>The user id (<code>uid</code>) of the user that starts the
    build process.</li>

    <li>The full qualified domainname (as the parameter
    <code>fqdn</code> of the machine you start the build process.</li>

    <li>and the name of the machine (<code>machine</code>) you start
    the build process on.</li>
  </ul>

  <p>Certain customization tags work with these parameters:</p>

  <xmlcode>
    <xproperties xmlns:cus="http://www.schlund.de/pustefix/customize">
      <prop name="foo"><cus:docroot/>/bar/baz.xml</prop>
      <xmlnote>
          <p>Use this to enter pathnames that do not depend on the
          absolute location of the Pustefix environment in your
          filesystem.</p>
          <p>In the same way you can use <code>cus:machine</code>,
          <code>cus:fqdn</code> and <code>cus:uid</code> to print out
          the value of the supplied XSLT parameter.</p>
      </xmlnote>
      <cus:choose>
        <cus:test mode="test">
          <xmlnote/>
        </cus:test>
        <cus:test uid="pfixuser">
          <xmlnote/>
        </cus:test>
        <cus:test machine="server1">
          <xmlnote>
              <p>These three <code>cus:test</code> nodes above test for one of the supplied XSLT parameters...</p>
          </xmlnote>
        </cus:test>
        <cus:test mode="prod" uid="pfixuser">
          <xmlnote/>
        </cus:test>
        <cus:test bool="or" mode="prod" machine="server1">
          <xmlnote>
              <p>...while these two test for a combination of variables. Default for the test to pass is when <b>ALL</b>
                of the supplied XSLT parameters match the attribute values supplied. If you set the attribute <code>bool</code> to
                <code>or</code> instead, <b>ANY</b> matching parameter will let the complete test pass.</p>
          </xmlnote>
        </cus:test>
        <cus:test>
          <xmlnote>
              <p>The "default test" that will always pass.</p>
          </xmlnote>
        </cus:test>
      </cus:choose>
    </xproperties>
  </xmlcode>

  <p>Several property files in Pustefix are constructed this way. While
    the <code>prop</code> tag would be sufficient to enter every java
    property, there are convenience tags defined for the configuration
    of the most commonly used servlets (see below).</p>
  <a name="list"/>
  <p>
    The table lists the property files that are used in a typical Pustefix system.
  </p>
  <table>
    <tr>
      <th>Propertyfile</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>
        <code>DOCROOT/common/conf/pustefix.prop.in</code>
      </td>
      <td>
        This is a file with common properties shared between all
        running servlets.  Properties set in this file can be
        overwritten by the servlet's specific property file.  A
        typical common property file looks similar to the one supplied
        with the skeleton application or the CVS checkout.
      </td>
    </tr>
    <tr>
      <td>
        <code>DOCROOT/MyProject/conf/*.prop.in</code>
      </td>
      <td>
        <p>The <code>conf</code> subdirectory of a project holds the
        servlet specific property files. These files describe
        among other things the mapping between <i>pages</i> and the
          <i>business logic</i> that handles them. Please read
          below for a detailed description of the property file syntax
          for the most common case of a <code>de.schlund.pfixxml.ContextXMLServer</code> servlet.
        </p>
        <p>The set of properties for a
          servlet is constructed in the following way: The common
          property file <code>pustefix.prop</code> is read, the the
          servlet specific property file is merged into the property
          object. This way it is possible to override properties
          defined in the common file with properties defined in the
          specific property file.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <code>DOCROOT/common/conf/factory.prop.in</code>
      </td>
      <td>
        <p>
          This property file is used for the special project
          <b>admcore</b>. This project is active in every pustefix
          environment and automatically starts a
          <code>de.schlund.pfixxml.FactoryInitServlet</code> servlet
          whenever the servletcontainer starts up to initialize
          services that are used by all the other projects.
        </p>
      </td>
    </tr>
  </table>

  </section>

  <section name="Propery files for a single servlet instance">

  <p>The Pustefix
    system knows about a number of specialized servlets. The
    configuration of the two most important ones is explained here.</p>

  <subsection name="de.schlund.pfixxml.ContextXMLServer">

  <a name="editmode"/>
  <xmlcode>
    <xproperties xmlns:cus="http://www.schlund.de/pustefix/customize">
      <servletinfo depend="MyProject/conf/depend.xml" name="AUniqueNameForTheServlet">
        <xmlnote>
            The attributes <code>depend</code> and <code>name</code> are <b>mandatory</b>.
            If <code>depend</code> starts with a '/' the value is used
            unchanged, otherwise (which is the usual case) it's interpreted as a path relative
            to the <b>docroot</b>
        </xmlnote>
        <editmode  allow="true|false"/>
        <xmlnote>
            <code>allow</code> needs to be set to <b>true</b>
            if you want to be able to use the pustefix editor. The whole node is optional.
          <a name="ssl"/>
        </xmlnote>
        <ssl force="true|false"/>
        <xmlnote>
            <code>force</code> must be set to <b>true</b> if the
            servlet needs to run under SSL. The whole node is optional.
        </xmlnote>
        <adminmode watch="AName" page="APageName"/>
        <xmlnote>
            <code>watch</code> and <code>page</code> must both be given if the optional
            <code>adminmode</code> node is used at all.
        </xmlnote>
        <defaultstate class="a.state.Class"/>
        <defaultihandlerstate class="another.state.Class"/>
        <xmlnote>
            <b>&lt;defaultstate&gt;</b> and
            <b>&lt;defaultihandlerstate&gt;</b> are both optional. The
            <code>class</code> attribute must be
            given. <code>a.state.Class</code> should de a descendant
            of
            <code>de.schlund.pfixcore.workflow.app.StaticState</code>
            and <code>another.state.Class</code> should be a
            descendant of
            <code>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</code>
            (unless you really know what you are doing).  They are
            used to set defaults for values used when processing the
            <b>&lt;pagerequest&gt;</b> tag (see there for more info).
        </xmlnote>
      </servletinfo>
      <xmlnote><a name="defflow"/></xmlnote>
      <context defaultflow="AFlowName" class="AContextClass" authpage="APageName">
        <xmlnote>
          <table>
            <tr>
              <th>Attribute</th>
              <th>Description</th>
            </tr>
            <tr>
              <td><code>class</code></td>
              <td>Optional. If given, use it as the classname for the <code>Context</code> Implementation to use. Else,
                use <code>de.schlund.pfixcore.workflow.Context</code>. In other words: Normally there's no need to
                explicitly supply this attribute.</td>
            </tr>
            <tr>
              <td><code>defaultflow</code></td>
              <td><b>Mandatory</b>. Must reference a valid <code>pageflow</code> (See below).</td>
            </tr>
            <tr>
              <td><code>authpage</code></td> <td>Optional. It must be given, if the servlet should supply a
                login/authentification page. If given, it must reference a valid <code>pagerequest</code> with
                an <code>authhandler</code> child node.</td>
            </tr>
          </table>
          <a name="resource"/>
        </xmlnote>

        <resource class="AContextResource">
          <xmlnote>
              <code>class</code> is <b>mandatory</b>, must be a
              <code>ContextResource</code>. There may be multiple <code>resource</code> tags given.
          </xmlnote>
          <implements class="An_Interface">
            <xmlnote>
                <code>class</code> is <b>mandatory</b>, must be an
                interface implemented by the ContextResource. There
                may be more than one <code>implements</code> tag for a
                ContextResource, but each interface must be unique in
                the whole context. In other words: it's possible for a
                ContextResource to implement more than one interface,
                but not possible for one interface to be implemented
                by two ContextResources used in the same Context
                definition.
            </xmlnote>
          </implements>
          <param name="AName">AValue</param>
          <xmlnote>
              <code>param</code> is <b>optional</b>, can be used
              multiple times.  It's similar to the use as a child of
              <code>pagerequest</code>, but used here to create
              properties that are related to a context resource
              implementation. The resulting property looks like this:
              <p>
                <code>context.resourceparameter.AContextResource.AName=AValue</code>
              </p>
          </xmlnote>
        </resource>
      </context>
      <xmlnote><a name="stopnext"/></xmlnote>
      <pageflow name="AName" final="APageName" stopnext="true|false">
        <xmlnote>
            There may be multiple <code>pageflow</code> tags
            defined, but you need at least one (which must be
            referenced by the <code>defaultflow</code> attribute above).
            <br/><br/>
            <table>
              <tr>
                <th>Attribute</th>
                <th>Description</th>
              </tr>
              <tr>
                <td>
                  <code>name</code>
                </td>
                <td>
                  <b>Mandatory</b>. Must be a unique name.
                </td>
              </tr>
              <tr>
                <td>
                  <code>final</code>
                </td>
                <td>
                  Optional, must reference a page with a valid
                  <code>pagerequest</code> definition given in this
                  property file.  There may be many pageflows defined
                  for a servlet. A page may well be used in more than
                  one pageflow.
                </td>
              </tr>
              <tr>
                <td>
                  <code>stopnext</code>
                </td>
                <td>
                  Optional, defaults to false. If given and true, the
                  pageflow will stop at the next accessible page after
                  the current page even if this page would normally be
                  skipped in the workflow because it doesn't need any
                  input.
                </td>
              </tr>
            </table>
            <br/>
          <a name="stophere"/>
        </xmlnote>
        <flowstep name="AnotherPageName" stophere="true|false">
          <xmlnote>
            <table>
              <tr>
                <th>Attribute</th>
                <th>Description</th>
              </tr>
              <tr>
                <td><code>name</code></td>
                <td><b>Mandatory</b>, must reference a valid <code>pagerequest</code>.
                  Usually there are many flowsteps defined in a pageflow.</td>
              </tr>
              <tr>
                <td><code>stophere</code></td>
                <td><b>Optional</b>, if true the pageflow will stop at
                  this step unconditionally if the submit originated from
                  a step that's before this one in the pageflow. See also
                  the <code>stopnext</code> attribute of the <pageflow/>
                  tag which is quivalent to specifying
                  <code>stophere="true"</code> for every single flowstep.
                </td>
              </tr>
            </table>
          </xmlnote>
          <oncontinue applyall="true|false">
            <xmlnote>
                <p>
                  This tag (which is optional) starts a sequence of
                  test/action pairs. The tests are XPath expressions
                  which work on the DOM tree as produced by the
                  flowstep's associated state (note that the
                  navigation is not inserted into the DOM tree at this
                  stage, and the <code>/formresult/formvalues</code>
                  and <code>/formresult/formerrors</code> paths are
                  also not present). The pageflow system calls the
                  tests whenever a state returns a ResultDocument with
                  it's continue flag set to true.
                </p>
                <p>
                  The <code>applyall</code> attribute is <b>optional</b>. If given and <b>true</b>, all
                  actions with matching conditions are executed, if not given or <b>false</b> (the
                  default) only the first action with a matching condition is executed.
                </p>
            </xmlnote>
            <when test="A_XPath_Expression">
              <xmlnote>
                  <p>
                    The <code>when</code> tag contains the XPath expression to try in
                    it's <code>test</code> attribute. If this attribute is omitted, the whole condition is
                    considered to be true.
                  </p>
              </xmlnote>
              <action type="jumpto" page="APage" pageflow="APageFlow">
                <xmlnote>
                    <p>
                      The <code>action</code> tag denotes the FlowStepAction to
                      execute. The <code>type</code> attribute is <b>mandatory</b> and defines the
                      special action to use. The string <code>jumpto</code> denotes the special
                      FlowStepAction <code>de.schlund.pfixcore.workflow.FlowStepJumpToAction</code>
                      which is used to set the <i>jumptopage</i> (defined via the <code>page</code>
                      attribute) and/or the <i>jumptopageflow</i> (defined via
                      the <code>pageflow</code> attribute).
                    </p>
                </xmlnote>
              </action>
            </when>
            <when test="A_XPath_Expression">
              <action type="A_FlowStepAction" somekey="somevalue">
                <xmlnote>
                    <p>
                      If the <code>type</code> attribute is not <i>jumpto</i>, the value is
                      interpreted as a class of
                      type <code>de.schlund.pfixcore.workflow.FlowStepAction</code>. There can be
                      an arbitrary number of additional attributes (<code>somekey</code> in this
                      example) which are supplied as named parameters to the special FlowStepAction.
                    </p>
                </xmlnote>
              </action>
            </when>
          </oncontinue>
        </flowstep>
      </pageflow>
      <xmlnote>
        <a name="pagerequest"/>
      </xmlnote>
      <pagerequest name="APageName" nostore="true|false" copyfrom="APageName">
        <xmlnote>
          <table>
            <tr>
              <th>Attribute</th>
              <th>Description</th>
            </tr>
            <tr>
              <td>
                <code>name</code>
              </td>
              <td><b>Mandatory</b>. It must be the name
                of a page defined in the corresponding depend.xml
                file.
              </td>
            </tr>
            <tr>
              <td>
                <code>nostore</code>
              </td>
              <td>
                <b>Optional</b>. If given, and set
                to <code>true</code> makes the page a so called
                <i>sidestep</i> page. This has the consequence that the
                resulting DOM tree is not stored in the session (so no
                frames are possible!) and that the status of the Context
                object (current page, current pageflow) isn't changed. The
                use of this feature is to allow for pages to act as
                e.g. CSS or JavaScript without disturbing the flow of the
                main pages. See also the section on <code>param</code>s below.
              </td>
            </tr>
            <tr>
              <td>
                <code>copyfrom</code>
              </td>
              <td>
                <b>Optional</b>. If given, and set to the name of a valid
                <code>pagerequest</code>, all configuration from this
                referenced <code>pagerequest</code> are used for the current page,
                disregarding <b>all</b> configuration that is made in this pagerequest.
                It's a plain and simple copy, no extending, no restricting!
              </td>
            </tr>
          </table>
        </xmlnote>
        <ssl force="true|false"/>
        <xmlnote>
            <p>The node is optional. If given, and the attribute <code>force</code>
              is set to <code>true</code>, the page will only run under
              SSL when jumped to via a link or a submit of form data. If
              the session currently does not run under SSL, the system
              will make sure to redirect to a secure session prior to
              handling the request. After a session is running under
              SSL, there is no way back (so all other pages will run
              securely regardless if they have a <code>ssl</code> node or not). Note that you
              can force the servlet as a whole to run only under SSL
              by  <a href="#ssl">specifying the <code>ssl</code> subnode of the
                <code>servletinfo</code> node</a>.
            </p>
        </xmlnote>
        <state class="AClassName"/>
        <xmlnote>
            <p>The whole node is optional. If given, the
            <code>class</code> attribute must be the name of a java
              class implementing the <code>de.schlund.pfixcore.workflow.State</code>
              interface. The used <code>State</code> is determined as follows: </p>
            <ol>
              <li>If <code>state</code> is given, use the value of it's <code>class</code> attribute. Else:</li>
              <li>If the <code>pagerequest</code> has a <code>authhandler</code> child,
                use <code>de.schlund.pfixcore.workflow.app.DefaultAuthIWrapperState</code>. Else:</li>
              <li>If the pagerequest has a <code>ihandler</code> child, use
                the value of the class attribute of the
                <b>&lt;defaultihandlerstate&gt;</b> tag explained above <b>if
                it is given</b>.  If this is not given, just use
                <code>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</code>. Else:</li>
              <li>use the value of the class attribute of the
                <b>&lt;defaultstate&gt;</b> tag explained above <b>if
                it is given</b>.  If this is not given, just use
                <code>de.schlund.pfixcore.workflow.app.StaticState</code>.</li>
            </ol>
        </xmlnote>
        <finalizer class="AClassName"/>
        <xmlnote>
            <p>The whole node is optional.
              It may only be given for a <code>State</code> that is either
              <code>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</code> or a descendent of it!</p>
            <p>The <code>class</code> attribute is mandatory and denotes a class implementing
              <code>de.schlund.pfixcore.workflow.app.ResdocFinalizer</code></p>
            <p>CAUTION: the use of Finalizers is <b>not suggested</b> most of the time! They can completely change the result document
              and the logic when to trigger the next step in the current page flow. Use them at your own risk. Or better: Don't use them at all.</p>
          <br/>
          <div class="important">
            <b>Caution below: only one of <code>ihandler</code> or <code>authhandler</code> may be given as a child node!</b>
          </div>
        </xmlnote>
        <ihandler policy="ANY|ALL|NONE">
          <xmlnote>
              <p>The whole node is optional.
              It may only be given for a <code>State</code> that is either
              <code>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</code> or a descendent of it!</p>
              <p>
                <code>policy</code> is optional (default is <b>ANY</b>).
                The policy decides when a whole page is considered to be accessible:
              </p>
              <ul>
                <li>
                  ANY: just one of the associated handlers <b>needs to
                  be active</b> for the page to be accessible.</li>
                <li>
                  ALL: all the associated handlers <b>must be active</b> for the
                  page to be accessible.</li>
                <li>
                  NONE: none of the associated handlers <b>needs to be active</b> for the
                  page to be accessible.</li>
              </ul>
              <p>If one of the associated handlers returns <b>false</b> on calling <code>prerequisitesMet()</code>,
                the page is of course still inaccessible.</p>
          </xmlnote>
          <interface prefix="AName" class="AClassName" activeignore="true|false" continue="true|false" alwaysretrieve="true|false"/>
          <xmlnote>
              <p>
                There can be many <code>interface</code> nodes for a page.
                Each one references an "atomic" functional entity consisting
                of an <code>IWrapper</code> java class (usually autogenerated
                from a <code>.iwrp</code> xml file, see 
		<a href="iwrapper.html">here</a>) that defines the type
                and names of the parameters passed between the UI and the
                functional entity and an associated <code>IHandler</code>
                java class that uses the <code>IWrapper</code> to retrieve the passed parameters via
                typed getter methods.</p>
              <br/>
              <table>
                <tr>
                  <th>Attribute</th>
                  <th>Description</th>
                </tr>
                <tr>
                  <td><code>class</code></td>
                  <td>
                    <b>Mandatory</b>. Must be the name of a java
                    class implementing
                    <code>de.schlund.pfixcore.generator.IWrapper</code>. This implicitly defines a
                    <code>de.schlund.pfixcore.generator.IHandler</code>, as
                    every IWrapper knows it's associated IHandler and can be queried for it.
                  </td>
                </tr>
                <tr>
                  <td><code>prefix</code></td>
                  <td>
                    <b>Mandatory</b>. The prefix defines a name for the
                    IWrapper and in effect a namespace for the
                    IWrapper's parameters. If the prefix "bar" is
                    defined for an IWrapper that contains a parameter called
                    "Foo", the submitted HTTP parameter must be called
                    <code>bar.Foo</code>.
                  </td>
                </tr>
                <tr>
                  <td><code>continue</code></td>
                  <td>
                    <p>Optional, defaults to <b>false</b>.</p>
                    <p>If the user submits data usually all defined
                      handlers are called. If the submit doesn't result in
                      errors, the usual action is that the context will
                      switch to the next page according to the current
                      <code>pageflow</code>.</p>
                    <p>
                      This is different when the submit is
                      <i>restricted</i> to a subset of one ore more of
                      the page's defined handlers.  The usual action
                      in this case is to <b>stay on the page</b> no
                      matter if the data submit was successful (no
                      errors happened) or not. <b>BUT:</b> if
                      <b>ALL</b> of the handlers the submit was
                      restricted to have the attribute
                      <code>continue</code> set to <b>true</b>, the
                      context again will switch to the next page.
                    </p>
                  </td>
                </tr>
                <tr>
                  <td><code>activeignore</code></td>
                  <td>
                    Optional, default is <b>false</b>. The
                    <code>IHandler</code> method
                    <code>isActive()</code> is <b>NOT</b> called on
                    handlers with <code>activeignore</code> set to
                    <b>true</b>. In other words: the handler is
                    ignored when the system tries to find out if the
                    page is accessible or not. See also the comment
                    for the <code>policy</code> attribute above.
                  </td>
                </tr>
                <tr>
                  <td><code>alwaysretrieve</code></td>
                  <td>
                    <p>Optional, default is <b>false</b>. This attribute
                      changes the way the <b>not</b> selected
                      IHandlers of a page are treated when the system
                      decides that it should stay on the page after a
                      submit has been handled without an error.</p>
                    <p>The default behaviour is to only call
                      retrieveCurrentStatus() on those IHandlers that
                      are in the set of selected (via the
                      SELWRP command) IHandlers. For the remaining IHandlers,
                      only the (ignored) input is copied back verbatim
                      so the net effect is that all associated form
                      elements stay the same as they were before the
                      submit.</p>
                    <p>By setting <code>alwaysretrieve</code> to
                      <code>true</code> the retrieveCurrentStatus()
                      method of this IHandler is also called in the
                      described situation. You need this if a submit
                      handled in one or more IHandler(s) should change
                      the filled-in form values of another, not
                      currently selected IHandler.
                    </p>
                  </td>
                </tr>
              </table>
              <br/>
          </xmlnote>
        </ihandler>
        <xmlnote/>
        <authhandler>
          <xmlnote>
              <p>The whole node is optional.
                It may only be given for a page using a <code>State</code> that is either
                <code>de.schlund.pfixcore.workflow.app.DefaultAuthIWrapperState</code> or a descendent of it!</p>
              <p>There may be only one <code>pagerequest</code> using such a <code>State</code>,
                it must be the one that is also referred to via the <code>authpage</code> attribute of
                the <code>context</code> node above. Other
                <code>pagerequest</code> nodes <b>must not</b> have this subnode!</p>
          </xmlnote>
          <authinterface prefix="AName" class="AClassName"/>
          <auxinterface prefix="AName" class="AClassName"/>
          <xmlnote>
              <p>
                One and only one <code>authinterface</code> node <b>must</b> be given.
                <code>auxinterface</code> nodes are optional and can be given multiple times.
              </p>
              <p>
                The <code>prefix</code> and <code>class</code> attributes are mandatory for both nodes.
                The meaning is the same as for the <code>interface</code> subnodes of the <code>ihandler</code>
                node.
              </p>
              <p>
                The <code>authinterface</code> node denotes the one
                IWrapper/IHandler combo that is responsible for checking
                the authentification of a user session. The
                <code>auxinterface</code> nodes denote additional
                IWrappers/IHandlers that are called after the
                authentification handler if the authorization is granted.
              </p>
              <p>Note that no error handling whatsoever takes place for <code>auxinterface</code> IHandlers.</p>
          </xmlnote>
        </authhandler>

        <output>
          <xmlnote>
              <p>The whole node is optional. Every page using a State that is itself or a descendant of
                <code>de.schlund.pfixcore.workflow.app.StaticState</code> can use this.</p>
              <p>You can have as many <code>resource</code> childnodes as you like.</p>
          </xmlnote>
          <resource node="AName" class="AClassName"/>
          <xmlnote>
            <table>
              <tr>
                <th>Attribute</th>
                <th>Description</th>
              </tr>
              <tr>
                <td><code>class</code></td>
                <td><b>Mandatory</b>. <code>class</code> is one of the
                  ContextResources defined via <code>implements</code> above.
                </td>
              </tr>
              <tr>
                <td><code>node</code></td>
                <td><b>Mandatory</b>. <code>node</code> is the node in the output tree ("/formresult/<b>AName</b>")
                  under which the ContextResource inserts it's data.</td>
              </tr>
            </table>
          </xmlnote>
        </output>
        <xmlnote><a name="param"/></xmlnote>
        <param name="APropertyKey">AValue</param>
        <xmlnote>
            <p>The node is optional and can be used multiple times. It will be transformed into a java property
              that is associated to the page. The java property that is constructed will look like this:
              <code>pagerequest.APpageName.APropertyKey=AValue</code> where <code>APageName</code> is the value
              of the <code>name</code> attribute.
            </p>
            <p>There are some <code>param</code>s that are
              already defined for
              <code>de.schlund.pfixcore.workflow.app.StaticState</code>
              and descendants. These are listed below</p>
            <br/>
            <table>
              <tr>
                <th>Parameter name</th>
                <th>Parameter value</th>
                <th>Description</th>
              </tr>
              <tr>
                <td><code>mimetype</code></td>
                <td>e.g. <code>text/css</code></td>
                <td>
                  If given, sets the mimetype of the HttpResponse object
                  to something else than the default
                  <code>text/html</code>.  This is most often used for
                  <code>text/css</code>.
                </td>
              </tr>
              <tr>
                <td><code>responseheader.A_HEADER</code></td>
                <td><code>A_VALUE</code></td>
                <td>
                  <p>If given, set the
                    header <code>A_HEADER</code> of the HttpResponse
                    object to <code>A_VALUE</code>.
                  </p>
                  <p>
                    NOTE: the Pustefix system uses a set of default
                    headers that are only used, when no user defined
                    headers are given! The set of default headers is:</p>
                  <p>
                    <code>Expires=Mon, 26 Jul 1997 05:00:00 GMT</code><br/>
                    <code>Pragma=no-cache</code><br/>
                    <code>Cache-Control=no-cache, no-store, private, must-revalidate</code>
                  </p>
                  <p>
                    If you want to use some of them in addition to your
                    own headers, you <b>must</b> manually supply them,
                    too.
                  </p>
                </td>
              </tr>
            </table>
            <br/>
        </xmlnote>
      </pagerequest>
      <xmlnote><a name="pagerequest"/></xmlnote>
      <exception forward="true|false" page="/AServletName/APageName" type="any.kind.of.Exception"
                 processor="class.implementing.ExceptionProcessor">
        <xmlnote>
            There may be multiple <code>exception</code> tags
            defined, each with a different <code>type</code>-attribute. If there
            are <code>exception</code>-tags with the same <code>type</code>-attribute,
            only one of these will affect exception-handling, although there is no
            guarantee on which one this will be.
            <br />
            If an exception occurs during exception processing, or during processing
            of the page, the request got forwarded to, no exception furhter handling
            as can be configured during the <code>exception</code>-tag,  will take
            place. Therefore the code that processes exceptions and the code that
            drives pages to which requests get forwarded, in case of exceptions, should
            be quite robust. Otherwise the whole exception-handling thing would be quite
            useless, wouldn't it?
            <br/><br/>
            <table>
                <tr>
                  <th>Attribute</th>
                  <th>Description</th>
                </tr>
                <tr>
                    <td><code>type</code></td>
                    <td><b>Mandatory</b>. This attribute must contain the fully qualified
                        class name of a valid Exception-class, for which the handling should be
                        configured at this point. In this case it specifically means,
                        that the specified class must be a descendant of <code>java.lang.Throwable</code>,
                        as the <code>catch</code>-block that handles the exceptions which are specified
                        here, catches <code>Throwable</code>.
                    </td>
                </tr>
                <tr>
                    <td><code>forward</code></td>
                    <td>If you specify a custom ExceptionProcessor, it depends on the implementation
                        of the custom processor, whether this attribute is mandatory or optional.
                        <br />
                        If no custom ExceptionProcessor is used, this attribute is <b>mandatory</b>,
                        and <b>must</b> be set to <code>true</code>. It signals the ExceptionProcessor,
                        whether the request should be forwarded to the specified page. In case
                        of the default ExceptionProcessor (see below) the page gets always forwarded, and
                        another value as <code>true</code> for the <code>forward</code>-attribute will
                        result in an exception.
                     </td>
                </tr>
                <tr>
                    <td><code>page</code></td>
                    <td>If you specify a custom ExceptionProcessor, it depends on the implementation
                        of the custom processor, whether this attribute is mandatory or optional.
                        <br />
                        If no custom ExceptionProcessor is used, this attribute is <b>mandatory</b>.
                        This specifies a page to which the request will be forwarded in case
                        an exception occurs. The page must be specified as an absolute servlet-path,
                        which means, the pageName must be prefixed with the servletName that
                        serves the page (e.g. <code>/config/auth_user</code> or something similar).
                        <br />
                        The page must be served by a servlet that is contained within the same webapp
                        (or pustefix-project, which basically means the same). One cannot forward a request
                        to page that's in another project as the one in which the exception occurred.
                    </td>
                </tr>
                <tr>
                    <td><code>processor</code></td>
                    <td>Optional. A fully qualified class name of a class, that implements
                        the <code>de.schlund.pfixxml.exceptionprocessor.ExceptionProcessor</code>
                        -interface. If not present the default processor
                        <code>de.schlund.pfixxml.exceptionprocessor.PageForwardingExceptionProcessor</code>
                        will be used.
                    </td>
                </tr>
            </table>
        </xmlnote>
      </exception>
      <prop name="AProperty">AValue</prop>
    </xproperties>
  </xmlcode>
  </subsection>
  <subsection name="de.schlund.pfixxml.DirectOutputServlet">

  <p><a name="DOS"/>Occasionally you don't
    want to generate output with an XSLT Transformation, but
    e.g. deliver binary content directly to the output
    stream instead. In this case you need to provide another servlet of type
    <code>de.schlund.pfixxml.DirectOutputServlet</code>. This servlet
    doesn't have it's own context but instead "hijacks" the context of a
    foreign <code>de.schlund.pfixxml.ContextXMLServer</code>. The
    context isn't used for any pageflow handling, only as a means to get
    to the data (== ContextResources) of the "main" application.</p>
  <p>The servlet knows about one or many
    <code>directoutputpagerequest</code>. For the XML/XSLT side of
    things, they look like normal pages (in fact, the value of the
    <code>directoutputpagerequest</code>'s <code>name</code> attribute
    must be a page defined in <code>depened.xml</code>. Of course, no
    target definition must be given, only the page in the
    <code>navigation</code> structure must exist). But other than the
    usual <code>pagerequest</code>, a
    <code>directoutputpagerequest</code> has an associated
    <code>directoutputstate</code> whose <code>class</code> attribute
    is a java class implementing
    <code>de.schlund.pfixcore.workflow.app.DirectOutputState</code>.
  </p>

  <xmlcode>
    <xproperties xmlns:cus="http://www.schlund.de/pustefix/customize">
      <servletinfo depend="MyProject/conf/depend.xml" name="AUniqueNameForTheServlet">
        <ssl force="true|false"/>
        <editmode allow="true|false"/><xmlnote>
            See the comment for the <code>servletinfo</code> node of the
            <code>de.schlund.pfixxml.ContextXMLServer</code> property
            file above.
         </xmlnote>
      </servletinfo>

      <foreigncontext externalservletname="UniqueNameOfAnotherServlet"/>
      <xmlnote>
          <p>
            The <code>externalservletname</code> must the name of a
            servlet of type
            <code>de.schlund.pfixxml.ContextXMLServer</code>. The
            context (or better: the <code>ContextResourceManager</code>)
            of this servlet is used for getting stored application data.
          </p>
          <p>Additionally, if the context is of type <code>de.schlund.pfixcore.workflow.AuthContext</code>,
            it's authentification page is checked before any <code>DirectOutputState</code> is called.
          </p>
      </xmlnote>

      <directoutputpagerequest name="APageName">
        <directoutputstate class="AClassName"/>
        <xmlnote>
            See the explanation at the start of this subsection.
        </xmlnote>
        <param name="APropertyKey">AValue</param>
        <xmlnote>
            <p>The node is optional and can be used multiple times. It will be transformed into a java property
              that is associated to the page. The java property that is constructed will look like this:
              <code>pagerequest.APpageName.APropertyKey=AValue</code> where <code>APageName</code> is the value
              of the <code>name</code> attribute.
            </p>
        </xmlnote>
      </directoutputpagerequest>
    </xproperties>
  </xmlcode>
  </subsection>
  </section>
</body>
</document>
