<?xml version="1.0" encoding="utf-8"?>
<document>

  <properties>
    <title>The depend.xml.in file</title>
  </properties>

  <body>

  <section name="The depend.xml.in file">

  <p>
    The <code>depend.xml</code> configuration file serves two
    purposes: First, it is used to create the <i>hierarchical page
    structure</i> of the project by defining a <i>tree of pages</i>.
    Then, it is used to define the internal structure of the pages by
    defining, for every single page, the <i>tree of transformations</i>
    that need to be applied to certain files to get the final
    stylesheet (which is the representation of the page in
    Pustefix). For an overview over the transformation aspect of
    the whole framework, please go <a href="xml.html">here</a>.
  </p>

  <p>To make life a little easier, you <b>never edit the <code>depend.xml</code> file directly,
      but instead a <code>depend.xml.in</code> file</b> which is used to
    produce the <code>depend.xml</code> file (this is done
    automatically by the build system of the skeleton package and the
    CVS checkout).
  </p>
  
  <p>The structure of the config file is show below:
  </p>

  <a name="record_dir"/>
  
  <xmlcode>
    <make cachedir="..." recorddir="..." project="MyProject" lang="en">
      <xmlnote>
        <table>
          <tr>
            <th>Attribute</th>
            <th>Notes</th>
          </tr>
          <tr>
            <td>cachedir</td>
            <td>
              <p>This attribute designates a directory where the generated stylesheets are saved to.</p>
              <p>NOTE: The attribute is <b>mandatory</b>; you must give a path relative to the <b>docroot</b> here!</p>
            </td>
          </tr>
          <tr>
            <td>record_dir</td>
            <td>
              <p>This attribute designates the directory that is used
              to save recorded trails to (see the documentation for
              the <a href="testclient.html">testclient</a> to learn
              more about the use of this attribute).</p> <p>NOTE: The
              attribute is <b>optional</b>, if given, it must be
              either an absolute path name or a relative path which is
              interpreted as being relative to the <b>docroot</b></p>
            </td>
          </tr>
          <tr>
            <td>project</td>
            <td>
              <p>The name of the project. This is the same as the value of the <code>product</code>
                node's <code>name</code> attribute used in include parts, and the same as the
                corresponding entry in the <code>project.xml.in file</code>. This attribute is <b>mandatory</b>.</p>
            </td>
          </tr>
          <tr>
            <td>lang</td>
            <td>
              <p>The default language of the project. This is the same as the value of the <code>lang</code>
                node's <code>name</code> attribute used in include parts. This attribute is <b>mandatory</b>.</p>
            </td>
          </tr>
        </table>
      </xmlnote>
      <navigation>
        <xmlnote>
            This tag has only <code>page</code> nodes as
            children. The tree of pages matches the hierarchy of the
            project's sitetree.
        </xmlnote>
        <page name="foo" handler="/xml/static" accesskey="F">
          <page name="sub_foo1" handler="/xml/static"/>
          <page name="sub_foo2" handler="/xml/static"/>
          ...
        </page>
        <page name="bar" handler="/xml/config">
          ...
        </page>
        ...
        <xmlnote>
          <table>
            <tr>
              <th>Attribute</th>
              <th>Notes</th>
            </tr>
            <tr>
              <td>
                name
              </td>
              <td>
                <p>
                  The name of the page. This name is used throughout
                  Pustefix to reference the page (e.g. when creating
                  internal links and in other config files).
                </p>
                <p>
                  NOTE: This attribute is <b>mandatory</b>
                </p>
              </td>
            </tr>
            <tr>
              <td>
                handler
              </td>
              <td>
                <p>This attribute tells the system which servlet is
                  used to handle requests for this page. You can think
                  of the <code>handler</code> attribute as a project wide servlet "name" 
                  as defined in the <a href="proj.html">project definition</a></p>
                <p>
                  NOTE: This attribute is <b>mandatory</b>
                </p>
              </td>
            </tr>
            <tr>
              <td>
                accesskey
              </td>
              <td>
                <p>This attribute defines a default access key that will be used by the <code>pfx:button</code> and
                  <code>pfx:jsbutton</code> tags for the links they generate.
                </p>
                <p>
                  This attribute is <b>optional</b>
                </p>
              </td>
            </tr>
          </table>
        </xmlnote>
      </navigation>
      <xmlnote/>
      <global>
        <param name="AName" value="AValue"/>
        <include stylesheet="path/to/AStyleSheet"/>
      </global>
      <xmlnote>
          The <code>global</code> section allows to set default values for ALL pages defined via
          the <code>standardpage</code> tag (see below). It's possible to set
          default <code>param</code>s, and runtime stylesheets (see <a href="xml.html">here</a>).
          It's also possible to add more runtime stylesheets or overwrite params in
          the <code>standardpage</code> tag for a single page.
      </xmlnote>
      <target name="a_target_name.xsl"       type="[xsl|xml]">...</target>
      <target name="another_target_name.xml" type="[xsl|xml]">...</target>
      ...
      <standardmaster/>
      <standardmetatags/>
      <standardpage name="a_page_name" xml="a_base_xml_file.xml">...</standardpage>
      ...
      <xmlnote>
          <p>The only other tags allowed besides the
            <code>navigation</code> tag are <code>target</code>, 
            <code>global</code>, <code>standardmaster</code>, <code>standardmetatags</code>
            and <code>standardpage</code>. <b>The latter three are only
              convenience tags that can be expressed fully in terms
              of <code>target</code> tags</b> (Expanding the
            those tags is one of the duties
            of the transformation <code>depend.xml.in</code>
            => <code>depend.xml</code> mentioned above).</p>
          <p> See below for a detailed explanation of targets and their configuration</p>
      </xmlnote>
    </make>
  </xmlcode>

  <subsection name="Targets">

  <xmlcode>
    <target name="foo.xsl" type="xsl">
      <xmlnote>
        <table>
          <tr>
            <th>
              Attribute
            </th>
            <th>
              Notes
            </th>
          </tr>
          <tr>
            <td>
              name
            </td>
            <td>
              The name of the target. This name must be unique for the whole project (NOT the whole environment!)
            </td>
          </tr>
          <tr>
            <td>
              type
            </td>
            <td>
              Must be <b>xsl</b> for a target that should be "compiled" into a templates object. Must be <b>xml</b> for every
              target that is used as input for a transformation.
            </td>
          </tr>
        </table>
      </xmlnote>
      <depxml name="foo/xsl/bar.xsl"/>
      <depxsl name="foo/xsl/baz.xsl"/>
      <xmlnote>
          <p><code>depxml</code> and <code>depxsl</code> reference other
          targets by their <code>name</code> attribute that serve as
          the XML resp. XSL input used to create this target via a XSL
          transformation. If for a given <code>name</code> attribute of either
          <code>depxml</code> or <code>depxsl</code> no other target definition is found,
          the transformation parent is supposed to be a leaf target and the <code>name</code> attribute
          is interpreted as a path relative to the docroot.</p>
      </xmlnote>
      <depaux name="foo/xsl/snarf.xsl"/>
      <xmlnote>
          <p>
            <code>depaux</code> tags create user defined dependencies on
            the files they reference in their <code>name</code>
            attribute. Whenever the target generation system is asked
            for a target, all its dependencies are checked whether their
            modification time is older than the creation time of the
            target. Dependencies include by design the
            <code>depxml</code> and <code>depxsl</code> targets (which
            may be files in the case of a leaf target or another
            virtual target that returns its own creation time as the modification time) and all
            include files from which include parts are taken during
            the transformation of the target.
          </p>
          <p>
            If any of these files or targets has been changed after
            the target was built, it is taken care of that the target
            is rebuild.
          </p>
          <p>
            <code>depaux</code> just adds more dependencies "by hand" that are not automatically
            detected. In the example above, the file referenced is a XSLT stylesheets that's
            included via <code>xsl:include</code> into the <code>foo.xsl</code> stylesheet. Such
            external dependencies are not currently recognized automatically.</p>
            <p>E.g. if you use a <code>foo/xsl/fubar.xsl</code> stylesheet that
            serves as a library of templates you want to include
            into <code>foo.xsl</code>, you need to add the
            following line to the target definition of
            <code>foo.xsl</code> to make the system recognize changes to <code>foo/xsl/fubar.xsl</code></p>

      </xmlnote>
              <depaux name="foo/xsl/fubar.xsl"/>

      <param name="AName" value="AValue"/>
      <xmlnote>
          <code>param</code> tags supply XSL transformation parameters that are used when the target is generated.
          You <b>must never supply</b> a <code>param</code> named <code>docroot</code>. This
          parameter is inserted automatically into all targets during the transformation <code>depend.xml.in</code>
          =&gt; <code>depend.xml</code>.
      </xmlnote>
    </target>
  </xmlcode>
  
  </subsection>
  <subsection name="Standard page definition">
  <a name="stdpage"/>
  The <code>standardpage</code> tag is a convenience tag that encapsulates the typical definition of
  a complete page in the Pustefix system.
  <xmlcode>
    <standardpage name="BazPage"  xml="MyProject/xml/FooBase.xml">
      <xmlnote>
        <table>
          <tr>
            <th>Attribute</th>
            <th>Notes</th>
          </tr>
          <tr>
            <td>name</td>
            <td>The name of the page. This must be a name already defined in a <code>page</code> tag in the navigation tree.</td>
          </tr>
          <tr>
            <td>xml</td>
            <td>The name of a xml target to use as input for the "metatags transformation". Often this is a leaf target and
              one of the projects <i>structural xml files</i> (see <a href="xml.html">here</a>).</td>
          </tr>
        </table>
        <br/>
      </xmlnote>
      <include stylesheet="MyProject/xsl/runtime.xsl"/>
      <param name="outputmethod"         value="html"/>
      <param name="outputencoding"       value="iso-8859-1"/>
      <param name="outputdoctype-public" value="PubID"/>
      <param name="outputdoctype-system" value="SysID"/>
      <xmlnote>
          Note: All the child nodes are optional (an in fact, most often not needed)
      </xmlnote>
    </standardpage>
  </xmlcode>
  <p>after performing the transformation <code>depend.xml.in</code> =&gt;  <code>depend.xml</code>
    (automatically done by the build system in the skeleton package and the CVS checkout) this becomes</p>
  <xmlcode>
    <target name="BazPage.xsl" type="xsl">
      <depxml name="BazPage.xml"/>
      <depxsl name="master.xsl"/>
      <param name="page" value="BazPage"/>
      <xmlnote>
          For every target that is only used in the generation of one single page (if you look at the example given
          <a href="xml.html">here</a>, this is true for the generated targets <code>BazPage.xml</code> and <code>BazPage.xsl</code>)
          you <b>must give a parameter called <code>page</code> with the name of the resulting page as the value</b>.
          While the <code>standardpage</code> tag does this automatically for you make sure that you don't forget it for target
          structures you define yourself.
      </xmlnote>
      <param name="docroot" value="/path/to/pustefix/projects"/>
      <xmlnote>
          As mentioned above, the transformation <code>depend.xml.in</code> =&gt; <code>depend.xml</code>
          inserts a <code>param</code> called <code>docroot</code>.
      </xmlnote>
      <param name="outputmethod" value="html"/>
      <param name="outputmethod" value="iso-8859-1"/>
      <param name="outputdoctype-public" value="PubID"/>
      <param name="outputdoctype-system" value="SysID"/>
      <xmlnote>
          parameters given to the standardpage tag are supplied to the first of the two
          transformations. The parameters given above have predefined meaning. 
      </xmlnote>
      <param name="stylesheets_to_include" value="MyProject/xsl/runtime.xsl"/>
      <depaux name="/path/to/pustefix/projects/MyProject/xsl/runtime.xsl"/>
      <xmlnote>
          All include tags given are runtime stylesheets, given to the transformation via the
          parameter <code>stylesheets_to_include</code> (as a space separated list if multiple
          include tags are given). Note that the needed <code>depaux</code> nodes are inserted
          automatically.
      </xmlnote>
    </target>
    <xmlnote/>
    <target name="BazPage.xml" type="xml">
      <depxml name="MyProject/xml/FooBase.xml"/>
      <depxsl name="metatags.xsl"/>
      <param name="page" value="BazPage"/>
      <param name="docroot" value="/path/to/pustefix/projects"/>
    </target>
  </xmlcode>

  </subsection>
  <subsection name="Standard master target definition">
  <p>
    The <code>standardmaster</code> tag is a convenience tag that encapsulates the typical
    target definition of the <code>master.xsl</code> <a href="xml.html">stylesheet</a>. 
    <xmlcode>
      <standardmaster>
        <include stylesheet="MyProject/xsl/skin.xsl"/>
        <param name="AName" value="AValue"/>
      </standardmaster>
    </xmlcode>
    <p>after performing the transformation <code>depend.xml.in</code> =&gt; <code>depend.xml</code>
      this becomes</p>
    <xmlcode>
      <target name="master.xsl" type="xsl">
        <depxml name="core/xsl/master.xsl"/>
        <depxsl name="core/xsl/customizemaster.xsl"/>
        <depaux name="/path/to/pustefix/projects/core/xsl/default_copy.xsl"/>
        <depaux name="/path/to/pustefix/projects/core/xsl/include.xsl"/>
        <depaux name="/path/to/pustefix/projects/core/xsl/utils.xsl"/>
        <depaux name="/path/to/pustefix/projects/core/xsl/navigation.xsl"/>
        <depaux name="/path/to/pustefix/projects/core/xsl/forminput.xsl"/>
        <depaux name="/path/to/pustefix/projects/sample1/conf/depend.xml"/>
        <param name="AName" value="AValue"/>
        <param name="docroot" value="/path/to/pustefix/projects"/>
        <param name="product" value="MyProject"/>
        <param name="lang" value="en"/>
      </target>
    </xmlcode>
  </p>

  </subsection>
  <subsection name="Standard metatags target definition">
  <p>
    The <code>standardmetatags</code> tag is a convenience tag that encapsulates the typical
    target definition of the <code>metatags.xsl</code> <a href="xml.html">stylesheet</a>. 
    <xmlcode>
      <standardmetatags>
        <include stylesheet="MyProject/xsl/metatags.xsl"/>
        <param name="AName" value="AValue"/>
      </standardmetatags>
    </xmlcode>
    <p>after performing the transformation <code>depend.xml.in</code> =&gt; <code>depend.xml</code>
      this becomes</p>
    <xmlcode>
      <target name="metatags.xsl" type="xsl">
        <depxml name="core/xsl/metatags.xsl"/>
        <depxsl name="core/xsl/customizemaster.xsl"/>
        <depaux name="/path/to/pustefix/projects/core/xsl/default_copy.xsl"/>
        <depaux name="/path/to/pustefix/projects/core/xsl/include.xsl"/>
        <depaux name="/path/to/pustefix/projects/core/xsl/utils.xsl"/>
        <depaux name="/path/to/pustefix/projects/MyProject/conf/depend.xml"/>
        <depaux name="/path/to/pustefix/projects/MyProject/xsl/metatags.xsl"/>
        <param name="stylesheets_to_include" value="MyProject/xsl/metatags.xsl "/>
        <param name="AName" value="AValue"/>
        <param name="docroot" value="/path/to/pustefix/projects"/>
        <param name="product" value="MyProject"/>
        <param name="lang" value="en"/>
      </target>
    </xmlcode>
  </p>
  </subsection>
  </section>
</body>
</document>
