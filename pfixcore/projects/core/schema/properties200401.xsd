<?xml version="1.0" encoding="ISO-8859-1"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://pustefix.sourceforge.net/properties200401"
  xmlns:prop="http://pustefix.sourceforge.net/properties200401" elementFormDefault="qualified" attributeFormDefault="unqualified"
  >

  <!--
  CVS Revision: $Revision$
  -->

  <!--
  TODO:
  * make ihandler and authhandler mutually exclusive
  -->

  <xs:element name="contextxmlserver" type="prop:contextxmlserverType">
    <xs:keyref refer="prop:contextresourceimplements" name="contextresourceimplements2pagerequestoutputresource">
      <xs:selector xpath="prop:pagerequest/prop:output/prop:resource"></xs:selector>
      <xs:field xpath="@class"></xs:field>
    </xs:keyref>
    <xs:unique name="pageflow">
      <xs:selector xpath="."></xs:selector>
      <xs:field xpath="@name"></xs:field>
    </xs:unique>
  </xs:element>
  <xs:complexType name="contextxmlserverType">
    <xs:sequence>
      <xs:element name="servletinfo" type="prop:contextxmlserverservletinfoType"/>
      <xs:element ref="prop:context"/>
      <xs:element ref="prop:interceptors" maxOccurs="1" minOccurs="0"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="prop:scriptedflow"/>
        <xs:element name="config-include">
          <xs:complexType>
            <xs:attribute name="refid"></xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="config-include">
          <xs:complexType>
            <xs:attribute name="xpath"></xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element ref="prop:roleprovider" minOccurs="0" maxOccurs="1"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="prop:role"/>
        <xs:element ref="prop:config-include"/>
      </xs:choice>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="condition" type="prop:conditionTopLevelType"/>
        <xs:element ref="prop:config-include"/>
      </xs:choice>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="authconstraint" minOccurs="0">
          <xs:complexType>
            <xs:complexContent>
              <xs:extension base="prop:authconstraintType">
                <xs:attribute name="id" use="required" type="xs:ID"/>
                <xs:attribute name="authpage" use="optional" type="xs:string"/>
                <xs:attribute name="default" use="optional" type="xs:boolean"/>
              </xs:extension>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
        <xs:element ref="prop:config-include"/>
      </xs:choice>
      <xs:choice minOccurs="1" maxOccurs="unbounded">
        <xs:element ref="prop:pageflow"/>
        <xs:element ref="prop:pagerequest"/>
        <xs:element ref="prop:config-include"/>
      </xs:choice>
      <xs:element ref="prop:exception" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="prop:properties" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="version" type="xs:token" use="required"/>
  </xs:complexType>

  <!--
    <servletinfo depend="eueconfig/conf/depend.xml" name="eueconfig__project:config_eue__servlet:1">
      <cuschoose>
        <custest mode="prod" >
          <editmode allow="false"/>
          <ssl force="true"/>
        </custest>
        <custest>
          <editmode allow="true"/>
        </custest>
      </cuschoose>
    </servletinfo>
  -->


  <!-- <servletinfo> -->
  <xs:complexType name="servletinfoType" abstract="true">
    <xs:attribute name="name" use="required"/>
  </xs:complexType>

  <xs:complexType name="directoutputserverservletinfoType">
    <xs:complexContent>
      <xs:extension base="prop:servletinfoType">
        <xs:sequence>
       	  <xs:element ref="prop:encoding" minOccurs="0"/>
          <!-- Only present for compatibility with older version -->
          <xs:element ref="prop:editmode" minOccurs="0"/>
          <xs:element ref="prop:ssl" minOccurs="0"/>
          <xs:element name="choose" minOccurs="0" maxOccurs="unbounded">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="when" minOccurs="1" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:all>
                      <!-- Only present for compatibility with older version -->
                      <xs:element ref="prop:editmode" minOccurs="0"/>
                      <xs:element ref="prop:ssl" minOccurs="0"/>                      
                    </xs:all>
                    <xs:attribute name="test" use="required"/>
                  </xs:complexType>
                </xs:element>
                <xs:element name="otherwise" minOccurs="0" maxOccurs="1">
                  <xs:complexType>
                    <xs:all>
                      <!-- Only present for compatibility with older version -->
                      <xs:element ref="prop:editmode" minOccurs="0"/>
                      <xs:element ref="prop:ssl" minOccurs="0"/>                      
                    </xs:all>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <!-- Only present for compatibility with older version -->
        <xs:attribute name="depend" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="contextxmlserverservletinfoType">
    <xs:complexContent>
      <xs:extension base="prop:servletinfoType">
        <xs:sequence>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
       	    <xs:element ref="prop:encoding" minOccurs="0"/>
            <xs:element ref="prop:editmode" minOccurs="0"/>
            <xs:element ref="prop:ssl" minOccurs="0"/>
            <xs:element ref="prop:defaultstate" minOccurs="0"/>
            <xs:element ref="prop:defaultihandlerstate" minOccurs="0"/>
            <xs:element name="choose" minOccurs="0" maxOccurs="unbounded">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="when" minOccurs="1" maxOccurs="unbounded">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="prop:editmode" minOccurs="0"/>
                        <xs:element ref="prop:ssl" minOccurs="0"/>                      
                      </xs:all>
                      <xs:attribute name="test" use="required"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="otherwise" minOccurs="0" maxOccurs="1">
                    <xs:complexType>
                      <xs:all>
                        <xs:element ref="prop:editmode" minOccurs="0"/>
                        <xs:element ref="prop:ssl" minOccurs="0"/>                      
                      </xs:all>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="depend" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:element name="editmode" type="prop:editmodeType"/>
  <xs:complexType name="editmodeType">
    <xs:attribute name="allow" type="xs:boolean" default="false"/>
  </xs:complexType>

  <xs:element name="ssl" type="prop:sslType"/>
  <xs:complexType name="sslType">
    <xs:attribute name="force" type="xs:boolean" use="required"/>
  </xs:complexType>
  
  <xs:complexType name="authconstraintType">
    <xs:sequence>
      <xs:element ref="prop:abstractcondition" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="abstractcondition" type="prop:abstractconditionType" abstract="true"/>
  <xs:complexType name="abstractconditionType" abstract="true"/>
 
  <xs:complexType name="singleconditionType">
    <xs:complexContent>
      <xs:extension base="prop:abstractconditionType">
        <xs:sequence>
          <xs:element ref="prop:abstractcondition" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType> 
 
  <xs:complexType name="multiconditionType">
    <xs:complexContent>
      <xs:extension base="prop:abstractconditionType">
      	<xs:sequence>
          <xs:element ref="prop:abstractcondition" minOccurs="2" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:element name="or" type="prop:multiconditionType" substitutionGroup="prop:abstractcondition"/>
  <xs:element name="and" type="prop:multiconditionType" substitutionGroup="prop:abstractcondition"/>
  <xs:element name="not" type="prop:singleconditionType" substitutionGroup="prop:abstractcondition"/>
  
  <xs:element name="hasrole" type="prop:hasroleType" substitutionGroup="prop:abstractcondition"/>
  <xs:complexType name="hasroleType">
    <xs:complexContent>
      <xs:extension base="prop:abstractconditionType">
         <xs:attribute name="name" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:element name="condition" type="prop:conditionType" substitutionGroup="prop:abstractcondition"/>
  
  <xs:complexType name="conditionTopLevelType">
    <xs:complexContent>
      <xs:extension base="prop:abstractconditionType">
         <xs:sequence>
           <xs:element name="property" minOccurs="0" maxOccurs="unbounded">
             <xs:complexType>
               <xs:attribute name="name" type="xs:string" use="required"/>
               <xs:attribute name="value" type="xs:string" use="required"/>
             </xs:complexType>
           </xs:element>
         </xs:sequence>
         <xs:attribute name="id" type="xs:string" use="required"/>
         <xs:attribute name="class" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="conditionType">
    <xs:complexContent>
      <xs:extension base="prop:abstractconditionType">
         <xs:sequence>
           <xs:element name="property" minOccurs="0" maxOccurs="unbounded">
             <xs:complexType>
               <xs:attribute name="name" type="xs:string" use="required"/>
               <xs:attribute name="value" type="xs:string" use="required"/>
             </xs:complexType>
           </xs:element>
         </xs:sequence>
         <xs:attribute name="ref" type="xs:string" use="optional"/>
         <xs:attribute name="class" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  
  
  
  <xs:element name="encoding" type="prop:encodingType"/>
  <xs:simpleType name="encodingType">
    <xs:restriction base="xs:normalizedString">
      <xs:minLength value="2"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="defaultstate" type="prop:defaultstateType"/>
  <xs:complexType name="defaultstateType">
    <xs:attribute name="class" use="required"/>
  </xs:complexType>

  <xs:element name="defaultihandlerstate" type="prop:defaultihandlerstateType"/>
  <xs:complexType name="defaultihandlerstateType">
    <xs:attribute name="class" use="required"/>
  </xs:complexType>
  <!-- </servletinfo> -->



  <!--
  <pagerequest name="OrderHostingRedirectConfig">
    <state class="de.schlund.pfixschlund.ucm.contract.ContractOrderState"/>
    <cuschoose>
      <custest mode="prod">
        <param name="orderlink">hosting.1und1.de</param>
      </custest>
      <custest>
        <param name="orderlink">oneandone-de.<cus:fqdn/></param>
      </custest>
    </cuschoose>
  </pagerequest>
  -->

  <!-- <context> -->
  <xs:element name="context" type="prop:contextType">
    <xs:unique name="contextresource">
      <xs:selector xpath="prop:resource"/>
      <xs:field xpath="@class"/>
    </xs:unique>
    <xs:unique name="contextresourceimplements">
      <xs:selector xpath="prop:resource/prop:implements"/>
      <xs:field xpath="@class"/>
    </xs:unique>
  </xs:element>
  <xs:complexType name="contextType">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="prop:resource"/>
        <xs:element ref="prop:config-include"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="class"/>
    <xs:attribute name="defaultflow" use="required"/>
    <xs:attribute name="authpage"/>
    <xs:attribute name="synchronized" type="xs:boolean" default="true"/>
  </xs:complexType>

  <xs:element name="resource" type="prop:resourceType"/>
  <xs:complexType name="resourceType">
    <xs:sequence>
      <xs:element ref="prop:implements" maxOccurs="unbounded"/>
      <xs:element ref="prop:properties" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="class" use="required"/>
  </xs:complexType>

  <xs:element name="implements" type="prop:implementsType"/>
  <xs:complexType name="implementsType">
    <xs:attribute name="class" use="required"/>
  </xs:complexType>
  <!-- </context> -->

  <!-- <interceptors> -->
  
  <xs:element name="interceptors" type="prop:interceptorsType" />
  <xs:complexType name="interceptorsType">
    <xs:sequence>
      <xs:element ref="prop:start" maxOccurs="1" minOccurs="0"/>
      <xs:element ref="prop:end" maxOccurs="1" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  
  <xs:element name="start" type="prop:interceptorGroupType"/>	
  <xs:element name="end" type="prop:interceptorGroupType"/>	


  <xs:complexType name="interceptorGroupType">
	<xs:sequence maxOccurs="unbounded" minOccurs="0">
      <xs:choice>
		<xs:element ref="prop:interceptor"/>
        <xs:element ref="prop:config-include"/>
      </xs:choice>
	</xs:sequence>
  </xs:complexType>
  
  

  <xs:element name="interceptor" type="prop:interceptorType"/>
  <xs:complexType name="interceptorType">
	<xs:attribute name="class" type="xs:normalizedString" use="required"/>
  </xs:complexType>
  
  
  <!-- </interceptors> -->
	
  <!-- <role> -->

  <xs:element name="role" type="prop:roleType"/>
  <xs:complexType name="roleType">
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="initial" type="xs:boolean"/>
  </xs:complexType>
  
  <!-- </role> -->
  
  <xs:element name="roleprovider" type="prop:roleproviderType"/>
  <xs:complexType name="roleproviderType">
    <xs:attribute name="class" type="xs:normalizedString" use="required"/>
  </xs:complexType>

  <!-- <pageflow> -->
  <xs:element name="pageflow" type="prop:pageflowType"/>
  <xs:complexType name="pageflowType">
    <xs:choice>
      <xs:sequence>
        <xs:element name="default">
          <xs:complexType>
            <xs:group ref="prop:pageflowGroup"/>
          </xs:complexType>
        </xs:element>
        <xs:element name="variant" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:group ref="prop:pageflowGroup"/>
            <xs:attribute name="name" use="required"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:group ref="prop:pageflowGroup"/>
    </xs:choice>
    <xs:attribute name="name" use="required"/>
    <xs:attribute name="final"/>
    <xs:attribute name="stopnext" type="xs:boolean" default="false"/>
  </xs:complexType>

  <xs:group name="pageflowGroup">
    <xs:sequence>
      <xs:element ref="prop:flowstep" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:group>

  <xs:element name="flowstep" type="prop:flowstepType"/>
  <xs:complexType name="flowstepType">
    <xs:sequence>
      <xs:element ref="prop:oncontinue" minOccurs="0"/>
      <xs:element ref="prop:properties" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="name" use="required"/>
    <xs:attribute name="stophere"/>
  </xs:complexType>

  <xs:element name="oncontinue" type="prop:oncontinueType"/>
  <xs:complexType name="oncontinueType">
    <xs:sequence>
      <xs:element ref="prop:when" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="applyall" type="xs:boolean" default="false"/>
  </xs:complexType>

  <xs:element name="when" type="prop:whenType"/>
  <xs:complexType name="whenType">
    <xs:sequence>
      <xs:element ref="prop:action" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="test"/>
  </xs:complexType>

  <xs:element name="action" type="prop:actionType"/>
  <xs:complexType name="actionType">
    <xs:attribute name="type" use="required"/>
    <xs:anyAttribute processContents="lax"/>
  </xs:complexType>
  <!-- </pageflow> -->



  <!--
  <xs:element name="" type="prop:"/>
  <xs:complexType name="">
    <xs:sequence>
      <xs:element ref="prop:"/>
    </xs:sequence>
    <xs:attribute name=""/>
  </xs:complexType>
  -->

  <!-- <pagerequest> -->
  <xs:element name="pagerequest" type="prop:pagerequestType"/>
  <xs:complexType name="pagerequestType">
    <xs:choice>
      <xs:sequence>
        <xs:element name="default">
          <xs:complexType>
            <xs:group ref="prop:pagerequestGroup"/>
          </xs:complexType>
        </xs:element>
        <xs:element name="variant" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:group ref="prop:pagerequestGroup"/>
            <xs:attribute name="name" use="required"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:group ref="prop:pagerequestGroup"/>
    </xs:choice>
    <xs:attribute name="name" use="required"/>
    <xs:attribute name="copyfrom"/>
  </xs:complexType>

  <xs:group name="pagerequestGroup">
      <xs:sequence>

        <xs:element ref="prop:ssl" minOccurs="0"/>
        
        <xs:element name="choose" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="when" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:all>
                    <xs:element ref="prop:ssl" minOccurs="0"/>                      
                  </xs:all>
                  <xs:attribute name="test" use="required"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="otherwise" minOccurs="0" maxOccurs="1">
                <xs:complexType>
                  <xs:all>
                    <xs:element ref="prop:ssl" minOccurs="0"/>                      
                  </xs:all>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="defaultflow" minOccurs="0">
          <xs:complexType>
            <xs:attribute name="flow" use="required"/>
          </xs:complexType>
        </xs:element>

        <xs:element name="authconstraint" minOccurs="0">
          <xs:complexType>
            <xs:complexContent>
              <xs:extension base="prop:authconstraintType">
                <xs:attribute name="ref" use="optional" type="xs:IDREF"/>
                <xs:attribute name="authpage" use="optional" type="xs:string"/>
              </xs:extension>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
        
        <xs:element name="state" minOccurs="0">
          <xs:complexType>
            <xs:attribute name="class" use="required"/>
          </xs:complexType>
        </xs:element>

        <xs:element name="finalizer" minOccurs="0">
          <xs:complexType>
            <xs:attribute name="class" use="required"/>
          </xs:complexType>
        </xs:element>

        <xs:choice>
          <xs:element name="input"  minOccurs="0">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="interface" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="prefix" use="required"/>
                    <xs:attribute name="class" use="required"/>
                    <xs:attribute name="continue" default="false" type="xs:boolean"/>
                    <xs:attribute name="activeignore" default="false" type="xs:boolean"/>
                    <xs:attribute name="alwaysretrieve" default="false" type="xs:boolean"/>
                    <xs:attribute name="logging" default="false" type="xs:boolean"/>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="policy" default="ANY">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="ANY"/>
                    <xs:enumeration value="ALL"/>
                    <xs:enumeration value="NONE"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
              <xs:attribute name="requirestoken" default="false" type="xs:boolean"/>
            </xs:complexType>
          </xs:element>
          <xs:element name="auth" minOccurs="0">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="authinterface" maxOccurs="1">
                    <xs:complexType>
                      <xs:attribute name="prefix" use="required"/>
                      <xs:attribute name="class" use="required"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="auxinterface" minOccurs="0" maxOccurs="unbounded">
                    <xs:complexType>
                      <xs:attribute name="prefix" use="required"/>
                      <xs:attribute name="class" use="required"/>
                    </xs:complexType>
                  </xs:element>
                </xs:sequence>
              </xs:complexType>
          </xs:element>
        </xs:choice>

        <xs:element name="output" minOccurs="0">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="resource" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="class" use="required"/>
                    <xs:attribute name="node" use="required"/>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
        </xs:element>

        <xs:element ref="prop:properties" minOccurs="0"/>

      </xs:sequence>
  </xs:group>
  <!-- </pagerequest> -->
	
  <!-- <scriptedflow name="..." file="..."/> -->
  <xs:element name="scriptedflow" type="prop:scriptedflowType"/>
  <xs:complexType name="scriptedflowType" mixed="false">
    <xs:attribute name="name" use="required"/>
    <xs:attribute name="file" use="required"/>
  </xs:complexType>
  
  <!-- <exception> -->
  <!-- the desired behaviour for page and forward cannot be expressed -->
  <!-- within the schema. The "use"-attribut of xs:attributes for exact the same element cannot differ -->
  <!-- based on whether a specific attribute is present or not. -->
  <xs:element name="exception" type="prop:exceptionType"/>
  <xs:complexType name="exceptionType">
    <xs:attribute name="type" use="required"/>
    <xs:attribute name="forward" type="xs:boolean" use="required"/>
    <xs:attribute name="page" use="required"/>
    <xs:attribute name="processor"/>
  </xs:complexType>
  <!-- </exception> -->

  <!-- <properties> -->
  <xs:element name="properties" type="prop:propertiesType"/>
  <xs:complexType name="propertiesType">
    <xs:sequence>
      <xs:choice minOccurs="1" maxOccurs="unbounded">
        <xs:element ref="prop:prop"/>
        <xs:element ref="prop:choose"/>
        <xs:element ref="prop:config-include"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="prop" type="prop:propType"/>
  <xs:complexType name="propType" mixed="true">
    <xs:sequence>
      <!-- allow <cus:fqdn/> etc -->
      <xs:any namespace="http://www.schlund.de/pustefix/customize" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="name" use="required"/>
  </xs:complexType>

  <xs:element name="choose" type="prop:chooseType"/>
  <xs:complexType name="chooseType">
    <xs:sequence>
      <xs:element name="when" minOccurs="1" maxOccurs="unbounded">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="prop:prop"/>
              <xs:element ref="prop:config-include"/>
            </xs:choice>
          </xs:sequence>
          <xs:attribute name="test" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="otherwise" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="prop:prop"/>
              <xs:element ref="prop:config-include"/>
            </xs:choice>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!-- </properties> -->



  <xs:element name="directoutputserver" type="prop:directoutputserverType"/>
  <xs:complexType name="directoutputserverType">
    <xs:sequence>
      <xs:element name="directoutputservletinfo" type="prop:directoutputserverservletinfoType"/>
      <xs:element ref="prop:foreigncontext"/>
      <xs:element ref="prop:authconstraint" minOccurs="0"/>
      <xs:element name="config-include" type="prop:directOutputConfigIncludeType" />
      <xs:element ref="prop:directoutputpagerequest" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="prop:properties" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="version" type="xs:token" use="required"/>
  </xs:complexType>

  <xs:element name="foreigncontext" type="prop:foreigncontextType"/>
  <xs:complexType name="foreigncontextType">
    <xs:attribute name="externalservletname"/>
  </xs:complexType>

  <xs:element name="authconstraint" substitutionGroup="prop:abstractcondition">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="prop:abstractconditionType">
          <xs:attribute name="ref" type="xs:string"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="directoutputpagerequest" type="prop:directoutputpagerequestType"/>
  <xs:complexType name="directoutputpagerequestType">
    <xs:sequence>
      <xs:element ref="prop:directoutputstate"/>
      <xs:element ref="prop:authconstraint" minOccurs="0"/>
      <xs:element ref="prop:properties" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="name" use="required"/>
  </xs:complexType>

  <xs:element name="directoutputstate" type="prop:directoutputstateType"/>
  <xs:complexType name="directoutputstateType">
    <xs:attribute name="class"/>
  </xs:complexType>


  <xs:element name="standardprops" type="prop:standardpropsType"/>
  <xs:complexType name="standardpropsType">
    <xs:sequence>
      <xs:element ref="prop:properties" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="version" type="xs:token" use="required"/>
  </xs:complexType>

  <xs:element name="config-include" type="prop:configIncludeType"/>
  <xs:complexType name="configIncludeType">
    <xs:attribute name="file" type="xs:string" use="required"></xs:attribute>
    <xs:attribute name="section" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="navigation"/>
          <xs:enumeration value="targets"/>
          <xs:enumeration value="resources"/>
          <xs:enumeration value="pageflows"/>
          <xs:enumeration value="pagerequests"/>
          <xs:enumeration value="properties"/>
          <xs:enumeration value="interceptors"/>
          <xs:enumeration value="roles"/>
          <xs:enumeration value="scriptedflows"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="refid" type="xs:NCName" use="optional"></xs:attribute>
    <xs:attribute name="xpath" type="xs:string" use="optional"></xs:attribute>
  </xs:complexType>

  <xs:complexType name="directOutputConfigIncludeType">
    <xs:attribute name="file" type="xs:string" use="required"></xs:attribute>
    <xs:attribute name="section" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="directoutputpagerequests"/>
          <xs:enumeration value="properties"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="refid" type="xs:NCName" use="optional"></xs:attribute>
    <xs:attribute name="xpath" type="xs:string" use="optional"></xs:attribute>
  </xs:complexType>

  <!--
  <xs:group name="cuspagerequestGroup">
    <xs:choice>
      <xs:element ref="prop:pagerequest"/>
      <xs:element name="cuschoose">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="custest" minOccurs="1" maxOccurs="unbounded">
              <xs:complexType>
                <xs:complexContent>
                  <xs:extension base="prop:custestType">
                     <xs:sequence>
                       <xs:element ref="prop:pagerequest"/>
                     </xs:sequence>
                  </xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:element name="pagerequest" type="prop:pagerequestType"/>
  <xs:complexType name="pagerequestType">
    <xs:attribute name="name" use="required"></xs:attribute>
    <xs:attribute name="nostore" type="xs:boolean"></xs:attribute>
    <xs:attribute name="copyfrom"></xs:attribute>
  </xs:complexType>
  -->






  <!--
  <xs:element name="servletinfo" type="prop:servletinfoCuschooseType"></xs:element>
  <xs:complexType name="servletinfoCuschooseType">
    <xs:complexContent></xs:complexContent>
  </xs:complexType>
  <xs:complexType name="servletinfoCustestType">
    <xs:complexContent>
      <xs:extension base="custestType">
        <xs:sequence>
          <xs:element ref="prop:editmode"/>
          <xs:element ref="prop:ssl" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="editmodeCusType">
    <xs:complexContent>
      <xs:extension base="cus:testType">
        <xs:sequence>
          <xs:element name="editmode" type="prop:editmodeType"></xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  -->


  <!--
  <xs:complexType name="cuseditmodeType">
    <xs:choice>
      <xs:element name="editmode" type="prop:editmodeType"/>
      <xs:element name="cus:test">
      </xs:element>
    </xs:choice>
  </xs:complexType>
  -->


</xs:schema>
