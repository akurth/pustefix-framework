<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "ant.dtd">
<!-- ant.dtd is generated by target dtd. This is not done automatically.
     If any problems arise either regenerate ant.dtd by invoking ant dtd
     or delete the DOCTYPE definition -->

<project name="pfixcore" default="all" basedir=".">

    <!-- set global properties for this build -->

    <property file="build.properties"/>
    <property environment="env"/>
    <property name="project.name"           value="pfixcore"/>
    <property name="project.version"        value="0.5.4-pre3" description="the version to use for pfixcore-*.jar and pfixcore-data-*.jar"/>
    <property name="uid"                    value="${env.USER}"/>
    <property name="build.compiler"         value="jikes"/>
    <property name="build.compiler.emacs"   value="true"/>
    <property name="javac.source"           value="1.4"/>
    <property name="name.cvsautotag"        value="CVS_AUTOTAG"/>
    <property name="debugopts"              value="-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5000"/>
    <property name="gen"                    value="**/depend.xml"/>
    <property name="dir.src"                location="src"/>
    <property name="dir.build"              location="build"/>
    <property name="dir.lib"                location="lib"/>
    <property name="dir.res"                location="res"/>
    <property name="dir.dist"               location="dist"/>
    <property name="dir.skel"               location="skel"/>
    <property name="dir.javadoc"            location="docs/api"/>
    <property name="dir.jni"                location="jni"/>
    <property name="dir.metainf"            location="META-INF"/>
    <property name="dir.projects"           location="example"/>
    <property name="dir.docroot"            location="${dir.projects}" description="document root for tomcat, defaults to dir.projects"/>
    <property name="file.projects_xml"      location="${dir.projects}/servletconf/projects.xml"/>
    <property name="genlog"                 value="quiet" description="which log4j config to use for the generate task; currently one of quiet, full, tree; defaults to quiet; see ${dir.projects}/core/conf/generator_*.xml"/>
    <property name="file.log4jconfig"       location="${dir.projects}/core/conf/generator_${genlog}.xml"/>
    <property name="name.jnipkg"            value="jni.tar.gz"/>
    <property name="file.jnipkg"            location="${dir.jni}/${name.jnipkg}"/>
    <property name="name.testskel"          value="testskel"/>
    <property name="dir.testskel"           location="${name.testskel}"/>
    <property name="name.pfixcore_jar"      value="${project.name}-${project.version}.jar"/>
    <property name="file.pfixcore_jar"      location="${dir.dist}/${name.pfixcore_jar}"/>
    <property name="name.pfixcore_data_tgz" value="${project.name}-data-${project.version}.tar.gz"/>
    <property name="file.pfixcore_data_tgz" location="${dir.dist}/${name.pfixcore_data_tgz}"/>
    <property name="name.pfixcore_skel_tgz" value="${project.name}-skel-${project.version}.tar.gz"/>
    <property name="file.pfixcore_skel_tgz" location="${dir.dist}/${name.pfixcore_skel_tgz}"/>
    
    <target name="properties">
        <!-- Ant properties are immutable, the order of definition is:
        - ant commandline via the '-Dparam=value' option
        - file build.properties in java.util.Properties format
        - environment variable MAKE_MODE, e.g. export MAKE_MODE=test
        -->
        <condition property="makemode" value="${env.MAKE_MODE}">
            <and>
                <isset property="env.MAKE_MODE"/>
                <not><equals arg1="${env.MAKE_MODE}" arg2=""/></not>
            </and>
        </condition>
        <fail unless="makemode" message="Property &quot;makemode&quot; not set or empty. This property specifies whether the pustefix system is built and run in development mode (makemode=test) or production mode (makemode=prod). Specify propery either on the commandline (E.g. ant -Dmakemode=test or with the environment variable MAKE_MODE. See ant -projecthelp for more details." />

        <condition property="javahome" value="${env.PFX_JAVA_HOME}">
            <and>
                <isset property="env.PFX_JAVA_HOME"/>
                <not><equals arg1="${env.PFX_JAVA_HOME}" arg2=""/></not>
            </and>
        </condition>
        <condition property="javahome" value="${env.JAVA_HOME}">
            <and>
                <isset property="env.JAVA_HOME"/>
                <not><equals arg1="${env.JAVA_HOME}" arg2=""/></not>
            </and>
        </condition>
        <fail unless="javahome" message="Property &quot;javahome&quot; not set. This property is used to create projects/servletconf/tomcat/workers.prop. Set environment variable JAVA_HOME to point to the root directory of the Java2 Standard Edition installation you wish to use."/>
        
        <condition  property="prohibitedit" value="yes">
            <equals arg1="${makemode}" arg2="prod"/>
        </condition>
        <property       name="prohibitedit" value="no"/>
        
        <condition property="debug"        value="false">
            <equals arg1="${makemode}" arg2="prod"/>
        </condition>
        <property  name="debug"            value="true"/>
        
        <condition property="machine"       value="${env.MACHINE}">
            <and>
                <isset property="env.MACHINE"/>
                <not><equals arg1="${env.MACHINE}" arg2=""/></not>
            </and>
        </condition>
        <exec outputproperty="machine" executable="hostname" os="Linux"><arg value="-s"/></exec>
        <fail message="Property &quot;machine&quot; not set. Either set environment variable MACHINE or property machine to the localpart of your fully qualified hostname." unless="machine"/>

        <exec outputproperty="dnsdomainname"    executable="hostname" os="Linux"><arg value="-d"/></exec>
        <condition property="fqdn"     value="${machine}.${dnsdomainname}">
            <isset property="dnsdomainname"/>
        </condition>
        <condition property="fqdn"     value="${machine}">
            <not><isset property="dnsdomainname"/></not>
        </condition>

        <!-- Create time stamp in ISO 8601 alike format.
        17th September 2003 11:58:23 formats to AUTO_TAG_2003-09-17-115823 in property -->
        <tstamp><format property="tstamp.autotag" pattern="'AUTO_TAG_'yyyy'-'MM'-'dd'-'HHmmss"/></tstamp>
    </target>
    
    <path id="cp.classpath">
        <fileset dir="${dir.lib}" includes="*.jar"/>
        <fileset dir="${dir.projects}" includes="servletconf/tomcat/common/lib/servlet.jar"/>
        <pathelement location="${dir.build}"/>
        <pathelement location="${dir.res}"/>
    </path>
    
    <target name="init" depends="properties">
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.dist}"/>
        <echo message="using machine=${machine} fqdn=${fqdn}" level="verbose"/>
        <!-- pathconvert dumps classpath on ant -verbose -->
        <pathconvert property="dev.null" refid="cp.classpath" pathsep="&#013;"/>
    </target>
    
    <target name="noop" description="just prints the name of the project">
        <echo message="${project.name}"/>
    </target>
    
    <target name="echoproperties" depends="properties">
        <echoproperties/>
    </target>
    
    <target name="debug" depends="all" description="builds all and runs tomcat with debugging options">
        <!-- added suspend=n to default debugging option, as without this option
        Ctrl-C would not stop tomcat without leaving java processes hanging around
        suspend=y target VM is to be suspended immediately before the main class is loaded
        suspend=n do not suspend target VM
        see http://java.sun.com/j2se/1.4.2/docs/guide/jpda/conninv.html -->
        <antcall target="_run" inheritall="true">
            <param name="run.debugopts" value="${debugopts}"/>
        </antcall>
    </target>
    
    <target name="run" depends="all" description="builds all and runs tomcat">
        <antcall target="_run" inheritall="true">
            <param name="run.debugopts" value=""/>
        </antcall>
    </target>
    
    <target name="_run">
        <property name="run.debugopts" value=""/>
        <path id="run.path.ld_library_path">
            <pathelement path="${env.LD_LIBRARY_PATH}"/>
            <pathelement location="${dir.jni}/build"/>
        </path>
        <property name="run.ld_library_path" refid="run.path.ld_library_path"/>
        <exec dir="${dir.projects}/servletconf/tomcat" executable="${dir.projects}/servletconf/tomcat/bin/catalina.sh" vmlauncher="false">
            <env key="LD_LIBRARY_PATH" value="${run.ld_library_path}"/>
            <env key="JAVA_OPTS" value="-mx200M ${run.debugopts}"/>
            <env key="JSSE_HOME" value="${basedir}/lib/jsse"/>
            <env key="LANG" value="C"/>
            <arg line="run"/>
        </exec>
    </target>
    
    <target name="generate" depends="targetdefs, stylesheets, compile, installjars, check-permissions" description="Generates Targets to ${dir.projects}/.cache">
        <pfx-generate dir="${dir.projects}" includes="${gen}" log4jconfig="${file.log4jconfig}" excludes="${excludes.projects}"/>
        <echo message="If build dies with an OutOfMemoryException, set and export environment variable ANT_OPTS to something like ANT_OPTS=&quot;-ms200m -mx200m&quot;."/>
    </target>

    <target name="all" 
        depends="compile, installjars, propfiles, targetdefs, web_xml, stylesheets, pfixlog_xml, products_prj, apache_conf, jk_conf, workers_prop, server_xml, statusmessages_xml, check-permissions"
        description="builds all files required to run"
        />    

    <target name="depend" depends="generate-src, jni" description="checks dependencies of all .java files">
        <depend
            srcdir="${dir.src}"
            destdir="${dir.build}"
            cache="${dir.build}"
            >
        </depend>
    </target>

    <target name="build-include-available">
        <available file="${file.build-include}" property="avl.build-include"/>
    </target>

    <target name="clean-build-include" depends="build-include-available" if="avl.build-include">
        <ant antfile="${file.build-include}" target="clean"/>
    </target>
    
    <target name="pre-compile" depends="build-include-available" if="avl.build-include">
        <echo message="Calling target pre-compile in ${name.build-include}"/>
        <ant antfile="${file.build-include}" target="pre-compile"/>
    </target>

    <target name="generate-src" depends="ant-tasks, pre-compile" description="generates interfaces wrappers by transforming .iwrp to .java files">
        <pfx-iwrp srcdir="${dir.src}" includes="**/*.iwrp" destdir="${dir.src}" extension=".java" style="${dir.projects}/core/build/iwrapper.xsl" excludes="${excludes.src}"/>
    </target>
    
    <target name="compile" depends="generate-src, jni, depend, pre-compile" description="compiles all .java files">
        <javac
            srcdir="${dir.src}"
            destdir="${dir.build}"
            debug="${debug}"
            classpathref="cp.classpath"
            source="${javac.source}"
            excludes="${excludes.src}"
            >
        </javac>
    </target>
    
    <target name="post-compile" depends="build-include-available, compile" if="avl.build-include">
        <echo message="Calling target post-compile in ${name.build-include}"/>
        <ant antfile="${file.build-include}" target="post-compile"/>
    </target>

    <target name="jni" depends="init, init-compile">
        <ant dir="${dir.jni}"/>
    </target>

    <target name="clean-jni">
        <ant dir="${dir.jni}" target="clean"/>
    </target>
    
    <target name="dist-jni">
        <ant dir="${dir.jni}" target="dist"/>
    </target>
    
    <target name="doc" depends="clean-doc, properties" description="generates javadoc">
        <mkdir dir="${dir.javadoc}"/>
        <javadoc
            source="${javac.source}"
            sourcepath="${dir.src}"
            destdir="${dir.javadoc}"
            version="true"
            author="true"
            windowtitle="de.schlund ${project.name}"
            doctitle="&lt;h3&gt;Last update: ${DSTAMP} ${TSTAMP}&lt;/h3&gt;"
            maxmemory="128m"
            classpathref="cp.classpath"
            >
            <packageset dir="${dir.src}"/>
        </javadoc>
    </target>

    <target name="clean-doc">
        <delete dir="${dir.javadoc}"/>
    </target>


    <target name="installjars">
        <!-- Setting absolute links instead of relative to avoid extra property for dir.build 
        as ${dir.build} is specified as location it always resolves to an absolute path;
        does not work for filenames containing spaces -->
        <echo level="verbose" message="Setting symlink to ${dir.build}/de in ${dir.projects}/servletconf/tomcat/shared/classes"/>
        <mkdir dir="${dir.projects}/servletconf/tomcat/shared/classes"/>
        <exec executable="sh">
            <arg line="-c &quot;test ! -L ${dir.projects}/servletconf/tomcat/shared/classes/de &amp;&amp; ln -s  ${dir.build}/de ${dir.projects}/servletconf/tomcat/shared/classes/de || true&quot;"/>
        </exec>
        <!-- As task delete does not delete symbolic links, deleting symlinks using native tools. -->
        <!-- Deleting symlinks pointing to non existent files, assuming jar files -->
        <!-- replaced by new versions (with new filenames) do not exist anymore -->
        <exec executable="find" os="Linux">
            <arg file="${dir.projects}/servletconf/tomcat/shared/lib"/>
            <arg line="-iname *.jar -a -type l -exec rm -v {} ;"/>
        </exec>
        <!-- As version might have been updated,
             delete all *-res.jar files but the current *-res.jar version -->
        <delete>
            <fileset
                dir="${dir.projects}/servletconf/tomcat/shared/lib"
                includes="*-res.jar"
                excludes="${project.name}-${project.version}-res.jar"
            />
        </delete>
        <echo level="verbose">Building ${project.name}-${project.version}-res.jar in tomcat's lib directory</echo>
        <jar jarfile="${dir.projects}/servletconf/tomcat/shared/lib/${project.name}-${project.version}-res.jar">
            <fileset dir="${basedir}" includes="META-INF/**"/>
            <fileset dir="${dir.res}"/>
        </jar>
        <echo level="verbose">Creating symlinks in tomcat's lib directory</echo>
        <exec executable="sh">
            <arg line="-c &quot;cd ${dir.projects}/servletconf/tomcat/shared/lib &amp;&amp; for i in ${dir.lib}/*.jar ; do test -L $(basename $i) || ln -s $i . ; done&quot;"/>
        </exec>
     </target>
    
    <target name="init-compile" depends="init" description="compiles java files needed by ant-tasks and jni">
        <javac 
            srcdir="${dir.src}"
            destdir="${dir.build}"
            includes="de/schlund/pfixcore/util/Xslt*.java, de/schlund/pfixcore/util/*Task.java, de/schlund/pfixxml/loader/ObjectBuilder.java"
            debug="${debug}"
            classpathref="cp.classpath"
            sourcepath="${dir.src}"
            >
        </javac>
    </target>

    <target name="ant-tasks" depends="init, init-compile" description="declares the ant task used for generating java source code. This target needs to be run prior to the actual compile.">
        <taskdef
            name="pfx-xslt"
            classname="de.schlund.pfixcore.util.XsltGenericTask"
            classpathref="cp.classpath"
            loaderref="pfx-loader"
            description="Performs generic XSLT transformations"
            />
        <taskdef 
            name="pfx-iwrp"
            classname="de.schlund.pfixcore.util.XsltIWrapperTask"
            classpathref="cp.classpath"
            loaderref="pfx-loader"
            description="Generates .java files out of .iwrp (Interface Wrapper) files"
            />
        <taskdef
            name="pfx-webxml"
            classname="de.schlund.pfixcore.util.XsltWebXmlTask"
            classpathref="cp.classpath"
            loaderref="pfx-loader"
            description="Creates WEB-INF/web.xml config files for each project"
            />
        <taskdef
            name="pfx-generate"
            classname="de.schlund.pfixcore.util.TargetGeneratorTask"
            classpathref="cp.classpath"
            loaderref="pfx-loader"
            description="Creates dependencies in ${dir.projects}/.cache"
            />
    </target>

    <target name="dtd" depends="dtd-check, ant-tasks" unless="upd.dtd" description="creates a DTD for this build file">
        <!-- DTD generated does not describe this build file thorough. It can't be used 
             for complete validation though it may be useful for auto competion within IDEs.
             The Element not generated is the nested type "param" used within the custom ant-tasks -->
        <echo message="Creating ant.dtd" level="info"/>
        <antstructure output="ant.dtd"/>
    </target>
    
    <target name="dtd-check" unless="pfx.force">
        <uptodate property="upd.dtd" srcfile="build.xml" targetfile="ant.dtd"/>
    </target>
    
    <target name="clean-dtd">
        <delete file="ant.dtd"/>
    </target>

    <target name="clean" depends="clean-project" description="deletes ${dir.build}, ${dir.dist} directory trees and all .java files generated from .iwrp files in ${dir.src}">
        <!-- Delete ${dir.build}, ${dir.dist} directory trees and all .java files generated from .iwrp files in ${dir.src} -->
        <delete dir="${dir.build}"/>
        <delete dir="${dir.dist}"/>
        <!-- Delete *.java files created from *.iwrp files -->
        <delete>
            <fileset dir="${dir.src}" includes="**/*.java">
                <present present="both" targetdir="${dir.src}">
                    <mapper type="glob" from="*.java" to="*.iwrp"/>
                </present>
            </fileset>
        </delete>
        <!-- as task delete does not delete symbolic links, deleting symlinks using native tools -->
        <exec executable="find" os="Linux">
            <arg file="${dir.projects}/servletconf/tomcat/shared/classes"/> <!-- symlink de -->
            <arg file="${dir.projects}/servletconf/tomcat/shared/lib"/> <!-- symlinks *.jar -->
            <arg line="-type l -maxdepth 1 -exec rm {} ;"/>
        </exec>
        <!-- delete regular files using task delete -->
        <delete>
            <fileset dir="${dir.projects}/servletconf/tomcat/shared/lib" includes="*.jar"/>
        </delete>
        <delete file="${dir.metainf}/${name.cvsautotag}"/>
    </target>
    
    <target name="clean-project" description="deletes files from ${dir.projects}">
        <!-- Delete ${dir.build}, ${dir.dist} directory trees and all .java files generated from .iwrp files in ${dir.src} -->
        <delete>
            <fileset dir="${dir.projects}" includes="**/*.xsl">
                <present present="both" targetdir="${dir.projects}">
                    <mapper type="glob" from="*.xsl" to="*.xsl.in"/>
                </present>
            </fileset>
            <fileset dir="${dir.projects}" includes="**/depend.xml">
                <present present="both" targetdir="${dir.projects}">
                    <mapper type="glob" from="*depend.xml" to="*depend.xml.in"/>
                </present>
            </fileset>
            <fileset dir="${dir.projects}" includes="**/*.prop">
                <present present="both" targetdir="${dir.projects}">
                    <mapper type="glob" from="*.prop" to="*.prop.in"/>
                </present>
            </fileset>
            <fileset dir="${dir.projects}" includes="common/conf/products.prj common/conf/pfixlog.xml servletconf/projects.xml servletconf/tomcat/apache.conf servletconf/tomcat/jk.conf servletconf/tomcat/workers.prop servletconf/tomcat/conf/server.xml"/>            
        </delete>
        <delete dir="${dir.projects}/servletconf/tomcat/webapps"/>
    </target>
    
    <target name="realclean" depends="clean, clean-jni, clean-doc">
        <delete dir="${dir.projects}/.cache"/>
        <delete dir="${dir.testskel}"/>
    </target>

    <target name="dist" depends="clean, init">
        <property name="dist.autotagmessage" value="${tstamp.autotag}"/>
        <!-- looks funny, but if someone called something like
        "ant jar dist" the jar file would have a wrong CVS_AUTOTAG file -->
        <antcall target="skeleton" inheritall="true">
            <param name="autotagmessage" value="${dist.autotagmessage}"/>
        </antcall>
        <cvs command="tag ${dist.autotagmessage}"/>
    </target>

    <target name="notag" depends="clean">
        <antcall target="skeleton" inheritall="true"/>
    </target>

    <target name="fixtabs">
        <fixcrlf srcdir="${basedir}" includes="build.xml, skel/build.xml, jni/build.xml" tab="remove" tablength="4"/>
    </target>

    <target name="skeleton" depends="ant-tasks, fixtabs, compile, jar, data">
        <echo message="Building ${name.pfixcore_skel_tgz} in dist directory"/>
        <tar destfile="${file.pfixcore_skel_tgz}" compression="gzip">
            <tarfileset dir="${dir.skel}" prefix="skel"/>
            <tarfileset dir="${dir.metainf}" includes="${name.cvsautotag}" prefix="skel"/>
            <tarfileset dir="${dir.lib}" includes="*.jar" prefix="skel/lib"/>
            <tarfileset dir="${dir.dist}" includes="${name.pfixcore_jar}" prefix="skel/lib"/>
            <tarfileset dir="${dir.dist}" includes="${name.pfixcore_data_tgz}" prefix="skel/lib"/>
            <tarfileset dir="${dir.projects}/servletconf/tomcat" includes="bin/**, common/**, server/**" prefix="skel/projects/servletconf/tomcat"/>
            <tarfileset dir="${basedir}" includes="ant.dtd" prefix="skel"/>
            <tarfileset dir="${basedir}" includes="INSTALL" prefix="skel"/>
        </tar>
    </target>    

    <target name="data" depends="init, stylesheets, autotag">
        <echo message="Building ${name.pfixcore_data_tgz} in dist directory" />
        <copy file="${dir.metainf}/${name.cvsautotag}" tofile="${dir.projects}/core/${name.cvsautotag}"/>
        <tar destfile="${file.pfixcore_data_tgz}" compression="gzip">
            <tarfileset dir="${dir.projects}/core" prefix="core"/>
        </tar>
        <delete file="${dir.projects}/core/${name.cvsautotag}"/>
    </target>

    <target name="jar" depends="autotag, dist-jni">
        <mkdir dir="${dir.dist}" description="creates ${name.pfixcore_jar}"/>
        <jar destfile="${file.pfixcore_jar}">
            <fileset dir="${basedir}" includes="META-INF/**"/>
            <fileset dir="${dir.build}"/>
            <fileset dir="${dir.res}"/>
            <fileset dir="${dir.jni}" includes="${name.jnipkg}"/>
        </jar>
    </target>
    
    <target name="autotag" depends="init">
        <!-- property gets overridden when calling target dist -->
        <property name="autotagmessage" value="${tstamp.autotag} (not tagged in cvs)"/>
        <!-- make echo insert a newline into the file with &#010; -->
        <echo file="${dir.metainf}/${name.cvsautotag}" message="${autotagmessage}&#010;"/>
    </target>
    
    <target name="test-skeleton" description="extracts skel.jar, copies sample files, runs ant">
        <delete dir="${dir.testskel}"/>
        <mkdir dir="${dir.testskel}"/>
        <untar src="${file.pfixcore_skel_tgz}" dest="${dir.testskel}" compression="gzip"/>
        <copy todir="${dir.testskel}/skel/src">
            <fileset dir="${dir.src}" includes="de/schlund/pfixcore/example/**"/>
        </copy>
        <!-- Copying over sample application for testing purposes -->
        <copy todir="${dir.testskel}/skel/projects">
            <fileset dir="${dir.projects}" includes="sample1/**"/>
        </copy>
        <!-- DocumentRoot for sample application, apache fails to start without -->
        <mkdir dir="${dir.testskel}/skel/projects/htdocs"/>
        <exec dir="${dir.testskel}/skel" executable="ant" failonerror="true">
        </exec>
    </target>

    <target name="check-permissions">
        <apply executable="chmod" os="Linux">
            <arg line="a+x"/>
            <fileset dir="${basedir}" includes="apploader.sh startTomcat.sh bin/setClassPath.sh projects/bin/setvars.sh projects/servletconf/tomcat/bin/catalina.sh projects/servletconf/tomcat/bin/setclasspath.sh example/checkfiles.sh example/servletconf/tomcat/bin/catalina.sh example/servletconf/tomcat/bin/setclasspath.sh"/>
        </apply>
    </target>
    
    <target name="force" description="disables uptodate checks">
        <!-- All targets *-check that have set the attribute unless="pfx.force"
             will be skipped, so the uptodate properties (upd.*), the execution of the actual tasks
             depends on, do not get set and in turn the actual tasks get executed. -->
        <property name="pfx.force" value="true"/>
    </target>
    
    <target name="checkfiles">
        <!-- find the input files and write them to line separated files -->
        <pathconvert property="checkfiles.ALLPROJECTS" pathsep="&#10;">
            <path>
                <fileset dir="${dir.projects}">
                    <include name="**/depend.xml"/>
                </fileset>
            </path>
            <map from="${dir.projects}/" to=""/>
        </pathconvert>
        <echo message="${checkfiles.ALLPROJECTS}" file="${dir.projects}/.ALLPROJECTS"/>
        <pathconvert property="checkfiles.ALLINCFILES" pathsep="&#10;">
            <path>
                <fileset dir="${dir.projects}" casesensitive="false">
                    <include name="**/txt/**/*.xml"/>
                </fileset>
            </path>
            <map from="${dir.projects}/" to=""/>
        </pathconvert>
        <echo message="${checkfiles.ALLINCFILES}" file="${dir.projects}/.ALLINCFILES"/>
        <pathconvert property="checkfiles.ALLIMAGES" pathsep="&#10;">
            <path>
                <fileset dir="${dir.projects}" casesensitive="false">
                    <include name="**/img/**/*.gif" />
                    <include name="**/img/**/*.jp*g"/>
                </fileset>
            </path>
            <map from="${dir.projects}/" to=""/>
        </pathconvert>
        <echo message="${checkfiles.ALLIMAGES}" file="${dir.projects}/.ALLIMAGES"/>
        <!-- we must fork a java vm here to set the current dir -->
        <java
            classname="de.schlund.pfixcore.util.CheckIncludes"
            classpathref="cp.classpath"
            dir="${dir.projects}"
            fork="true"
            failonerror="true"
            >
            <arg file="${dir.projects}/CHECKOUTPUT.xml"/>
            <arg file="${dir.projects}/.ALLPROJECTS"/>
            <arg file="${dir.projects}/.ALLINCFILES"/>
            <arg file="${dir.projects}/.ALLIMAGES"/>
        </java>
        <echo message="Output written to ${dir.projects}/CHECKOUTPUT.xml" level="info"/>
    </target>    

    <target name="propfiles" depends="ant-tasks" description="creates **/*.prop">
        <pfx-xslt 
            style="${dir.projects}/core/build/create_propfiles.xsl"
            srcdir="${dir.projects}"
            destdir="${dir.projects}"
            includes="**/*.prop.in"
            extension=""
            >
            <param name="docroot" expression="${dir.docroot}"/>
            <param name="fqdn"    expression="${fqdn}"/>
            <param name="uid"     expression="${uid}"/>
            <param name="machine" expression="${machine}"/>
            <param name="mode"    expression="${makemode}"/>
        </pfx-xslt>
    </target>

    <target name="targetdefs" depends="ant-tasks" description="creates **/depend.xml">
        <pfx-xslt 
            style="${dir.projects}/core/build/create_depend.xsl"
            srcdir="${dir.projects}"
            destdir="${dir.projects}"
            includes="**/depend.xml.in"
            extension=""
            >
            <param name="prohibitEdit" expression="${prohibitedit}"/>
            <param name="docroot" expression="${dir.docroot}"/>
        </pfx-xslt>
    </target>
    
    <target name="projects_xml" depends="ant-tasks" description="creates projects.xml out of projects.xml.in and multiple project.xml files" >
        <fileset id="id.fileset.projectxmlin" dir="${dir.projects}" includes="**/project.xml.in"/>
        <pathconvert property="projectxmlins" refid="id.fileset.projectxmlin" pathsep="|">
            <map from="${dir.projects}/" to=""/>
        </pathconvert>
        <echo level="verbose" message="**/project.xml.in matches ${projectxmlins}"/>
        <dependset>
            <srcfileset refid="id.fileset.projectxmlin"/>
            <targetfileset dir="${dir.projects}/servletconf" includes="projects.xml"/>
        </dependset>
        <pfx-xslt
            style="${dir.projects}/core/build/create_projects.xsl"
            srcdir="${dir.projects}"
            destdir="${dir.projects}"
            includes="servletconf/projects.xml.in"
            >
            <param name="docroot" expression="${dir.docroot}"/>
            <param name="files"   expression="${projectxmlins}"/>
        </pfx-xslt>
    </target>

    <target name="web_xml" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/webapps/**/WEB-INF/web.xml">
        <!-- old target name in Makefile was "zoneprops" -->
        <pfx-webxml
            style="${dir.projects}/core/build/create_tomcatweb.xsl"
            srcdir="${dir.projects}"
            destdir="${dir.projects}/servletconf/tomcat"
            includes="servletconf/projects.xml"
            extension=".xml"
            >
            <param name="docroot" expression="${dir.docroot}"/>
            <param name="fqdn"    expression="${fqdn}"/>
            <param name="uid"     expression="${uid}"/>
            <param name="machine" expression="${machine}"/>
            <param name="mode"    expression="${makemode}"/>
        </pfx-webxml>
    </target>
    
    <target name="stylesheets" depends="ant-tasks" description="creates **/*.xsl from **/*.xsl.in with create_stylesheet.xsl">
        <pfx-xslt
            style="${dir.projects}/core/build/create_stylesheet.xsl"
            srcdir="${dir.projects}"
            destdir="${dir.projects}"
            includes="**/*.xsl.in"
            extension=""
            >
            <param name="docroot" expression="${dir.docroot}"/>
            <param name="fqdn"    expression="${fqdn}"/>
            <param name="uid"     expression="${uid}"/>
            <param name="machine" expression="${machine}"/>
            <param name="mode"    expression="${makemode}"/>
        </pfx-xslt>
    </target>
    
    <target name="statusmessages_xml" depends="compile, propfiles" description="creates common/dyntxt/statusmessages.xml">
        <java classname="de.schlund.pfixcore.util.MakeStatusMessageXML">
            <sysproperty key="propertyfile" value="${dir.projects}/common/conf/factory.prop"/>
            <arg value="${dir.projects}/common/dyntxt/statusmessages.xml"/>
            <classpath refid="cp.classpath"/>
        </java>
    </target>

    <target name="pfixlog_xml" depends="ant-tasks" description="creates common/conf/pfixlog.xml from common/conf/pfixlog.xml.in with core/build/create_log4j_config.xsl">
        <pfx-xslt
            style="${dir.projects}/core/build/create_log4j_config.xsl"
            srcdir="${dir.projects}"
            destdir="${dir.projects}"
            includes="common/conf/pfixlog.xml.in"
            extension=""
            >
            <param name="docroot" expression="${dir.docroot}"/>
            <param name="fqdn"    expression="${fqdn}"/>
            <param name="uid"     expression="${uid}"/>
            <param name="machine" expression="${machine}"/>
            <param name="mode"    expression="${makemode}"/>
        </pfx-xslt>
    </target>
    
    <target name="products_prj" depends="ant-tasks, projects_xml" description="creates common/conf/products.prj from servletconf/projects.xml with core/build/create_products.xsl">
        <pfx-xslt
            infile="${dir.projects}/servletconf/projects.xml"
            outfile="${dir.projects}/common/conf/products.prj"
            style="${dir.projects}/core/build/create_products.xsl"
            >
            <param name="docroot"   expression="${dir.docroot}"/>
            <param name="fqdn"      expression="${fqdn}"/>
            <param name="uid"       expression="${uid}"/>
            <param name="machine"   expression="${machine}"/>
            <param name="mode"      expression="${makemode}"/>
            <param name="container" expression="tomcat"/>
        </pfx-xslt>
    </target>

    <target name="apache_conf" depends="ant-tasks, projects_xml" description="creates common/conf/products.prj from servletconf/projects.xml with core/build/create_apacheconf.xsl">
        <pfx-xslt
            infile="${dir.projects}/servletconf/projects.xml"
            outfile="${dir.projects}/servletconf/tomcat/apache.conf"
            style="${dir.projects}/core/build/create_apacheconf.xsl"
            >
            <param name="docroot"   expression="${dir.docroot}"/>
            <param name="fqdn"      expression="${fqdn}"/>
            <param name="uid"       expression="${uid}"/>
            <param name="machine"   expression="${machine}"/>
            <param name="mode"      expression="${makemode}"/>
            <param name="container" expression="tomcat"/>
        </pfx-xslt>
    </target>

    <target name="jk_conf" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/jk.conf from servletconf/projects.xml with core/build/create_jkconf.xsl">
        <pfx-xslt
            infile="${dir.projects}/servletconf/projects.xml"
            outfile="${dir.projects}/servletconf/tomcat/jk.conf"
            style="${dir.projects}/core/build/create_jkconf.xsl"
            >
            <param name="docroot"   expression="${dir.docroot}"/>
            <param name="fqdn"      expression="${fqdn}"/>
            <param name="uid"       expression="${uid}"/>
            <param name="machine"   expression="${machine}"/>
            <param name="mode"      expression="${makemode}"/>
            <param name="container" expression="tomcat"/>
        </pfx-xslt>
    </target>
    
    <target name="workers_prop" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/workers.prop from servletconf/projects.xml with core/build/create_workersprop.xsl">
        <pfx-xslt
            infile="${dir.projects}/servletconf/projects.xml"
            outfile="${dir.projects}/servletconf/tomcat/workers.prop"
            style="${dir.projects}/core/build/create_workersprop.xsl"
            >
            <param name="docroot"   expression="${dir.docroot}"/>
            <param name="fqdn"      expression="${fqdn}"/>
            <param name="uid"       expression="${uid}"/>
            <param name="machine"   expression="${machine}"/>
            <param name="mode"      expression="${makemode}"/>
            <param name="java_home" expression="${javahome}"/>
            <param name="container" expression="tomcat"/>
        </pfx-xslt>
    </target>
    
    <target name="server_xml" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/conf/server.xml from servletconf/projects.xml with core/build/create_serverxml.xsl">
        <pfx-xslt
            infile="${dir.projects}/servletconf/projects.xml"
            outfile="${dir.projects}/servletconf/tomcat/conf/server.xml"
            style="${dir.projects}/core/build/create_serverxml.xsl"
            >
            <param name="docroot"   expression="${dir.docroot}"/>
            <param name="fqdn"      expression="${fqdn}"/>
            <param name="uid"       expression="${uid}"/>
            <param name="machine"   expression="${machine}"/>
            <param name="mode"      expression="${makemode}"/>
            <param name="container" expression="tomcat"/>
        </pfx-xslt>
    </target>
    
    <description>
Targets
-------
all [default]:  Builds all files required to run ./startTomcat.sh
generate-src:   Generates .java from .iwrp files
compile:        Compiles all java files.
generate:       Generates all top level targets to 
                ${dir.projects}/.cache
run/debug:      Runs tomcat. Advantage over ./startTomcat.sh:
                Ensures all files are build before
                starting tomcat. Drawback: As tomcat is started
                as an external process, there is one more java vm
                in memory, that does nothing but waiting for tomcat
                to exit.
checkfiles:     Searches .xml files for unused include parts and
                writes report to dir.projects/CHECKOUTPUT.xml
noop:           Echos the name of the project
clean:          Deletes files created by target all.
echoproperties: Dumps all properties and exits.
    
Properties
----------
-Dmakemode=
  value:       test|prod
               test: development mode, editing features enabled
               prod: production mode, editing features disabled
               Controls availablilty of editing features of the pustefix
               content management system:
               * the editor console, used for displaying information
                 and setting the page to editable
               * automatic regeneration of pages changend on disc
  environment: MAKE_MODE
  default:     -
  mandatory:   yes

-Djavahome=
  value:       location of the root directory of the j2se installation
               used for generation of
               ${dir.projects}/servletconf/tomcat/workers.prop
  environment: PFX_JAVA_HOME, JAVA_HOME
  default:     -         
  mandatory:   yes

-Dgen=
  value:       include pattern for searching depend.xml files
               for target generate. E.g. for generating only
               project1 and project2 use: ant
               -Dgen="project1/**/depend.xml, project2/**/depend.xml"
               For more info on pattern matching see
               http://ant.apache.org/manual/dirtasks.html#patterns
  environment: -
  default:     **/depend.xml
  mandatory:   no

-Dbuild.compiler=
  value:       jikes, modern, ...
               see http://ant.apache.org/manual/CoreTasks/javac.html
  environment: -
  default:     jikes         
  mandatory:   no

-Ddebugopts=
  value:       see java -X
  environment: -
  default:     ${debugopts}
  mandatory:   no

Note about Properties
---------------------
This build file defines several targets and properties. Targets
are a collection of actions, that may depend on the execution of
other targets and can be parametrized by setting properties.
Ant properties are immutable, so for customization of the build
process, knowledge about the order of definition is essential.
Order of definition:
1) Commandline. E.g. ant -Dproperty=value
2) If file ${basedir}/build.properties exists it is read
3) Environment variables are loaded as properties with prefix "env."
4) Target "properties": Many targets using properties depend on task
   "properties". Within this target, properties whose values depend on
   the values of other properties are defined.

    </description>    

</project>

<!-- Cut 'n' Paste "Buffer"
    <path id="cp.generator" description="// DELME">
        <pathelement location="${dir.build}"/>
        <fileset dir="${dir.lib}">
            <include name="log*.jar"/>
            <include name="util*.jar"/>
            <include name="jakarta-oro-*.jar"/>
            <include name="saxon*.jar"/>
            <include name="*.jar"/>
        </fileset>
    </path>
-->

<!--
Local Variables:
sgml-indent-step: 4
End:
-->
