<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "ant.dtd">
<!-- ant.dtd is generated by target dtd. This is not done automatically.
If any problems arise either regenerate ant.dtd by invoking ant dtd
or delete the DOCTYPE definition -->

<project name="pfixcore" default="all" basedir=".">
  <!-- override properties -->
  <property name="dir.projects"           location="projects"/>
  
  <import file="skel/build-skel.xml"/>
  <import file="build-maven.xml"/>

  <property name="dist.version"        value="0.13.17" description="the version to use for pfixcore-*.*"/>
  <property name="dist.type"           value="release" description="distribution type: supported values release, build"/>

  <!-- additional properties -->
  <property name="name.svnrevision"       value="SVN_REVISION"/>
  <property name="dir.metainf"            location="${dir.build}/META-INF"/>
  <property name="dir.dist"               location="dist"/>
  <property name="dir.toconf"             value="${dir.projects}/common/conf/"/>
  <property name="name.testskel"          value="testskel"/>
  <property name="dir.testskel"           location="${name.testskel}"/>
  <property name="dir.examplepage"        location="${dir.projects}/simplepage"/>
  <property name="name.examplepage"       value="simplepage"/>
  <property name="dir.examplelink"        location="${dir.projects}/simplelink"/>
  <property name="name.examplelink"       value="simplelink"/>
  <property name="dir.exampleform"        location="${dir.projects}/simpleform"/>
  <property name="name.exampleform"       value="simpleform"/>

  <!-- initialize distribution type dependent properties used for creation of distribution files -->

  <target name="dist-properties">
    <exec executable="sh" outputproperty="dist.revision" errorproperty="dist.revision.error">
      <arg line="-c 'svn info | grep ^Revision: | cut -d\  -f2'"/>
    </exec>                                                                                                    
    <condition property="project.version" value="${dist.version}">
      <equals arg1="${dist.type}" arg2="release"/>
    </condition>
    <condition property="project.version" value="${dist.version}-norev">
      <and>
        <equals arg1="${dist.type}" arg2="build"/>
        <not><equals arg1="${dist.revision.error}" arg2=""/></not>
      </and>
    </condition>
    <condition property="project.version" value="${dist.version}-r${dist.revision}">
      <equals arg1="${dist.type}" arg2="build"/>
    </condition>
    <property name="name.pfixcore_jar"      value="${project.name}-${project.version}.jar"/>
    <property name="file.pfixcore_jar"      location="${dir.dist}/${name.pfixcore_jar}"/>
    <property name="name.pfixcore_srcjar"   value="${project.name}-src-${project.version}.jar"/>
    <property name="file.pfixcore_srcjar"   location="${dir.dist}/${name.pfixcore_srcjar}"/>
    <property name="name.pfixcore_data_tgz" value="${project.name}-data-${project.version}.tar.gz"/>
    <property name="file.pfixcore_data_tgz" location="${dir.dist}/${name.pfixcore_data_tgz}"/>
    <property name="name.pfixcore_skel_tgz" value="${project.name}-skel-${project.version}.tar.gz"/>
    <property name="file.pfixcore_skel_tgz" location="${dir.dist}/${name.pfixcore_skel_tgz}"/>
    <property name="name.pfixcore_examples_tgz" value="${project.name}-examples-${project.version}.tar.gz"/>
    <property name="file.pfixcore_examples_tgz" location="${dir.dist}/${name.pfixcore_examples_tgz}"/>
  </target>

  <!-- override targets -->
    
  <!-- TODO: always compiles before invoking skel.ant-tasks? -->
  <target name="ant-tasks" depends="ant-tasks-compile, skel.ant-tasks"/>
  <target name="ant-tasks-stage1" depends="ant-tasks-compile-stage1, skel.ant-tasks-stage1"/>
  <target name="ant-tasks-stage2" depends="ant-tasks-compile-stage2, skel.ant-tasks-stage2"/>
    
  <target name="init" depends="skel.init">
    <mkdir dir="${dir.dist}"/>
  </target>
    
  <target name="ant-tasks-compile" depends="ant-tasks-compile-stage2">
  </target>
  
  <target name="ant-tasks-compile-stage1" depends="tomcat.dir.opt, init" description="compiles java files needed by ant-tasks">
    <javac
     srcdir="${dir.src}"
     destdir="${dir.build}"
     includes="de/schlund/pfixcore/util/XsltGenericTask.java, de/schlund/pfixxml/config/BuildTimePropTask.java, org/pustefixframework/config/build/CreatePropertyFileTask.java, de/schlund/pfixcore/util/GenerateSCodes.java de/schlund/pfixcore/util/GenerateSCodesTask.java, org/pustefixframework/config/build/CreateWebXmlTask.java, org/pustefixframework/config/build/CreateServerConfigurationTask.java, org/pustefixframework/config/build/InitResourceUtilTask.java, org/pustefixframework/tools/ClassVersionCheckerTask.java"
     debug="${debug}"
     classpathref="cp.classpath"
     sourcepath="${dir.src}"
     source="${javac.source}"
     target="${javac.target}"
     encoding="${javac.encoding}"
     >
    </javac>
  </target>
  
  <target name="ant-tasks-compile-stage2" depends="scgenerate, ant-tasks-compile-stage1" description="compiles java files needed by ant-tasks">
    <javac
     srcdir="${dir.src}"
     destdir="${dir.build}"
     includes="de/schlund/pfixcore/util/Xslt*.java, de/schlund/pfixcore/util/*Task.java, de/schlund/pfixxml/util/StringUtil.java, de/schlund/pfixcore/generator/iwrpgen/AptTask.java"
     debug="${debug}"
     classpathref="cp.classpath"
     sourcepath="${dir.src}"
     source="${javac.source}"
     target="${javac.target}"
     encoding="${javac.encoding}"
     >
    </javac>
  </target>

  <target name="scgenerate" depends="scgenerate-dist, buildtime-props">
    <antcall target="skel.scgenerate"/>
  </target>

  <target name="scgenerate-dist" depends="ant-tasks-stage1" if="dist.build">
    <pfx-sclibgen
      gendir="${dir.gensrc}"
      docroot="${dir.projects}"
      includes="core/dyntxt/statuscodeinfo.xml"
      module="pfixcore"
    />
  </target>

  <target name="pre-compile" depends="init" description="compiles AnnotationProcessors used by apt">
    <javac 
      srcdir="${dir.src}"
      destdir="${dir.build}"
      includes="de/schlund/pfixcore/util/CommonAnnotationProcessorFactory.java, de/schlund/pfixcore/generator/iwrpgen/IWrapperAnnotationProcessor.java, de/schlund/pfixcore/generator/iwrpgen/IWrapperAnnotationProcessorFactory.java"
      classpathref="cp.classpath"
      sourcepath="${dir.src}"
      source="${javac.source}"
      target="${javac.target}"
      encoding="${javac.encoding}"/>
  </target>

  <target name="clean-project" depends="skel.clean-project">
    <delete dir="${dir.dist}"/>
    <!-- Delete empty htdocs and img dirs in the dist examples -->
    <delete includeemptydirs="true">
      <fileset dir="${dir.examplepage}" includes="htdocs/**"/>
      <fileset dir="${dir.examplepage}" includes="img/**"/>
      <fileset dir="${dir.examplelink}" includes="htdocs/**"/>
      <fileset dir="${dir.examplelink}" includes="img/**"/>
      <fileset dir="${dir.exampleform}" includes="htdocs/**"/>
      <fileset dir="${dir.exampleform}" includes="img/**"/>
    </delete>
  </target>
        
  <target name="realclean-core"><!-- override target - we don't delete the core directory here -->
    <delete dir="${dir.tomcat}"/>
    <delete dir="${dir.testskel}"/>
  </target>
    
  <target name="init-data">
    <!-- override skel.init-data: do nothing -->
  </target>
    
  <target name="dist" depends="clean, init, dist-examples" description="Builds release files in dist directory.">
    <property name="dist.build" value="true"/>
    <delete file="${dir.metainf}/${name.svnrevision}"/>
    <exec executable="svn" outputproperty="dist.autotagmessage">
      <arg line="info"/>
    </exec>
    <!-- looks funny, but if someone called something like
         "ant jar dist" the jar file would have a wrong SVN_REVISION file -->
    <antcall target="skeleton" inheritall="true">
      <param name="autotagmessage" value="${dist.autotagmessage}"/>
    </antcall>
  </target>

  <target name="classversioncheck" depends="ant-tasks-stage1">
    <pfx-classversioncheck baseDir="." includes="build/**/*.class lib/**/*.jar" targetVersion="${javac.target}"/>
  </target>

  <!-- Building the basic examples for dist -->
  <target name="dist-examples" depends="clean, init, dist-properties" description="Builds three basic examples as a pustefix turorial">
    <echo message="Building ${name.pfixcore_examples_tgz} in dist directory"/>

    <!-- creating the empty htdocs and img directories -->
    <mkdir dir="${dir.examplepage}/htdocs"/>
    <mkdir dir="${dir.examplepage}/img"/>
    <mkdir dir="${dir.examplelink}/htdocs"/>
    <mkdir dir="${dir.examplelink}/img"/>
    <mkdir dir="${dir.exampleform}/htdocs"/>
    <mkdir dir="${dir.exampleform}/img"/>

    <!-- Deleting the old tar and also the configuration files -->
    <delete file="${file.pfixcore_examples_tgz}"/>

    <!-- Building the example tar with the main java and iwrp files -->
    <tar destfile="${file.pfixcore_examples_tgz}" compression="gzip">
      <tarfileset dir="${dir.examplepage}" includes="**" prefix="${name.examplepage}"/>
      <tarfileset dir="${dir.projects}" includes="README_EXAMPLES.txt"/>
      <tarfileset dir="${dir.examplelink}" includes="**" prefix="${name.examplelink}"/>
      <tarfileset dir="${dir.exampleform}" includes="**" prefix="${name.exampleform}"/>
      <tarfileset dir="${dir.src}" includes="de/skelexamples/DemoText.iwrp" prefix="src"/>
      <tarfileset dir="${dir.src}" includes="de/skelexamples/ContextDemoText.java" prefix="src"/>
      <tarfileset dir="${dir.src}" includes="de/skelexamples/ContextDemoTextImpl.java" prefix="src"/>
      <tarfileset dir="${dir.src}" includes="de/skelexamples/DemoTextHandler.java" prefix="src"/>
    </tar>
  </target>


  <!-- a target to create a new project -->
  <target name="new-basicapp" depends="compile" description="Builds a naked application and creates the basic stuff">
    <java classname="de.schlund.pfixcore.util.basicapp.InitNewPfixProject">
      <classpath refid="cp.classpath"/>
    </java>
  </target>

  <target name="fixtabs">
    <fixcrlf srcdir="${basedir}" includes="build.xml, skel/build.xml" tab="remove" tablength="4"/>
  </target>

  <target name="skeleton" depends="tomcat.dir, ant-tasks, fixtabs, compile, jar, srcjar, data">
    <echo message="Building ${name.pfixcore_skel_tgz} in dist directory"/>
    <tar destfile="${file.pfixcore_skel_tgz}" compression="gzip">
      <tarfileset dir="${dir.skel}" prefix="skel"/>
      <tarfileset dir="${dir.metainf}" includes="${name.svnrevision}" prefix="skel"/>
      <tarfileset dir="${dir.lib}" includes="*.jar, tomcat/README" excludes="saxon8*.jar" prefix="skel/lib"/>
      <tarfileset dir="${dir.dist}" includes="${name.pfixcore_jar}" prefix="skel/lib"/>
      <tarfileset dir="${dir.dist}" includes="${name.pfixcore_data_tgz}" prefix="skel/lib"/>
      <tarfileset dir="${basedir}" includes="ant.dtd" prefix="skel"/>
      <tarfileset dir="${basedir}" includes="INSTALL" prefix="skel"/>
      <tarfileset dir="${dir.toconf}" includes="newproject.prop.in newprjlog.xml.in" prefix="skel/projects/common/conf"/>
    </tar>
  </target>

  <target name="data" depends="init, dist-properties, autotag">
    <echo message="Building ${name.pfixcore_data_tgz} in dist directory" />
    <copy file="${dir.metainf}/${name.svnrevision}" tofile="${dir.projects}/core/${name.svnrevision}"/>
    <tar destfile="${file.pfixcore_data_tgz}" compression="gzip">
      <tarfileset dir="${dir.projects}/core" prefix="core">
        <exclude name="dyntxt/statuscodeinfo.xml"/>
      </tarfileset>
      <tarfileset file="${basedir}/skel/build-skel.xml" prefix="core/build"/>
    </tar>
    <delete file="${dir.projects}/core/${name.svnrevision}"/>
  </target>

  <target name="jar" depends="dist-properties, classversioncheck, autotag">
    <mkdir dir="${dir.dist}" description="creates ${name.pfixcore_jar}"/>
    <jar destfile="${file.pfixcore_jar}">
      <fileset dir="${dir.build}">
        <exclude name="de/schlund/util/statuscodes/StatusCodeLib.class"/>
        <exclude name="de/schlund/pfixcore/example/**"/>
    <exclude name="de/skelexamples/**"/>
        <exclude name="de/schlund/pfixcore/testsuite/**/*.class"/> 
      </fileset>
    </jar>
  </target>

  <target name="srcjar" depends="dist-properties">
    <mkdir dir="${dir.dist}"/>
    <jar destfile="${file.pfixcore_srcjar}">
      <fileset dir="${dir.src}">
        <exclude name="de/schlund/pfixcore/example/**"/>
        <exclude name="de/skelexamples/**"/>
      </fileset>
      <fileset dir="${dir.gensrc}">
        <exclude name="de/schlund/util/statuscodes/StatusCodeLib.java"/>
        <exclude name="de/schlund/pfixcore/example/**"/>
        <exclude name="de/skelexamples/**"/>
      </fileset>
    </jar>
  </target>

  <target name="autotag" depends="init">
    <!-- make echo insert a newline into the file with &#010; -->
    <echo file="${dir.metainf}/${name.svnrevision}" message="${autotagmessage}&#010;"/>
  </target>

  <target name="test-skeleton" depends="dist-properties" description="extracts skel.jar, copies sample files, runs ant">
    <delete dir="${dir.testskel}"/>
    <mkdir dir="${dir.testskel}"/>
    <untar src="${file.pfixcore_skel_tgz}" dest="${dir.testskel}" compression="gzip"/>
    <copy todir="${dir.testskel}/skel/src">
      <fileset dir="${dir.src}" includes="de/schlund/pfixcore/example/**"/>
    </copy>
    <!-- Copying over sample application for testing purposes -->
    <copy todir="${dir.testskel}/skel/projects">
      <fileset dir="${dir.projects}" includes="sample1/**"/>
    </copy>
    <!-- DocumentRoot for sample application, apache fails to start without -->
    <mkdir dir="${dir.testskel}/skel/projects/htdocs"/>
    <!-- jakarta-tomcat-x.x.xx.tar.gz is not included in skeleton anymore -->
    <copy todir="${dir.testskel}/skel/lib/tomcat">
        <fileset dir="${dir.lib}/tomcat">
          <include name="*.tar.gz"/>
        </fileset>
    </copy>
    <exec dir="${dir.testskel}/skel" executable="ant" failonerror="true">
    </exec>
  </target>

</project>

