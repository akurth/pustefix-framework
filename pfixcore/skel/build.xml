<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "ant.dtd">
<!-- ant.dtd is generated by target dtd. This is not done automatically.
If any problems arise either regenerate ant.dtd by invoking ant dtd
or delete the DOCTYPE definition -->

<project name="skel" default="all" basedir=".">
  <!-- set global properties for this build -->
  <property file="build.properties"/>
  <property environment="env"/>
  <property name="project.name"             value="${ant.project.name}"/>
  <property name="uid"                      value="${env.USER}"/>
  <property name="build.compiler"           value="modern"/>
  <property name="build.compiler.emacs"     value="true"/>
  <property name="javac.source"             value="1.4"/>
  <property name="javac.encoding"           value="iso8859-1"/>
  <property name="name.jnipkg"              value="jni.tar.gz"/>
  <property name="name.cvsautotag"          value="CVS_AUTOTAG"/>
  <property name="debugopts"                value="-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5000"/>
  <property name="gen"                      value="**/depend.xml"/>
  <property name="dir.src"                  location="src"/>
  <property name="dir.build"                location="build"/>
  <property name="dir.lib"                  location="lib"/>
  <property name="dir.skel"                 location="skel"/>
  <property name="dir.jni"                  location="${dir.lib}/jni"/>
  <property name="dir.metainf"              location="META-INF"/>
  <property name="dir.projects"             location="projects"/>
  <property name="dir.docroot"              location="${dir.projects}"                                        description="document root for tomcat, defaults to dir.projects"/>
  <property name="file.projects_xml"        location="${dir.projects}/servletconf/projects.xml"/>
  <property name="validate"                 value="dynamic"/>
  <property name="catalogfile"              location="${dir.projects}/core/schema/catalog.xml"/>
  <property name="genlog"                   value="quiet"                                                description="which log4j config to use for the generate task; currently one of quiet, full, tree; defaults to quiet; see ${dir.projects}/core/conf/generator_*.xml"/>
  <property name="file.log4jconfig"         location="${dir.projects}/core/conf/generator_${genlog}.xml"/>

  <!-- TODO: use dir.tomcat whereever possible -->
  <!-- TODO: point into subdirectory of build.dir -->
  <property name="dir.tomcat"               location="${dir.projects}/servletconf/tomcat"/>
  <property name="dir.webapps"              location="${dir.tomcat}/webapps"/>
  <property name="standalone.tomcat"        value="false"/>
  <property name="portbase.tomcat"          value="8000"/>

  <property name="pat.pfixcore_jar"         value="pfixcore-*.jar"/>
  <fileset  id="id.fs.pfixcore_jar"         dir="${dir.lib}" includes="pfixcore-*.jar"/>
  <property name="pat.pfixcore_data_tgz"    value="pfixcore-data-*.tar.gz"/>
  <fileset  id="id.fs.pfixcore_data_tgz"    dir="${dir.lib}" includes="${pat.pfixcore_data_tgz}"/>

  <target name="properties">
    <!-- Ant properties are immutable, the order of definition is:
         - ant commandline via the '-Dparam=value' option
         - file build.properties in java.util.Properties format
         - environment variable MAKE_MODE, e.g. export MAKE_MODE=test
    -->
    <condition property="makemode" value="${env.MAKE_MODE}">
      <and>
        <isset property="env.MAKE_MODE"/>
        <not><equals arg1="${env.MAKE_MODE}" arg2=""/></not>
      </and>
    </condition>
    <fail unless="makemode" message="Property &quot;makemode&quot; not set or empty. This property specifies whether the pustefix system is built and run in development mode (makemode=test) or production mode (makemode=prod). Specify propery either on the commandline (E.g. ant -Dmakemode=test or with the environment variable MAKE_MODE. See ant -projecthelp for more details." />

    <condition property="javahome" value="${env.PFX_JAVA_HOME}">
      <and>
        <isset property="env.PFX_JAVA_HOME"/>
        <not><equals arg1="${env.PFX_JAVA_HOME}" arg2=""/></not>
      </and>
    </condition>
    <condition property="javahome" value="${env.JAVA_HOME}">
      <and>
        <isset property="env.JAVA_HOME"/>
        <not><equals arg1="${env.JAVA_HOME}" arg2=""/></not>
      </and>
    </condition>
    <fail unless="javahome" message="Property &quot;javahome&quot; not set. This property is used to create projects/servletconf/tomcat/workers.prop. Set environment variable JAVA_HOME to point to the root directory of the Java2 Standard Edition installation you wish to use."/>

    <condition  property="prohibitedit" value="yes">
      <equals arg1="${makemode}" arg2="prod"/>
    </condition>
    <property       name="prohibitedit" value="no"/>

    <property name="debug" value="true"/>
    <property name="debuglevel" value="lines,vars,source"/>

    <condition property="machine"       value="${env.MACHINE}">
      <and>
        <isset property="env.MACHINE"/>
        <not><equals arg1="${env.MACHINE}" arg2=""/></not>
      </and>
    </condition>
    <exec outputproperty="machine" executable="hostname" os="Linux"><arg value="-s"/></exec>
    <fail message="Property &quot;machine&quot; not set. Either set environment variable MACHINE or property machine to the localpart of your fully qualified hostname." unless="machine"/>

    <exec outputproperty="dnsdomainname"    executable="hostname" os="Linux"><arg value="-d"/></exec>
    <condition property="fqdn"     value="${machine}.${dnsdomainname}">
      <isset property="dnsdomainname"/>
    </condition>
    <condition property="fqdn"     value="${machine}">
      <not><isset property="dnsdomainname"/></not>
    </condition>

    <!-- Create time stamp in ISO 8601 alike format.
         17th September 2003 11:58:23 formats to AUTO_TAG_2003-09-17-115823 in property -->
    <tstamp><format property="tstamp.autotag" pattern="'AUTO_TAG_'yyyy'-'MM'-'dd'-'HHmmss"/></tstamp>

    <exec outputproperty="trusted.tomcat" executable="hostname" os="Linux"><arg value="-i"/></exec>
  </target>

  <path id="cp.classpath">
    <fileset dir="${dir.lib}" includes="*.jar"/>
    <fileset dir="${dir.projects}" includes="servletconf/tomcat/common/lib/servlet-api.jar"/>
    <pathelement location="${dir.build}"/>
  </path>

  <target name="init" depends="properties, init-data">
    <mkdir dir="${dir.build}"/>
    <mkdir dir="${dir.src}"/>
    <echo message="using machine=${machine} fqdn=${fqdn}" level="verbose"/>
    <!-- pathconvert dumps classpath on ant -verbose -->
    <pathconvert property="dev.null" refid="cp.classpath" pathsep="&#013;"/>
  </target>

  <target name="noop" description="just prints the name of the project">
    <echo message="${project.name}"/>
  </target>

  <target name="echoproperties" depends="properties">
    <echoproperties/>
  </target>

  <target name="debug" depends="all" description="builds all and runs tomcat with debugging options">
    <!-- added suspend=n to default debugging option, as without this option
         Ctrl-C would not stop tomcat without leaving java processes hanging around
         suspend=y target VM is to be suspended immediately before the main class is loaded
         suspend=n do not suspend target VM
         see http://java.sun.com/j2se/1.4.2/docs/guide/jpda/conninv.html -->
    <antcall target="_run" inheritall="true">
      <param name="run.debugopts" value="${debugopts}"/>
    </antcall>
  </target>

  <target name="run" depends="all" description="builds all and runs tomcat">
    <antcall target="_run" inheritall="true">
      <param name="run.debugopts" value=""/>
    </antcall>
  </target>

  <target name="_run">
    <property name="run.debugopts" value=""/>
    <path id="run.path.ld_library_path">
      <pathelement path="${env.LD_LIBRARY_PATH}"/>
      <pathelement location="${dir.jni}/build"/>
    </path>
    <property name="run.ld_library_path" refid="run.path.ld_library_path"/>
    <exec dir="${dir.projects}/servletconf/tomcat" executable="${dir.projects}/servletconf/tomcat/bin/catalina.sh" vmlauncher="false">
      <env key="LD_LIBRARY_PATH" value="${run.ld_library_path}"/>
      <env key="JAVA_OPTS" value="-mx200M ${run.debugopts}"/>
      <env key="JSSE_HOME" value="${basedir}/lib/jsse"/>
      <env key="LANG" value="C"/>
      <arg line="run"/>
    </exec>
  </target>

  <target name="generate" depends="all" description="Generates Targets to ${dir.projects}/.cache">
    <echo message="If build dies with an OutOfMemoryException, set and export environment variable ANT_OPTS to something like ANT_OPTS=&quot;-ms200m -mx200m&quot;."/>
    <pfx-generate dir="${dir.projects}" includes="${gen}" log4jconfig="${file.log4jconfig}" excludes="${excludes.projects}"/>
  </target>

  <target name="all"
          depends="compile, post-compile, installjars, check-permissions, compile-xml, newprjlog_xml"
          description="builds all files required to run"
          />

  <target name="compile-xml"
          depends="propfiles, targetdefs, web_xml, stylesheets, pfixlog_xml, apache_conf, jk_conf, workers_prop, server_xml, webservice"
          description="performs xslt transformations in dir.projects"
          />

  <target name="depend" depends="generate-src, jni" description="checks dependencies of all .java files">
    <depend
     srcdir="${dir.src}"
     destdir="${dir.build}"
     cache="${dir.build}"
     >
    </depend>
  </target>

  <target name="pre-compile">
    <!-- general purpose hook for build files importing this build file -->
  </target>

  <target name="generate-src" depends="ant-tasks, pre-compile" description="generates interfaces wrappers by transforming .iwrp to .java files">
    <pfx-iwrp srcdir="${dir.src}" includes="**/*.iwrp" destdir="${dir.src}" extension=".java" style="${dir.projects}/core/build/iwrapper.xsl" excludes="${excludes.src}" validate="${validate}" catalogfile="${catalogfile}"/>
  </target>

  <target name="compile" depends="tomcat.dir.opt, generate-src, jni, depend, pre-compile" description="compiles all .java files">
    <javac
     srcdir="${dir.src}"
     destdir="${dir.build}"
     debug="${debug}"
     debuglevel="${debuglevel}"
     classpathref="cp.classpath"
     source="${javac.source}"
     nowarn="${javac.nowarn}"
     encoding="${javac.encoding}"
     excludes="${excludes.src}, ${exclude.examples}"
     >
    </javac>
    <available file="res" type="dir" property="has.resources" />
    <antcall target="resources"/>
  </target>

  <target name="resources" if="has.resources">
    <copy todir="${dir.build}">
      <fileset dir="res"/>
    </copy>
  </target>
    
  <target name="post-compile" depends="compile">
    <!-- general purpose hook for build files importing this build file -->
  </target>

  <target name="jni">
    <!-- unjar jni.tar.gz out of pfixcore.jar -->
    <!-- If overwrite="false", unjar overwrites a file if the modification times of the
         target file are older than the modification times of the file contained in the archive. -->
    <unjar dest="${dir.lib}" overwrite="false">
      <fileset refid="id.fs.pfixcore_jar"/>
      <patternset>
        <include name="${name.jnipkg}" />
      </patternset>
    </unjar>
    <untar src="${dir.lib}/${name.jnipkg}" dest="${dir.lib}" compression="gzip" overwrite="false"/>
    <ant dir="${dir.jni}"/>
  </target>

  <target name="clean-jni-avl">
    <available property="avl.clean-jni" file="${dir.jni}/build.xml"/>
  </target>
  
  <target name="clean-jni" depends="clean-jni-avl" if="avl.clean-jni">
    <ant dir="${dir.jni}" target="clean"/>
  </target>

  <target name="installjars" depends="tomcat.dir.opt">
    <!-- Setting absolute links instead of relative to avoid extra property for dir.build
         as ${dir.build} is specified as location it always resolves to an absolute path;
         does not work for filenames containing spaces -->
    <echo level="verbose" message="Setting symlink to ${dir.build} as ${dir.projects}/servletconf/tomcat/shared/classes"/>
    <exec executable="sh">
      <arg line="-c &quot;[ -e ${dir.projects}/servletconf/tomcat/shared/classes ] &amp;&amp; rm -fr ${dir.projects}/servletconf/tomcat/shared/classes ; ln -s  ${dir.build} ${dir.projects}/servletconf/tomcat/shared/classes&quot;"/>
    </exec>
    <!-- As task delete does not delete symbolic links, deleting symlinks using native tools. -->
    <!-- Deleting symlinks pointing to non existent files, assuming jar files -->
    <!-- replaced by new versions (with new filenames) do not exist anymore -->
    <exec executable="find" os="Linux">
      <arg file="${dir.projects}/servletconf/tomcat/shared/lib"/>
      <arg line="-iname *.jar -a -type l -exec rm -v {} ;"/>
    </exec>
    <echo level="verbose">Creating symlinks in tomcat's lib directory</echo>
    <exec executable="sh">
      <arg line="-c &quot;cd ${dir.projects}/servletconf/tomcat/shared/lib &amp;&amp; for i in ${dir.lib}/*.jar ; do test -L $(basename $i) || ln -s $i . ; done&quot;"/>
    </exec>
  </target>

  <target name="ant-tasks" depends="init" description="declares the ant task used for generating java source code. This target needs to be run prior to the actual compile.">
    <taskdef
     name="pfx-xslt"
     classname="de.schlund.pfixcore.util.XsltGenericTask"
     classpathref="cp.classpath"
     loaderref="pfx-loader"
     description="Performs generic XSLT transformations"
     />
    <taskdef
     name="pfx-iwrp"
     classname="de.schlund.pfixcore.util.XsltIWrapperTask"
     classpathref="cp.classpath"
     loaderref="pfx-loader"
     description="Generates .java files out of .iwrp (Interface Wrapper) files"
     />
    <taskdef
     name="pfx-webxml"
     classname="de.schlund.pfixcore.util.XsltWebXmlTask"
     classpathref="cp.classpath"
     loaderref="pfx-loader"
     description="Creates WEB-INF/web.xml config files for each project"
     />
    <taskdef
     name="pfx-generate"
     classname="de.schlund.pfixcore.util.TargetGeneratorTask"
     classpathref="cp.classpath"
     loaderref="pfx-loader"
     description="Creates dependencies in ${dir.projects}/.cache"
     />
    <taskdef
      name="pfx-webservice"
      classname="de.schlund.pfixcore.webservice.generate.WebServiceTask"
      classpathref="cp.classpath"
      loaderref="pfx-loader"
      description="Generates/deploys WSDL, WSDD and JS stubs from web service interfaces/configuration"
    />
  </target>

  <target name="dtd" depends="dtd-check, ant-tasks" unless="upd.dtd" description="creates a DTD for this build file">
    <!-- DTD generated does not describe this build file thorough. It can't be used
         for complete validation though it may be useful for auto competion within IDEs.
         The Element not generated is the nested type "param" used within the custom ant-tasks -->
    <echo message="Creating ant.dtd" level="info"/>
    <antstructure output="ant.dtd"/>
  </target>

  <target name="dtd-check" unless="pfx.force">
    <uptodate property="upd.dtd" srcfile="build.xml" targetfile="ant.dtd"/>
  </target>

  <target name="clean-dtd">
    <delete file="ant.dtd"/>
  </target>

  <target name="clean" depends="clean-project, clean-webapps, clean-webservice" description="deletes ${dir.build}, directory trees and all .java files generated from .iwrp files in ${dir.src}">
    <delete dir="${dir.build}" />
    <!-- Delete *.java files created from *.iwrp files -->
    <delete>
      <fileset dir="${dir.src}" includes="**/*.java">
        <present present="both" targetdir="${dir.src}">
          <mapper type="glob" from="*.java" to="*.iwrp"/>
        </present>
      </fileset>
    </delete>
    <delete file="${dir.metainf}/${name.cvsautotag}"/>
  </target>

  <target name="clean-project" description="deletes files from ${dir.projects}">
    <mkdir dir="${dir.webapps}"/>
    <delete>
      <fileset dir="${dir.projects}" includes="**/*.xsl">
        <present present="both" targetdir="${dir.projects}">
          <mapper type="glob" from="*.xsl" to="*.xsl.in"/>
        </present>
      </fileset>
      <fileset dir="${dir.projects}" includes="**/depend.xml">
        <present present="both" targetdir="${dir.projects}">
          <mapper type="glob" from="*depend.xml" to="*depend.xml.in"/>
        </present>
      </fileset>
      <fileset dir="${dir.projects}" includes="**/*.prop">
        <present present="both" targetdir="${dir.projects}">
          <mapper type="glob" from="*.prop" to="*.prop.in"/>
        </present>
      </fileset>
      <fileset dir="${dir.projects}" includes="**/webservice.conf">
        <present present="both" targetdir="${dir.projects}">
          <mapper type="glob" from="*webservice.conf" to="*webservice.conf.in"/>
        </present>
      </fileset>
      <fileset dir="${dir.projects}" includes="common/conf/newprjlog.xml common/conf/pfixlog.xml servletconf/projects.xml servletconf/tomcat/apache.conf servletconf/tomcat/jk.conf servletconf/tomcat/workers.prop servletconf/tomcat/conf/server.xml"/>
    </delete>
    <delete dir="${dir.projects}/servletconf/tomcat/conf/Catalina"/>
  </target>
  
  <target name="clean-webapps-avl">
    <available file="${dir.webapps}" property="avl.clean-webapps"></available>
  </target>
  
  <target name="clean-webapps" depends="clean-webapps-avl" if="avl.clean-webapps">
    <delete>
      <fileset dir="${dir.webapps}" includes="**/WEB-INF/web.xml"/>
    </delete>
  </target>

  <target name="realclean" depends="clean, clean-jni, realclean-core">
    <delete dir="${dir.projects}/.cache"/>
    <delete dir="${dir.tomcat}"/>
  </target>

  <target name="realclean-core">
    <delete dir="${dir.projects}/core"/>
  </target>
        
  <target name="init-data-check" unless="pfx.force">
    <!-- extract only if pfixcore-data.jar is newer than dir ${dir.projects}/core -->
    <uptodate property="upd.init-data">
      <srcfiles dir="${dir.lib}" includes="${pat.pfixcore_data_tgz}"></srcfiles>
      <mapper type="merge" to="${dir.projects}/core/TIMESTAMP"></mapper>
    </uptodate>
  </target>

  <target name="init-data" depends="init-data-check" unless="upd.init-data">
    <delete dir="${dir.projects}/core"/>
    <untar dest="${dir.projects}" compression="gzip" overwrite="true">
      <fileset refid="id.fs.pfixcore_data_tgz"/>
    </untar>
    <java classname="de.schlund.pfixcore.util.Merge" fork="true" classpathref="cp.classpath">
      <arg file="${dir.projects}/common/dyntxt/statusmessages.xml"/>
      <arg file="${dir.projects}/core/tmp/dyntxt/statusmessages.xml"/>
      <arg value="/include_parts/nosuchelement"/>
      <arg value="/include_parts/part/product[@name='default']/lang[@name='default']"/>
    </java>
    <delete dir="${dir.projects}/core/tmp"/>
    <touch file="${dir.projects}/core/TIMESTAMP"></touch>
  </target>

  <target name="check-permissions">
    <apply executable="chmod" os="Linux">
      <arg line="a+x"/>
      <!-- // TODO_AH 2004-12-08 take out if other fileset works okay
      <fileset dir="${basedir}" includes="apploader.sh newproject.sh startTomcat.sh bin/setClassPath.sh bin/setvars.sh projects/servletconf/tomcat/bin/catalina.sh projects/servletconf/tomcat/bin/setclasspath.sh example/checkfiles.sh example/servletconf/tomcat/bin/catalina.sh example/servletconf/tomcat/bin/setclasspath.sh"/>
      -->
      <fileset dir="${basedir}" includes="apploader.sh newproject.sh startTomcat.sh skel/apploader.sh skel/newproject.sh skel/startTomcat.sh bin/setClassPath.sh bin/setvars.sh stuff/**/*.sh stuff/**/bin/*"/>
      <fileset dir="${dir.projects}" includes="**/*.sh"/>
    </apply>
  </target>

  <target name="force" description="disables uptodate checks">
    <!-- All targets *-check that have set the attribute unless="pfx.force"
         will be skipped, so the uptodate properties (upd.*), the execution of the actual tasks
         depends on, do not get set and in turn the actual tasks get executed. -->
    <property name="pfx.force" value="true"/>
  </target>

  <target name="checkfiles">
    <!-- find the input files and write them to line separated files -->
    <pathconvert property="checkfiles.ALLPROJECTS" pathsep="&#10;">
      <path>
        <fileset dir="${dir.projects}">
          <include name="**/depend.xml"/>
        </fileset>
      </path>
      <map from="${dir.projects}/" to=""/>
    </pathconvert>
    <echo message="${checkfiles.ALLPROJECTS}" file="${dir.projects}/.ALLPROJECTS"/>
    <pathconvert property="checkfiles.ALLINCFILES" pathsep="&#10;">
      <path>
        <fileset dir="${dir.projects}" casesensitive="false">
          <include name="**/txt/**/*.xml"/>
        </fileset>
      </path>
      <map from="${dir.projects}/" to=""/>
    </pathconvert>
    <echo message="${checkfiles.ALLINCFILES}" file="${dir.projects}/.ALLINCFILES"/>
    <pathconvert property="checkfiles.ALLIMAGES" pathsep="&#10;">
      <path>
        <fileset dir="${dir.projects}" casesensitive="false">
          <include name="**/img/**/*.gif" />
          <include name="**/img/**/*.jp*g"/>
        </fileset>
      </path>
      <map from="${dir.projects}/" to=""/>
    </pathconvert>
    <echo message="${checkfiles.ALLIMAGES}" file="${dir.projects}/.ALLIMAGES"/>
    <!-- we must fork a java vm here to set the current dir -->
    <java
     classname="de.schlund.pfixcore.util.CheckIncludes"
     classpathref="cp.classpath"
     dir="${dir.projects}"
     fork="true"
     failonerror="true"
     >
      <arg file="${dir.projects}/CHECKOUTPUT.xml"/>
      <arg file="${dir.projects}/.ALLPROJECTS"/>
      <arg file="${dir.projects}/.ALLINCFILES"/>
      <arg file="${dir.projects}/.ALLIMAGES"/>
    </java>
    <echo message="Output written to ${dir.projects}/CHECKOUTPUT.xml" level="info"/>
  </target>

  <target name="propfiles" depends="ant-tasks" description="creates **/*.prop">
    <pfx-xslt
     style="${dir.projects}/core/build/create_propfiles.xsl"
     srcdir="${dir.projects}"
     destdir="${dir.projects}"
     includes="**/*.prop.in"
     extension=""
     validate="${validate}"
     catalogfile="${catalogfile}"
     >
      <param name="docroot" expression="${dir.docroot}"/>
      <param name="fqdn"    expression="${fqdn}"/>
      <param name="uid"     expression="${uid}"/>
      <param name="machine" expression="${machine}"/>
      <param name="mode"    expression="${makemode}"/>
    </pfx-xslt>
  </target>

  <target name="targetdefs" depends="ant-tasks, projects_xml" description="creates **/depend.xml">
    <pfx-xslt
     style="${dir.projects}/core/build/create_depend.xsl"
     srcdir="${dir.projects}"
     destdir="${dir.projects}"
     includes="**/depend.xml.in"
     extension=""
     >
      <param name="prohibitEdit" expression="${prohibitedit}"/>
      <param name="docroot" expression="${dir.docroot}"/>
      <param name="projectsFile" expression="${file.projects_xml}"/>
    </pfx-xslt>
  </target>

  <target name="projects_xml" depends="ant-tasks" description="creates projects.xml out of projects.xml.in and multiple project.xml files" >
    <fileset id="id.fileset.projectxmlin" dir="${dir.projects}" includes="**/project.xml.in"/>
    <pathconvert property="projectxmlins" refid="id.fileset.projectxmlin" pathsep="|">
      <map from="${dir.projects}/" to=""/>
    </pathconvert>
    <echo level="verbose" message="**/project.xml.in matches ${projectxmlins}"/>
    <dependset>
      <srcfileset refid="id.fileset.projectxmlin"/>
      <targetfileset dir="${dir.projects}/servletconf" includes="projects.xml"/>
    </dependset>
    <pfx-xslt
     style="${dir.projects}/core/build/create_projects.xsl"
     srcdir="${dir.projects}"
     destdir="${dir.projects}"
     includes="servletconf/projects.xml.in"
     >
      <param name="docroot" expression="${dir.docroot}"/>
      <param name="files"   expression="${projectxmlins}"/>
      <param name="fqdn"    expression="${fqdn}"/>
      <param name="uid"     expression="${uid}"/>
      <param name="machine" expression="${machine}"/>
      <param name="mode"    expression="${makemode}"/>
    </pfx-xslt>
  </target>

  <target name="web_xml" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/webapps/**/WEB-INF/web.xml">
    <!-- old target name in Makefile was "zoneprops" -->
    <pfx-webxml
      style="${dir.projects}/core/build/create_webxml.xsl"
      srcdir="${dir.projects}"
      destdir="${dir.tomcat}"
      extension=".xml"
      projects="servletconf/projects.xml"
      corewebxml="core/conf/web.xml"
     >
      <param name="docroot" expression="${dir.docroot}"/>
      <param name="fqdn"    expression="${fqdn}"/>
      <param name="uid"     expression="${uid}"/>
      <param name="machine" expression="${machine}"/>
      <param name="mode"    expression="${makemode}"/>
    </pfx-webxml>
  </target>

  <target name="stylesheets" depends="ant-tasks" description="creates **/*.xsl from **/*.xsl.in with create_stylesheet.xsl">
    <pfx-xslt
     style="${dir.projects}/core/build/create_stylesheet.xsl"
     srcdir="${dir.projects}"
     destdir="${dir.projects}"
     includes="**/*.xsl.in"
     extension=""
     >
      <param name="docroot" expression="${dir.docroot}"/>
      <param name="fqdn"    expression="${fqdn}"/>
      <param name="uid"     expression="${uid}"/>
      <param name="machine" expression="${machine}"/>
      <param name="mode"    expression="${makemode}"/>
    </pfx-xslt>
  </target>

  <target name="pfixlog_xml" depends="ant-tasks" description="creates common/conf/pfixlog.xml from common/conf/pfixlog.xml.in with core/build/create_log4j_config.xsl">
    <pfx-xslt
     style="${dir.projects}/core/build/create_log4j_config.xsl"
     srcdir="${dir.projects}"
     destdir="${dir.projects}"
     includes="common/conf/pfixlog.xml.in"
     extension=""
     >
      <param name="docroot" expression="${dir.docroot}"/>
      <param name="fqdn"    expression="${fqdn}"/>
      <param name="uid"     expression="${uid}"/>
      <param name="machine" expression="${machine}"/>
      <param name="mode"    expression="${makemode}"/>
    </pfx-xslt>
  </target>

  <target name="newprjlog_xml" depends="ant-tasks" description="creates common/conf/newprjlog.xml from common/conf/newprjlog.xml.in with core/build/create_log4j_config.xsl">
    <pfx-xslt
     style="${dir.projects}/core/build/create_log4j_config.xsl"
     srcdir="${dir.projects}"
     destdir="${dir.projects}"
     includes="common/conf/newprjlog.xml.in"
     extension=""
     >
      <param name="docroot" expression="${dir.docroot}"/>
    </pfx-xslt>
  </target>

  <target name="apache_conf" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/apache.conf from servletconf/projects.xml with core/build/create_apacheconf.xsl">
    <pfx-xslt
     infile="${dir.projects}/servletconf/projects.xml"
     outfile="${dir.tomcat}/apache.conf"
     style="${dir.projects}/core/build/create_apacheconf.xsl"
     >
      <param name="docroot"   expression="${dir.docroot}"/>
      <param name="fqdn"      expression="${fqdn}"/>
      <param name="uid"       expression="${uid}"/>
      <param name="machine"   expression="${machine}"/>
      <param name="mode"      expression="${makemode}"/>
    </pfx-xslt>
  </target>

  <target name="jk_conf" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/jk.conf from servletconf/projects.xml with core/build/create_jkconf.xsl">
    <pfx-xslt
     infile="${dir.projects}/servletconf/projects.xml"
     outfile="${dir.tomcat}/jk.conf"
     style="${dir.projects}/core/build/create_jkconf.xsl"
     >
      <param name="docroot"   expression="${dir.docroot}"/>
      <param name="fqdn"      expression="${fqdn}"/>
      <param name="uid"       expression="${uid}"/>
      <param name="machine"   expression="${machine}"/>
      <param name="mode"      expression="${makemode}"/>
    </pfx-xslt>
  </target>

  <target name="workers_prop" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/workers.prop from servletconf/projects.xml with core/build/create_workersprop.xsl">
    <pfx-xslt
     infile="${dir.projects}/servletconf/projects.xml"
     outfile="${dir.projects}/servletconf/tomcat/workers.prop"
     style="${dir.projects}/core/build/create_workersprop.xsl"
     >
      <param name="docroot"   expression="${dir.docroot}"/>
      <param name="fqdn"      expression="${fqdn}"/>
      <param name="uid"       expression="${uid}"/>
      <param name="machine"   expression="${machine}"/>
      <param name="mode"      expression="${makemode}"/>
      <param name="java_home" expression="${javahome}"/>
    </pfx-xslt>
  </target>

  <target name="server_xml" depends="ant-tasks, projects_xml" description="creates servletconf/tomcat/conf/server.xml from servletconf/projects.xml with core/build/create_serverxml.xsl">
    <pfx-xslt
     infile="${dir.projects}/servletconf/projects.xml"
     outfile="${dir.projects}/servletconf/tomcat/conf/server.xml"
     style="${dir.projects}/core/build/create_serverxml.xsl"
     >
      <param name="docroot"   expression="${dir.docroot}"/>
      <param name="fqdn"      expression="${fqdn}"/>
      <param name="uid"       expression="${uid}"/>
      <param name="machine"   expression="${machine}"/>
      <param name="mode"      expression="${makemode}"/>
      <param name="trusted"   expression="${trusted.tomcat}"/>
      <param name="standalone" expression="${standalone.tomcat}"/>
      <param name="portbase"   expression="${portbase.tomcat}"/>
    </pfx-xslt>
  </target>

  <target name="tomcat.dir.opt">
    <available file="${dir.tomcat}/bin/catalina.sh" type="file" property="dir.tomcat.exists" />
    <antcall target="tomcat.dir.missing"/>
  </target>
  <target name="tomcat.dir.missing" unless="dir.tomcat.exists">
    <antcall target="tomcat.dir"/>
  </target>

  <target name="tomcat.dir">
    <antcall target="tomcat.extract"/>
    <antcall target="tomcat.strip"/>
    <antcall target="tomcat.user"/>
    <antcall target="tomcat.cert"/>
    <antcall target="tomcat.jmx"/>
  </target>

  <target name="tomcat.extract">
    <path id="src.path">
      <fileset dir="lib/tomcat" includes="jakarta-tomcat-*.tar.gz"/>
    </path>
    <pathconvert property="tomcat.bindist" refid="src.path" dirSep="/"/>
    <echo>tomcat dist file: ${tomcat.bindist}</echo>
    <available file="${tomcat.bindist}" type="file" property="tomcat.bindist.exists" />
    <fail unless="tomcat.bindist.exists" message="tomcat dist file not found"/>

    <delete dir="${dir.tomcat}"/>
    <property name="dir" location="${dir.tomcat}/.."/>
    <untar src="${tomcat.bindist}" dest="${dir}" compression="gzip"/>
    <path id="dest.path">
      <dirset dir="${dir}" includes="jakarta-tomcat-*"/>
    </path>
    <pathconvert property="tmp.tomcat" refid="dest.path" dirSep="/"/>
    <echo>tmp directory: ${tmp.tomcat}</echo>
    <available file="${tmp.tomcat}" type="dir" property="tmp.tomcat.exists" />
    <fail unless="tmp.tomcat.exists" message="tmp.tomcat not found"/>
    <move todir="${dir.tomcat}">
      <fileset dir="${tmp.tomcat}" />
    </move>

    <!-- cvs would remove this dir, event though we cvs-ignore it! -->
    <touch file="${dir.tomcat}/logs/dontpruneme"/>
  </target>

  <target name="tomcat.strip">
    <delete dir="${dir.tomcat}/conf/Catalina"/>

    <!-- remove predefined web-apps -->
    <delete dir="${dir.tomcat}/webapps"/>
    <mkdir dir="${dir.tomcat}/webapps"/>

    <!-- we keep server/webapps, it contains tomcat manager -->

    <delete>
      <fileset dir="${dir.tomcat}/conf">
        <include name="jk2.properties"/>
        <include name="server-minimal.xml"/>
        <include name="server.xml"/>
      </fileset>
    </delete>
  </target>

  <target name="tomcat.user">
    <echo file="${dir.tomcat}/conf/tomcat-users.xml"><![CDATA[<?xml version='1.0' encoding='utf-8'?>
<tomcat-users>
  <role rolename="manager"/>
  <user username="admin" password="pass" roles="manager, admin"/>
</tomcat-users>]]></echo>
  </target>

  <target name="tomcat.cert">
    <genkey alias="tomcat" storepass="secret" keyalg="RSA" keystore="${dir.tomcat}/conf/keystore">
      <dname>
        <param name="CN" value="ue.schlund.de"/>
        <param name="OU" value="Unix Development"/>
        <param name="O"  value="Schlund und Partner"/>
        <param name="C"  value="DE"/>
      </dname>
    </genkey>
  </target>

  <target name="tomcat.jmx">
    <!-- work-around bug 29056 -->
    <copy file="lib/jmxri-1.2.1.jar" tofile="${dir.tomcat}/bin/jmx.jar" overwrite="true"/>
  </target>

  <target name="webservice-config" depends="ant-tasks" description="creates webservice.conf">
    <pfx-xslt
      style="${dir.projects}/core/build/create_webservice.xsl"
      srcdir="${dir.projects}"
      destdir="${dir.projects}"
      includes="**/webservice.conf.in"
      extension=""
    >
      <param name="docroot" expression="${dir.docroot}"/>
      <param name="fqdn"    expression="${fqdn}"/>
      <param name="uid"     expression="${uid}"/>
      <param name="machine" expression="${machine}"/>
      <param name="mode"    expression="${makemode}"/>
    </pfx-xslt>
  </target>
    
  <target name="webservice" depends="ant-tasks,webservice-config">
    <pfx-webservice
      fqdn="${fqdn}" 
      tmpdir="${dir.projects}/.webservice"
      prjdir="${dir.projects}"
      wsddskel="${dir.projects}/common/conf/server-config.wsdd"
      prjfile="${file.projects_xml}" 
      srcdir="${dir.src}"
      builddir="${dir.build}"
      webappsdir="${dir.tomcat}/webapps"
    />
  </target>

  <target name="clean-webservice">
    <delete dir="${dir.projects}/.webservice"/>
  </target>

  <!-- all: depends on a readily built project -->
  <target name="webapp" depends="all, webapp.dir, webapp.tomcat.opt"/>
	
  <target name="webapp.init" depends="ant-tasks">
    <fail unless="webapp.name" message="please provide property webapp.name"/> 
    <property name="engine.dir" location="${basedir}/dist/webapps"/>
    <property name="host.dir" location="${engine.dir}/${webapp.name}"/>
    <property name="webapp.dir" location="${host.dir}/xml"/>
    <property name="webapp.tomcat.dir" location="${basedir}/dist/tomcat"/>
  </target>    

  <target name="webapp.dir" depends="webapp.init">
    <delete dir="${host.dir}"/>
    <mkdir dir="${host.dir}"/> 
    <mkdir dir="${webapp.dir}"/> 
    <mkdir dir="${webapp.dir}/WEB-INF/classes"/>
    <mkdir dir="${webapp.dir}/WEB-INF/lib"/>
    <copy todir="${webapp.dir}/WEB-INF/lib">
        <fileset dir="${dir.lib}">
           <include name="*.jar"/>
        </fileset>
    </copy>
    <copy todir="${webapp.dir}/WEB-INF/classes">
        <fileset dir="${dir.build}">
        </fileset>
    </copy>

    <xslt style="${dir.projects}/core/build/create_webapp_projectsxml.xsl" in="${dir.projects}/servletconf/projects.xml"
     out="${webapp.dir}/projects.xml">
        <param name="projectname"  expression="${webapp.name}"/>    
        <param name="docroot"  expression="${webapp.dir}"/>    
    </xslt> 
    <copy todir="${webapp.dir}">
        <fileset dir="${dir.projects}">
            <include name="core/**"/>
            <include name="common/**"/>
            <include name="${webapp.name}/**"/>
            <include name=".cache/${webapp.name}/**"/>

            <!-- ralf's "new project" tool is excluded because it contains absolute paths -->
            <exclude name="common/conf/newprjlog.xml*"/>
            <exclude name="common/conf/newproject.prop*"/>
        </fileset>    
    </copy>
   
    <pfx-webxml
      style="${dir.projects}/core/build/create_webxml.xsl"
      srcdir="${webapp.dir}"
      destdir="dist"
      extension=".xml"
      projects="projects.xml"
      corewebxml="core/conf/web.xml"
     >
      <param name="docroot" expression="${dir.docroot}"/>
      <param name="fqdn"    expression="${fqdn}"/>
      <param name="uid"     expression="${uid}"/>
      <param name="machine" expression="${machine}"/>
      <param name="mode"    expression="${makemode}"/>
    </pfx-webxml>
    <move todir="${webapp.dir}/WEB-INF" file="${host.dir}/WEB-INF/web.xml"/>
    <delete dir="${host.dir}/WEB-INF/"/>
   
    <antcall target="-webapp.context">
      <param name="file" value="${host.dir}/context-main.xml"/>   
      <param name="path" value="/xml"/>
      <param name="docbase" value="."/>
    </antcall>
  	
  	<war destfile="${webapp.dir}/../../xml.war" webxml="${webapp.dir}/WEB-INF/web.xml">
  		<fileset dir="${webapp.dir}"/>
  	</war>
  </target>
 
  <target name="-webapp.context">
  </target>
    
  <target name="webapp.tomcat.opt" depends="webapp.init" >
    <available file="${webapp.tomcat.dir}/bin/catalina.sh" type="file" property="webapp.tomcat.exists" />
    <antcall target="webapp.tomcat.missing"/>
  </target>
  <target name="webapp.tomcat.missing" unless="webapp.tomcat.exists">
    <antcall target="webapp.tomcat"/>
  </target>

  <target name="webapp.tomcat" depends="webapp.init">
    <antcall target="tomcat.dir">
      <param name="dir.tomcat" value="${webapp.tomcat.dir}"/>
    </antcall> 
    <antcall target="apache_conf">
      <param name="dir.tomcat" value="${webapp.tomcat.dir}"/>
    </antcall> 
    <antcall target="jk_conf">
      <param name="dir.tomcat" value="${webapp.tomcat.dir}"/>
    </antcall> 
    <pfx-xslt
     infile="${webapp.dir}/projects.xml"
     outfile="${webapp.tomcat.dir}/conf/server.xml"
     style="${dir.projects}/core/build/create_webapp_serverxml.xsl"
     >
      <param name="docroot"   expression="${engine.dir}"/>
      <param name="fqdn"      expression="${fqdn}"/>
      <param name="uid"       expression="${uid}"/>
      <param name="machine"   expression="${machine}"/>
      <param name="mode"      expression="${makemode}"/>
      <param name="trusted"   expression="${trusted.tomcat}"/>
      <param name="standalone" expression="${standalone.tomcat}"/>
      <param name="portbase"   expression="${portbase.tomcat}"/>
    </pfx-xslt>
   
    <apply executable="chmod" os="Linux">
      <arg line="a+x"/>
      <fileset dir="${webapp.tomcat.dir}" includes="**/*.sh"/>
    </apply>
    
  </target>   
 
    
  <description>
    Targets
    -------
    all [default]:  Builds all files required to run ./startTomcat.sh
    generate-src:   Generates .java from .iwrp files
    compile:        Compiles all java files.
    generate:       Generates all top level targets to
    ${dir.projects}/.cache
    run/debug:      Runs tomcat. Advantage over ./startTomcat.sh:
    Ensures all files are build before
    starting tomcat. Drawback: As tomcat is started
    as an external process, there is one more java vm
    in memory, that does nothing but waiting for tomcat
    to exit.
    checkfiles:     Searches .xml files for unused include parts and
    writes report to dir.projects/CHECKOUTPUT.xml
    noop:           Echos the name of the project
    clean:          Deletes files created by target all.
    echoproperties: Dumps all properties and exits.

    Properties
    ----------
    -Dmakemode=
    value:       test|prod
    test: development mode, editing features enabled
    prod: production mode, editing features disabled
    Controls availablilty of editing features of the pustefix
    content management system:
    * the editor console, used for displaying information
    and setting the page to editable
    * automatic regeneration of pages changend on disc
    environment: MAKE_MODE
    default:     -
    mandatory:   yes

    -Djavahome=
    value:       location of the root directory of the j2se installation
    used for generation of
    ${dir.projects}/servletconf/tomcat/workers.prop
    environment: PFX_JAVA_HOME, JAVA_HOME
    default:     -
    mandatory:   yes

    -Dgen=
    value:       include pattern for searching depend.xml files
    for target generate. E.g. for generating only
    project1 and project2 use: ant
    -Dgen="project1/**/depend.xml, project2/**/depend.xml"
    For more info on pattern matching see
    http://ant.apache.org/manual/dirtasks.html#patterns
    environment: -
    default:     **/depend.xml
    mandatory:   no

    -Dbuild.compiler=
    value:       jikes, modern, ...
    see http://ant.apache.org/manual/CoreTasks/javac.html
    environment: -
    default:     modern
    mandatory:   no

    -Djavac.nowarn=
    value:       true, false
    Indicates whether the -nowarn switch should be passed to the compiler
    see http://ant.apache.org/manual/CoreTasks/javac.html
    environment: -
    default:     false
    mandatory:   no

    -Dvalidate=
    value:       true, false, dynamic
    Indicates whether certain xslt transformations perform validation of input
    documents. 
    If true, perform validation, fail if no schema could be found.
    If false, do not perform validation
    If dynamic, perform validation if there is a schema, do not fail otherwise.
    environment: -
    default:     dynamic
    mandatory:   no

    -Ddebugopts=
    value:       see java -X
    environment: -
    default:     ${debugopts}
    mandatory:   no

    Note about Properties
    ---------------------
    This build file defines several targets and properties. Targets
    are a collection of actions, that may depend on the execution of
    other targets and can be parametrized by setting properties.
    Ant properties are immutable, so for customization of the build
    process, knowledge about the order of definition is essential.
    Order of definition:
    1) Commandline. E.g. ant -Dproperty=value
    2) If file ${basedir}/build.properties exists it is read
    3) Environment variables are loaded as properties with prefix "env."
    4) Target "properties": Many targets using properties depend on task
    "properties". Within this target, properties whose values depend on
    the values of other properties are defined.

  </description>

</project>

<!--
Local Variables:
sgml-indent-step: 4
End:
-->
