Documentation of the XSL-Tags in Pustefix


Requirement:
-----------
All xsl-template tags in Pustefix (pfixcore) can now be documentated. 
The *.xsl-files will be renamed in *.xsl.in files. The documentation has to be put
in an XML tree directly below the according XSL template tag in the *.xsl.in-File.
The *.xsl.in files will be transformed in the pristinely *.xsl - files, without the
documentation subtree of course.       

You can select the documentation in the Pustefix-Editor by using the documentation
button in the top navigation. Now all the xsl templates will be shown on the left
side of the frame. Choose a xsl template and the documentation will be displayed
in the right frame. Xsl tags which are not documentated will be displayed with
a blue "!".

You have to add the the xsl files in your /servletcont/projects.xml to the
according project (via <documentation><doc_file>A_FILENAME</doc_file><documentation>)

E.g.

<project name="sample1">
[...]
    <documentation>
      <doc_file><cus:docroot/>core/xsl/navigation.xsl.in</doc_file>
      <doc_file><cus:docroot/>core/xsl/utils.xsl.in</doc_file>
      <doc_file><cus:docroot/>core/xsl/forminput.xsl.in</doc_file>
      <doc_file><cus:docroot/>core/xsl/master.xsl.in</doc_file>
      <doc_file><cus:docroot/>core/xsl/include.xsl.in</doc_file>
      <doc_file><cus:docroot/>sample1/xsl/metatags.xsl.in</doc_file>
    </documentation>  
</project>

The documentation tree
----------------------

All documentation trees start with <cus:documentation>

Other nodes are:

<description>
Write a detailed description of the tag.

Then you have to add the most important parameters. Use the <param> node for this.

<param required="1|0">
The attribute required = 1 means, that the parameter must be set
The attribute required = 0 means, that setting this parameter is optional

Important parameters are:
- attributes that must be set
- attributes that have a standard value (which is overriden by setting this params)
- other attributes (like onmout + onmover in pfx:jscript)

You don't have to add the attributes which will only be copied
(E.g. in pfx:image, you can set all attributes that are valid for a
html <img> tag, as they are just copied through into the resulting
<img> tag. There is no need to list them in the documentation.)

The child nodes of the <param> tag are:
Name of the param:                <name>...</name>
Possible values:                  <posible_values>(e.g. true|false)</posible_values>
Standard values                   <standard>...</standard>
A short description of the param: <description>...</description>

Some Pustefix tags also expect child tags like <pfx:argument> in <pfx:button>. These
are listed via a <child> node.

The child nodes of the <child> tag are:
The name of the child tag:            <name>...</name>
A short description of the child tag: <description>...</description>

You also can add several examples. An example always excepts an <input> node
and an <output> node.

<example>
  <input>
    <xmlcode><pfx:blank/></xmlcode>
  </input>
  <output>
    ...
  </output>
</example>

By using <xmlcode> you can add sample-code to your descriptions or your
example. Important: You must use <xmlcode>, otherwise the transformer tries
to transform the tags and then you'll probably get an error.


Note:
----
Every single tag has an unique id. This id is displayed in []. This name
contains several informations like match|name|node (e.g. [ Match="pfx:blank" ])
The tag id will be generated automatically.


Example:
-----------------------------------

<xsl:template match="pfx:blank">
 <cus:documentation>
 <description>Inserts a transparent .gif of the specified 
              width and height (default  width=1 height=1)
  </description>

  <param>
     <name>src</name>
     <standard_value>/core/img/blank.gif</standard_value>         
     <posible_values></posible_values>
  </param>

  <param>
     <name>width</name>
     <standard_value>1</standard_value>         
     <posible_values></posible_values>
  </param>

  <param>
     <name>height</name>
     <standard_value>1</standard_value>         
     <posible_values></posible_values>
  </param>

  <example>
    <input>Some Text here... 
     <xmlcode>
       <pfx:blank/>
     </xmlcode>
    </input>
    <output>Some more Text here...
      <xmlcode>
        <img src="/core/img/blank.gif" width="1" height="1" border="0" alt="">
      </xmlcode>
    </output>
  </example>
 </cus:documentation>
[...]
<xsl:template match>


 
 








