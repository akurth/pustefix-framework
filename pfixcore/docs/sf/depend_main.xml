<div>
  <h1>The depend.xml.in file</h1>

  <p>
    The <code>depend.xml</code> configuration file serves two
    purposes: First, it is used to create the <i>hierarchical page
    structure</i> of the project by defining a <i>tree of pages</i>.
    Then, it is used to define the internal structure of the pages by
    defining, for every single page, the <i>tree of transformations</i>
    that need to be applied to certain files to get the final
    stylesheet (which is the representation of the page in
    <pustefix/>). For an overview over the transformation aspect of
    the whole framework, please go <a href="xml.html">here</a>.
  </p>

  <p>To make life a little easier, you <b>never edit the <code>depend.xml</code> file directly,
      but instead a <code>depend.xml.in</code> file</b> which is used to
    produce the <code>depend.xml</code> file (this is done
    automatically by the build system of the skeleton package and the
    CVS checkout).
  </p>
  
  <p>The structure of the config file is show below:
  </p>

  <a name="record_dir"/>
  
  <xmlcode>
    <make cachedir="..." recorddir="...">
      <xmlcodeOFF>
        <table class="stdtable">
          <tr>
            <th>Attribute</th>
            <th>Notes</th>
          </tr>
          <tr>
            <td>cachedir</td>
            <td>
              <p>This attribute designates a directory where the generated stylesheets are saved to.</p>
              <p>NOTE: The attribute is <b>mandatory</b>; you must give a path relative to the <b>docroot</b> here!</p>
            </td>
          </tr>
          <tr>
            <td>record_dir</td>
            <td>
              <p>This attribute designates the directory that is used
              to save recorded trails to (see the documentation for
              the <a href="testclient.html">testclient</a> to learn
              more about the use of this attribute).</p> <p>NOTE: The
              attribute is <b>optional</b>, if given, it must be
              either an absolute path name or a relative path which is
              interpreted as being relative to the <b>docroot</b></p>
            </td>
          </tr>
        </table>
      </xmlcodeOFF>
      <navigation>
        <xmlcodeOFF>
          <div class="comment">
            This tag has only <code>page</code> nodes as
            children. The tree of pages matches the hierarchy of the
            project's sitetree.</div>
        </xmlcodeOFF>
        <page name="foo" handler="/xml/static" accesskey="F">
          <page name="sub_foo1" handler="/xml/static"/>
          <page name="sub_foo2" handler="/xml/static"/>
          ...
        </page>
        <page name="bar" handler="/xml/config">
          ...
        </page>
        ...
        <xmlcodeOFF>
          <table class="stdtable">
            <tr>
              <th>Attribute</th>
              <th>Notes</th>
            </tr>
            <tr>
              <td>
                name
              </td>
              <td>
                <p>
                  The name of the page. This name is used throughout
                  <pustefix/> to reference the page (e.g. when creating
                  internal links and in other config files).
                </p>
                <p>
                  NOTE: This attribute is <b>mandatory</b>
                </p>
              </td>
            </tr>
            <tr>
              <td>
                handler
              </td>
              <td>
                <p>This attribute tells the system which servlet is
                  used to handle requests for this page. You can think
                  of the <code>handler</code> attribute as a project wide servlet "name" 
                  as defined in the <a href="project.html">project definition</a></p>
                <p>
                  NOTE: This attribute is <b>mandatory</b>
                </p>
              </td>
            </tr>
            <tr>
              <td>
                accesskey
              </td>
              <td>
                <p>This attribute defines a default access key that will be used by the <code>pfx:button</code> and
                  <code>pfx:jsbutton</code> tags for the links they generate.
                </p>
                <p>
                  This attribute is <b>optional</b>
                </p>
              </td>
            </tr>
          </table>
        </xmlcodeOFF>
      </navigation>
      <xmlcodeOFF/>
      <target name="a_target_name.xsl"       type="[xsl|xml]">...</target>
      <target name="another_target_name.xml" type="[xsl|xml]">...</target>
      ...
      <standardpage name="a_page_name"       xml="a_base_xml_file.xml">...</standardpage>
      <standardpage name="another_page_name" xml="a_base_xml_file.xml">...</standardpage>
      ...
      <xmlcodeOFF>
        <div class="comment">
          <p>The only other tags allowed besides the
            <code>navigation</code> tag are <code>target</code>
            and <code>standardpage</code>. <b>The latter is only a
              convenience tag that can be expressed fully in terms
              of <code>target</code> tags</b> (Expanding the
            <code>standardpage</code> tag is one of the duties
            of the transformation <code>depend.xml.in</code>
            => <code>depend.xml</code> mentioned above).</p>
          <p> See below for a detailed explanation of targets and their configuration</p>
        </div>
      </xmlcodeOFF>
    </make>
  </xmlcode>

  <h2>Targets</h2>

  <xmlcode>
    <target name="master.xsl" type="xsl">
      <xmlcodeOFF>
        <table class="stdtable">
          <tr>
            <th>
              Attribute
            </th>
            <th>
              Notes
            </th>
          </tr>
          <tr>
            <td>
              name
            </td>
            <td>
              The name of the target. This name must be unique for the whole project (NOT the whole environment!)
            </td>
          </tr>
          <tr>
            <td>
              type
            </td>
            <td>
              Must be <b>xsl</b> for a target that should be "compiled" into a templates object. Must be <b>xml</b> for every
              target that is used as input for a transformation.
            </td>
          </tr>
        </table>
      </xmlcodeOFF>
      <depxml name="core/xsl/master.xsl"/>
      <depxsl name="MyProject/xsl/custommaster.xsl"/>
      <xmlcodeOFF>
        <div class="comment">
          <code>depxml</code> and <code>depxsl</code> reference other
          targets by their <code>name</code> attribute that serve as
          the XML resp. XSL input used to create this target via a XSL
          transformation. If for a given <code>name</code> attribute of either
          <code>depxml</code> or <code>depxsl</code> no other target definition is found,
          the transformation parent is supposed to be a leaf target and the <code>name</code> attribute
          is interpreted as a path relative to the docroot.
        </div>
      </xmlcodeOFF>
      <depaux name="core/xsl/default_copy.xsl"/>
      <depaux name="core/xsl/include.xsl"/>
      <depaux name="core/xsl/navigation.xsl"/>
      <depaux name="core/xsl/utils.xsl"/>
      <depaux name="core/xsl/forminput.xsl"/>
      <xmlcodeOFF>
        <div class="comment">
          <p>
            <code>depaux</code> tags create user defined dependencies on
            the files they reference in their <code>name</code>
            attribute. Whenever the target generation system is asked
            for a target, all its dependencies are checked whether their
            modification time is older than the creation time of the
            target. Dependencies include by design the
            <code>depxml</code> and <code>depxsl</code> targets (which
            may be files in the case of a leaf target or another
            virtual target that returns its own creation time as the modification time) and all
            include files from which include parts are taken during
            the transformation of the target.
          </p>
          <p>
            If any of these files or targets has been changed after
            the target was built, it is taken care of that the target
            is rebuild.
          </p>
          <p>
            <code>depaux</code> just adds more dependencies "by hand"
            that are not automatically detected. In the example
            above, the files referenced are XSLT stylesheets that are included via <code>xsl:include</code> into
            the <code>master.xsl</code> stylesheet. Such external dependencies are not currently recognized automatically.</p>
          <p>E.g. if you use a <code>skin.xsl</code> stylesheet, you
            need to add the following line to the target
            definition of <code>master.xsl</code> and <code>metatags.xsl</code></p>
          <xmlcode>
            <depaux name="MyProject/xsl/skin.xsl"/>
          </xmlcode>
        </div>
      </xmlcodeOFF>
      <param name="product" value="MyProject"/>
      <param name="lang"    value="en"/>
      <xmlcodeOFF>
        <div class="comment">
          <code>param</code> tags supply XSL transformation parameters that are used when the target is generated.
          You can supply any parameter you want, but there are two parameters
          that <b>need to be supplied</b> in the target definition of <code>master.xsl</code> and <code>metatags.xsl</code>:
          <ul>
            <li><b>product</b>: This parameter is needed so the system
            knows which product branch of include parts should be
            used.</li>
            <li><b>lang</b>: This is the language that
            should be used for include parts if it isn't changed
            explicitly at runtime.</li>
          </ul>
          You <b>must never supply</b> a <code>param</code> named <code>docroot</code>. This parameter is inserted automatically
          during the transformation <code>depend.xml.in</code> => <code>depend.xml</code>.
        </div>
      </xmlcodeOFF>
    </target>
  </xmlcode>

  <h2>Standard page definition</h2>
  The <code>standardpage</code> tag is a convenience tag that encapsulates the typical definition of
  a complete page in the <pustefix/> system.
  <xmlcode>
    <standardpage name="home"  xml="MyProject/xml/SampleLayout.xml"/>
    <xmlcodeOFF>
      <table class="stdtable">
        <tr>
          <th>Attribute</th>
          <th>Notes</th>
        </tr>
        <tr>
          <td>name</td>
          <td>The name of the page. This must be a name already defined in a <code>page</code> tag in the navigation tree.</td>
        </tr>
        <tr>
          <td>xml</td>
          <td>The name of a xml target to use as input for the "metatags transformation". Often this is a leaf target and
            one of the projects <i>structural xml files</i> (see <a href="xml.html">here</a>).</td>
        </tr>
      </table>
      <br/>
    </xmlcodeOFF>
  </xmlcode>
  <p>after performing the transformation <code>depend.xml.in</code> => <code>depend.xml</code>
    (automatically done by the build system in the skeleton package and the CVS checkout) this becomes</p>
  <xmlcode>
    <target name="home.xsl" type="xsl">
      <depxml name="home.xml"/>
      <depxsl name="master.xsl"/>
      <param name="page" value="home"/>
      <xmlcodeOFF>
        <div class="comment">
          For every target that is only used in the generation of one single page (if you look at the example given
          <a href="xml.html">here</a>, this is true for the generated targets <code>BazPage.xml</code> and <code>BazPage.xsl</code>)
          you <b>must give a parameter called <code>page</code> with the name of the resulting page as the value</b>.
          While the <code>standardpage</code> tag does this automatically for you make sure that you don't forget it for target
          structures you define yourself.
        </div>
      </xmlcodeOFF>
      <param name="docroot" value="/some/absolute/path/to/your/pustefix/projects"/>
      <xmlcodeOFF>
        <div class="comment">
          As mentioned above, the transformation <code>depend.xml.in</code> => <code>depend.xml</code>
          inserts a <code>param</code> called <code>docroot</code>.
        </div>
      </xmlcodeOFF>
    </target><xmlcodeOFF/>
    <target name="home.xml" type="xml">
      <depxml name="MyProject/xml/SampleLayout.xml"/>
      <depxsl name="metatags.xsl"/>
      <param name="page" value="home"/>
      <param name="docroot" value="/some/absolute/path/to/your/pustefix/projects"/>
    </target>
  </xmlcode>

</div>

  
