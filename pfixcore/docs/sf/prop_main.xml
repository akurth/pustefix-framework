<div xmlns:cus="http://www.schlund.de/pustefix/customize">

  <h1>Property files in <pustefix/></h1>

  <h2>Overview</h2>

  <p>The configuration of the Java part of the framework (which
    encompasses all the servlets and other services used by the application) is done
    with standard java property files. Those property files are not
    edited directly, but instead property source files (with the extension
    <code>.prop.in</code>) are used. These files use XML tags to
    describe properties. Additionally a customization mechanism is
    provided that helps to configure the configuration files according
    to local needs.</p>

  <p>The general structure of a <code>.prop.in</code> file is very easy:</p>
  
  <xmlcode>
    <properties>
      <xmlcodeNS ns="cus">http://www.schlund.de/pustefix/customize</xmlcodeNS>
      <xmlcodeOFF>
        <div class="comment">
          The <code>cus</code> namespace is needed to use the customization tags explained below.
        </div>
      </xmlcodeOFF>
      <prop name="statuscodefactory.messagefile">common/dyntxt/statusmessages.xml</prop>
      <xmlcodeOFF>
        <div class="comment">
          The <code>prop</code> tag is the most primitive way to enter a single property.
          The example above would simply result in the java property<br/><br/>
          <code>statuscodefactory.messagefile=common/dyntxt/statusmessages.xml</code><br/>
        </div>
      </xmlcodeOFF>
    </properties>
  </xmlcode>

  <p><a name="custom"/><pustefix/> allows to customize the creation of the property files in certain ways. When the build system
  starts the transformation of the <code>.prop.in</code> files to <code>.prop</code> files, it supplies certain parameters
  to the transforming stylesheet.</p>

  <ul>
    <li>
      The value of the <b>MAKE_MODE</b> environment variable, or
      "<b>test</b>" if the variable is not set (the default behavior
      can be changed by tweaking the makefiles). This can be used to
      easily switch preferences depending on the "mode" that is active
      when the application is made, e.g. "test" on the development
      machines, and "prod" on the production servers. The value is supplied as the parameter <code>mode</code>.
      Note that the value of MAKE_MODE also determines if certain features like the
      possiblity to use the <pustefix/> editor or to get the XML result instead of the rendered page
      are allowed. These features are turned off for security reasons when the mode is "prod".
    </li>
    
    <li>The <code>docroot</code>, i.e. the directory where your project's configuration and XML/XSLT files are located in.</li>

    <li>The user id (<code>uid</code>) of the user that starts the build process.</li>

    <li>The full qualified domainname (as the parameter <code>fqdn</code> of the machine you start the build process.</li>

    <li>and the name  of the machine (<code>machine</code>) you start the build process on.</li> 
  </ul>

  <p>Certain customization tags work with these parameters:</p>

  <xmlcode>
    <properties>
      <xmlcodeNS ns="cus">http://www.schlund.de/pustefix/customize</xmlcodeNS>
      <prop name="foo"><cus:docroot/>/bar/baz.xml</prop>
      <xmlcodeOFF>
        <div class="comment">
          <p>Use this to enter pathnames that do not depend on
            the absolute location of the <pustefix/> environment in your filesystem.</p>
          <p>In the same way you can use <code>cus:machine</code>, <code>cus:fqdn</code> and <code>cus:uid</code>
            to print out the value of the supplied XSLT parameter.</p>
        </div>
      </xmlcodeOFF>
      <cus:choose>
        <cus:test mode="test">
          <xmlcodeOFF/>
        </cus:test>
        <cus:test uid="pfixuser">
          <xmlcodeOFF/>
        </cus:test>
        <cus:test machine="server1">
          <xmlcodeOFF>
            <div class="comment">
              <p>These three <code>cus:test</code> nodes above test for one of the supplied XSLT parameters...</p>
            </div>
          </xmlcodeOFF>
        </cus:test>
        <cus:test mode="prod" uid="pfixuser">
          <xmlcodeOFF/>
        </cus:test>
        <cus:test bool="or" mode="prod" machine="server1">
          <xmlcodeOFF>
            <div class="comment">
              <p>...while these two test for a combination of variables. Default for the test to pass is when <b>ALL</b>
                of the supplied XSLT parameters match the attribute values supplied. If you set the attribute <code>bool</code> to
                <code>or</code> instead, <b>ANY</b> matching parameter will let the complete test pass.</p>
            </div>
          </xmlcodeOFF>
        </cus:test>
        <cus:test>
          <xmlcodeOFF>
            <div class="comment">
              <p>The "default test" that will always pass.</p>
            </div>
          </xmlcodeOFF>
        </cus:test>
      </cus:choose>
    </properties>
  </xmlcode>

  <p>Several property files in <pustefix/> are constructed this way. While
    the <code>prop</code> tag would be sufficient to enter every java
    property, there are convenience tags defined for the configuration
    of the most commonly used servlets (see below).</p>
  <a name="list"/>
  <p>
    The table lists the property files that are used in a typical <pustefix/> system.
  </p>
  <table class="stdtable">
    <tr>
      <th>Propertyfile</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>
        <code>DOCROOT/common/conf/pustefix.prop.in</code>
      </td>
      <td>
        This is a file with common properties shared between all
        running servlets.  Properties set in this file can be
        overwritten by the servlet's specific property file.  A
        typical common property file looks similar to the one supplied
        with the skeleton application or the CVS checkout.
      </td>
    </tr>
    <tr>
      <td>
        <code>DOCROOT/MyProject/conf/*.prop.in</code>
      </td>
      <td>
        <p>The <code>conf</code> subdirectory of a project holds the
        servlet specific property files. These files describe
        among other things the mapping between <i>pages</i> and the
          <i>business logic</i> that handles them. Please read
          below for a detailed description of the property file syntax
          for the most common case of a <code>de.schlund.pfixxml.ContextXMLServer</code> servlet.
        </p>
        <p>The set of properties for a
          servlet is constructed in the following way: The common
          property file <code>pustefix.prop</code> is read, the the
          servlet specific property file is merged into the property
          object. This way it is possible to override properties
          defined in the common file with properties defined in the
          specific property file.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <code>DOCROOT/common/conf/factory.prop.in</code>
      </td>
      <td>
        <p>
          This property file is used for the special project
          <b>admcore</b>. This project is active in every pustefix
          environment and automatically starts a
          <code>de.schlund.pfixxml.FactoryInitServlet</code> servlet
          whenever the servletcontainer starts up to initialize
          services that are used by all the other projects.
        </p>
      </td>
    </tr>
  </table>
  
  <h1>Servlet propery files</h1>

  <h2>de.schlund.pfixxml.ContextXMLServer</h2>

  <a name="editmode"/>
  <xmlcode>
    <properties>
      <xmlcodeNS ns="cus">http://www.schlund.de/pustefix/customize</xmlcodeNS>
      <servletinfo depend="MyProject/conf/depend.xml" name="AUniqueNameForTheServlet">
        <xmlcodeOFF>
          <div class="comment">
            The attributes <code>depend</code> and <code>name</code> are <b>mandatory</b>.
            If <code>depend</code> starts with a '/' the value is used
            unchanged, otherwise (which is the usual case) it's interpreted as a path relative
            to the <b>docroot</b>
          </div>
        </xmlcodeOFF>
        <editmode  allow="true"/>
        <xmlcodeOFF>
          <div class="comment">
            <code>allow</code> needs to be set to <b>true</b>
            if you want to be able to use the pustefix editor. The whole node is optional.
          </div>
        </xmlcodeOFF>
        <ssl force="true"/>
        <xmlcodeOFF>
          <div class="comment">
            <code>force</code> must be set to <b>true</b> if the 
            servlet needs to run under SSL. The whole node is optional.
          </div>
        </xmlcodeOFF>
        <adminmode watch="AName" page="APageName"/>
        <xmlcodeOFF>
          <div class="comment">
            <code>watch</code> and <code>page</code> must both be given if the optional
            <code>adminmode</code> node is used at all.
          </div>
        </xmlcodeOFF>
      </servletinfo>
      <xmlcodeOFF/>
      <context defaultflow="AFlowName" class="AContextClass" authpage="APageName">
        <xmlcodeOFF>
          <table class="stdtable">
            <tr>
              <th>Attribute</th>
              <th>Description</th>
            </tr>
            <tr>
              <td><code>class</code></td>
              <td>Optional. If given, use it as the classname for the <code>Context</code> Implementation to use. Else,
                if <code>authpage</code> is given, use <code>de.schlund.pfixcore.workflow.AuthContext</code>. Else,
                use <code>de.schlund.pfixcore.workflow.Context</code>. In other words: Normally there's no need to
                explicitly supply this attribute.</td>
            </tr>
            <tr>
              <td><code>defaultflow</code></td>
              <td><b>Mandatory</b>. Must reference a valid <code>pageflow</code> (See below).</td>
            </tr>
            <tr>
              <td><code>authpage</code></td> <td>Optional. It must be given, if the servlet should supply a
                login/authentification page. If given, it must reference a valid <code>pagerequest</code> with
                a <code>authhandler</code> child node.</td>
            </tr>
          </table>
        </xmlcodeOFF>
      
        <resource class="AContextResource">
          <xmlcodeOFF>
            <div class="comment">
              <code>class</code> is <b>mandatory</b>, must be a
              <code>ContextResource</code>. There may be many
              <code>resource</code> tags given.
            </div>
          </xmlcodeOFF>
          <implements class="An_Interface">
            <xmlcodeOFF>
              <div class="comment">
                <code>class</code> is <b>mandatory</b>, must be an interface
                implemented by the ContextResource. There may be more
                than one <code>implements</code> tag for a
                ContextResource, but each interface must the be unique
                in the whole context. In other words: it's possible
                for a ContextResource to implement more than one interface, but not possible for one
                interface to be implemented by two ContextResources used in the same Context definition.
              </div>
            </xmlcodeOFF>
          </implements>
        </resource>                               
      </context>
      <xmlcodeOFF/>
      <pageflow name="AName" final="APageName" stopnext="true|false">
        <xmlcodeOFF>
          <table class="stdtable">
            <tr>
              <th>Attribute</th>
              <th>Description</th>
            </tr>
            <tr>
              <td>
                <code>name</code>
              </td>
              <td>
                <b>Mandatory</b>. Must be a unique name. 
              </td>
            </tr>              
            <tr>
              <td>
                <code>final</code>
              </td>
              <td>
                Optional, must reference a page with a valid
                <code>pagerequest</code> definition given in this
                property file.  There may be many pageflows defined
                for a servlet. A page may well be used in more than
                one pageflow.
              </td>
            </tr>              
            <tr>
              <td>
                <code>stopnext</code>
              </td>
              <td>
                Optional, defaults to false. If given and true, states
                inheriting from <code>StateImpl</code> (which should
                be almost all states) handle the next accessible page
                <i>after</i> the current page as if it had been
                triggered directly. This has the effect that the
                pageflow will stop at the next accessible page after
                the current page even if this page would normally be
                skipped in the workflow because it doesn't need any
                input.
              </td>
            </tr>              
          </table>
        </xmlcodeOFF>
        <flowstep name="AnotherPageName"/>
        <xmlcodeOFF>
          <div class="comment">
            <code>name</code> is <b>mandatory</b>, must reference a valid <code>pagerequest</code>.
            Usually there are many flowsteps defined in a pageflow.
          </div>
        </xmlcodeOFF>
      </pageflow>
      <xmlcodeOFF/>
      <pagerequest name="APageName" nostore="true">
        <xmlcodeOFF>
          <div class="comment">
            <code>name</code> is <b>mandatory</b>. It must be the name
            of a page defined in the corresponding depend.xml
            file.<br/>
            <code>nostore</code> is <b>optional</b>. If given, and set
            to <code>true</code> makes the page a so called
            <i>sidestep</i> page. This has the consequence that the
            resulting DOM tree is not stored in the session (so no
            frames are possible!) and that the status of the Context
            object (current page, current pageflow) isn't changed. The
            use of this feature is to allow for pages to act as
            e.g. CSS or JavaScript without disturbing the flow of the
            main pages. See also the section on <code>param</code>s below.
          </div>
        </xmlcodeOFF>
        <state class="AClassName"/>                              
        <xmlcodeOFF>
          <div class="comment">
            <p>The whole node is optional. If given, the
            <code>class</code> attribute must be the name of a java
              class implementing the <code>de.schlund.pfixcore.workflow.State</code>
              interface. The used <code>State</code> is determined as follows: </p>
            <ol>
              <li>If <code>state</code> is given, use the value of it's <code>class</code> attribute. Else:</li>
              <li>If the <code>pagerequest</code> has a <code>authhandler</code> child,
                use <code>de.schlund.pfixcore.workflow.app.DefaultAuthIWrapperState</code>. Else:</li>
              <li>If the pagerequest has a <code>ihandler</code> child, use
                <code>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</code>. Else:</li>
              <li>use "de.schlund.pfixcore.workflow.app.StaticState".</li>
            </ol>
          </div>
        </xmlcodeOFF>
        <finalizer class="AClassName"/>                       
        <xmlcodeOFF>
          <div class="comment">
            <p>The whole node is optional.
              It may only be given for a <code>State</code> that is either
              <code>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</code> or a descendent of it!</p>
            <p>The <code>class</code> attribute is mandatory and denotes a class implementing
              <code>de.schlund.pfixcore.workflow.app.ResdocFinalizer</code></p>
            <p>CAUTION: the use of Finalizers is <b>not suggested</b> most of the time! They can completely change the result document
            and the logic when to trigger the next step in the current page flow. Use them at your own risk.</p>
          </div><br/>
          <div class="comment" style="color: #cc0000;">
            <b>Caution below: only one of <code>ihandler</code> or <code>authhandler</code> may be given as a child node!</b>
          </div>
        </xmlcodeOFF>
        <ihandler policy="ANY|ALL">
          <xmlcodeOFF>
            <div class="comment">
              <p>The whole node is optional.
              It may only be given for a <code>State</code> that is either
              <code>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</code> or a descendent of it!</p>
              <p>
                <code>policy</code> is optional (default is <b>ANY</b>).
                The policy decides when a whole page is considered to be accessible:
              </p>
              <ul>
                <li>
                  ANY: just one of the associated handlers needs to
                  be active for the page to be accessible.</li>
                <li>
                  ALL: all the associated handlers need to be active for the
                  page to be accessible.</li>
              </ul>
              <p>If one of the associated handlers returns <b>false</b> on calling <code>prerequisitesMet()</code>,
                the page is of course still inaccessible.</p>
            </div>
          </xmlcodeOFF>
          <interface prefix="AName" class="AClassName" activeignore="true|false" continue="true|false"/>
          <xmlcodeOFF>
            <div class="comment">
              <p>
                There can be many <code>interface</code> nodes for a page.
                Each one references an "atomic" functional entity consisting
                of an <code>IWrapper</code> java class (usually autogenerated
                from a <code>.iwrp</code> xml file) that defines the type
                and names of the parameters passed between the UI and the
                functional entity and an associated <code>IHandler</code>
                java class that uses the <code>IWrapper</code> to retrieve the passed parameters via
                typed getter methods.</p>
              <br/>
              <table class="stdtable">
                <tr>
                  <th>Attribute</th>
                  <th>Description</th>
                </tr>
                <tr>
                  <td><code>class</code></td>
                  <td>
                    <b>Mandatory</b>. Must be the name of a java
                    class implementing
                    <code>de.schlund.pfixcore.generator.IWrapper</code>. This implicitly defines a
                    <code>de.schlund.pfixcore.generator.IHandler</code>, as
                    every IWrapper knows it's associated IHandler and can be queried for it.
                  </td>
                </tr>
                <tr>
                  <td><code>prefix</code></td>
                  <td>
                    <b>Mandatory</b>. The prefix defines a name for the
                    IWrapper and in effect a namespace for the
                    IWrapper's parameters. If the prefix "bar" is
                    defined for an IWrapper that contains a parameter called
                    "Foo", the submitted HTTP parameter must be called
                    <code>bar.Foo</code>.
                  </td>
                </tr>
                <tr>
                  <td><code>continue</code></td>
                  <td>
                    <p>Optional, defaults to <b>false</b>.</p>
                    <p>If the user submits data usually all defined
                      handlers are called. If the submit doesn't result in
                      errors, the usual action is that the context will
                      switch to the next page according to the current
                      <code>pageflow</code>.</p>
                    <p>
                      This is different when the
                      submit is <i>restricted</i> to a subset of one ore
                      more of the page's defined handlers.  The usual
                      action in this case is to <b>stay on the page</b> no
                      matter if the data submit was successful (no errors happened)
                      or not. <b>BUT:</b> if <b>ALL</b> of the handlers the submit was restricted to have the attribute
                      <code>continue</code> set to <b>true</b>, the context again will switch to the next page.
                    </p>
                    <p>
                      Note that all of the explained behavior can be
                      freely changed by the use of <b>Finalisers</b>
                      (See above).
                    </p>
                  </td>
                </tr>
                <tr>
                  <td><code>activeignore</code></td>
                  <td>
                    Optional, default is <b>false</b>. The <code>IHandler</code> method <code>isActive()</code> is <b>NOT</b>
                    called on handlers with <code>activeignore</code> set to <b>true</b>. In other words: the handler is ignored
                    when the system tries to find out if the page is accessible or not. See also the comment for the <code>policy</code>
                    attribute above.
                  </td>
                </tr>
              </table>
              <br/>
            </div>
          </xmlcodeOFF>
        </ihandler>
        <xmlcodeOFF/>
        <authhandler>
          <xmlcodeOFF>
            <div class="comment">
              <p>The whole node is optional.
                It may only be given for a page using a <code>State</code> that is either
                <code>de.schlund.pfixcore.workflow.app.DefaultAuthIWrapperState</code> or a descendent of it!</p>
              <p>There may be only one <code>pagerequest</code> using such a <code>State</code>,
                it must be the one that is also referred to via the <code>authpage</code> attribute of
                the <code>context</code> node above. Other
                <code>pagerequest</code> nodes <b>must not</b> have this subnode!</p>
            </div>
          </xmlcodeOFF>
          <authinterface prefix="AName" class="AClassName"/>
          <auxinterface prefix="AName" class="AClassName"/>
          <xmlcodeOFF>
            <div class="comment">
              <p>
                One and only one <code>authinterface</code> node <b>must</b> be given.
                <code>auxinterface</code> nodes are optional.
              </p>
              <p>
                The <code>prefix</code> and <code>class</code> attributes are mandatory for both nodes.
                The meaning is the same as for the <code>interface</code> subnodes of the <code>ihandler</code>
                node.
              </p>
              <p>
                The <code>authinterface</code> node denotes the one
                IWrapper/IHandler combo that is responsible to check
                the authentification of a user session. The
                <code>auxinterface</code> nodes denote additional
                IWrappers/IHandlers that are called together with the
                authentification handler if the authorization is granted.
              </p>
            </div>
          </xmlcodeOFF>
        </authhandler>
              
        <output>
          <xmlcodeOFF>
            <div class="comment">
              <p>The whole node is optional. Every page using a State that is itself or a descendant of
                <code>de.schlund.pfixcore.workflow.app.StaticState</code> can use this.</p>
              <p>You can have as many <code>resource</code> childnodes as you like.</p>
            </div>
          </xmlcodeOFF>
          <resource node="AName" class="AClassName"/>
          <xmlcodeOFF>
            <table class="stdtable">
              <tr>
                <th>Attribute</th>
                <th>Description</th>
              </tr>
              <tr>
                <td><code>class</code></td>
                <td><b>Mandatory</b>. <code>class</code> is one of the
                  ContextResources defined via <code>implements</code> above.
                </td>
              </tr>
              <tr>
                <td><code>node</code></td>
                <td><b>Mandatory</b>. <code>node</code> is the node in the output tree ("/formresult/<b>AName</b>") 
                  under which the ContextResource enters its data.</td>
              </tr>
            </table>
          </xmlcodeOFF>
        </output>
              
        <param name="APropertyKey">AValue</param>
        <xmlcodeOFF>
          <div class="comment">
            <p>The node is optional and can be used multiple times. It will be transformed into a java property
              that is associated to the page. The java property that is constructed will look like this:
              <code>pagerequest.APpageName.APropertyKey=AValue</code> where <code>APageName</code> is the value
              of the <code>name</code> attribute.
            </p>
            <p>There are some <code>param</code>s that are
              already defined for
              <code>de.schlund.pfixcore.workflow.app.StaticState</code>
              and descendants. These are listed below</p>
            <br/>
            <table class="stdtable">
              <tr>
                <th>Parameter name</th>
                <th>Parameter value</th>
                <th>Description</th>
              </tr>
              <tr>
                <td><code>mimetype</code></td>
                <td>e.g. <code>text/css</code></td>
                <td>
                  If given, sets the mimetype of the HttpResponse object
                  to something else than the default
                  <code>text/html</code>.  This is most often used for
                  <code>text/css</code>.
                </td>
              </tr>
              <tr>
                <td><code>responseheader.A_HEADER</code></td>
                <td><code>A_VALUE</code></td>
                <td>
                  <p>If given, set the
                    header <code>A_HEADER</code> of the HttpResponse
                    object to <code>A_VALUE</code>.
                  </p>
                  <p>
                    NOTE: the <pustefix/> system uses a set of default
                    headers that are only used, when no user defined
                    headers are given! The set of default headers is:</p>
                  <p>
                    <code>Expires=Mon, 26 Jul 1997 05:00:00 GMT</code><br/>
                    <code>Pragma=no-cache</code><br/>
                    <code>Cache-Control=no-cache, no-store, private, must-revalidate</code>
                  </p>
                  <p>
                    If you want to use some of them in addition to your
                    own headers, you <b>must</b> manually supply them,
                    too.
                  </p>
                </td>
              </tr>
            </table>
            <br/>
          </div>
        </xmlcodeOFF>
      </pagerequest>
      <prop name="AProperty">AValue</prop>
    </properties>
  </xmlcode>    
    
  <h2>de.schlund.pfixxml.DirectOutputServlet</h2>

  <p>Occasionally you don't
    want to generate output with an XSLT Transformation, but
    e.g. deliver binary content directly to the output
    stream instead. In this case you need to provide another servlet of type
    <code>de.schlund.pfixxml.DirectOutputServlet</code>. This servlet
    doesn't have it's own context but instead "hijacks" the context of a
    foreign <code>de.schlund.pfixxml.ContextXMLServer</code>. The
    context isn't used for any pageflow handling, only as a means to get
    to the data (== ContextResources) of the "main" application.</p>
  <p>The servlet knows about one or many
    <code>directoutputpagerequest</code>. For the XML/XSLT side of
    things, they look like normal pages (in fact, the value of the
    <code>directoutputpagerequest</code>'s <code>name</code> attribute
    must be a page defined in <code>depened.xml</code>). But other
    than the usual <code>pagerequest</code>, a
    <code>directoutputpagerequest</code> has an associated
    <code>directoutputstate</code> whose <code>class</code> attribute is a java class
    implementing <code>de.schlund.pfixcore.workflow.app.DirectOutputState</code>.
  </p>
  
  <xmlcode>
    <properties>
      <xmlcodeNS ns="cus">http://www.schlund.de/pustefix/customize</xmlcodeNS>
      <servletinfo depend="MyProject/conf/depend.xml" name="AUniqueNameForTheServlet">
        <ssl force="true"/>
        <editmode allow="true"/>
        <xmlcodeOFF>
          <div class="comment">
            See the comment for the <code>servletinfo</code> node of the
            <code>de.schlund.pfixxml.ContextXMLServer</code> property
            file above.
          </div>
        </xmlcodeOFF>
      </servletinfo>
      
      <foreigncontext externalservletname="UniqueNameOfAnotherServlet"/>
      <xmlcodeOFF>
        <div class="comment">
          <p>
            The <code>externalservletname</code> must the name of a
            servlet of type
            <code>de.schlund.pfixxml.ContextXMLServer</code>. The
            context (or better: the <code>ContextResourceManager</code>)
            of this servlet is used for getting stored application data.
          </p>
          <p>Additionally, if the context is of type <code>de.schlund.pfixcore.workflow.AuthContext</code>,
            it's authentification page is checked before any <code>DirectOutputState</code> is called.
          </p>
        </div>
      </xmlcodeOFF>
      
      <directoutputpagerequest name="APageName">
        <directoutputstate class="AClassName"/>
        <xmlcodeOFF>
          <div class="comment">
            See the explanation at the start of this subsection.
          </div>
        </xmlcodeOFF>
        <param name="APropertyKey">AValue</param>
        <xmlcodeOFF>
          <div class="comment">
            <p>The node is optional and can be used multiple times. It will be transformed into a java property
              that is associated to the page. The java property that is constructed will look like this:
              <code>pagerequest.APpageName.APropertyKey=AValue</code> where <code>APageName</code> is the value
              of the <code>name</code> attribute.
            </p>
          </div>
        </xmlcodeOFF>
      </directoutputpagerequest>
    </properties>
  </xmlcode>
</div>
