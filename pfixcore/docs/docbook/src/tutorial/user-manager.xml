<?xml version="1.0"?>
<chapter xml:id="user-manager" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd">

  <title>Usermanager tutorial</title>
    
  <section xml:id="um.introduction">
    <title>Introduction</title>
    <para></para>
  </section>

  <section xml:id="um.newproject">
    <title>Create a new project usermanagement</title>
    <para>Create a new project "usermanagement" (see: <xref linkend="createapplication"/>)</para>
    <para>Use the following data for creating the new project:
      <itemizedlist>
        <listitem><para>projects name: usermanagement</para></listitem>
        <listitem><para>default language: leave blank</para></listitem>
        <listitem><para>comment: Tutorial Usermanagement</para></listitem>
        <listitem><para>servlet 1: user</para></listitem>
        <listitem><para>create another servlet: no</para></listitem>
      </itemizedlist>
    </para>
  </section>

  <section xml:id="um.newbean">
    <title>Create a new bean</title>
    <para>We create a new class User where we store our user data.</para>
    <programlisting language="java">package org.pustefixframework.tutorial.usermanagement;

import java.net.URL;
import java.util.Date;

public class User {
    private int id;
    private String name;
    private String email;
    private Date birthday;
    private boolean admin;
    private URL homepage;
    private String gender;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    public boolean getAdmin() {
        return admin;
    }

    public void setAdmin(boolean admin) {
        this.admin = admin;
    }

    public URL getHomepage() {
        return homepage;
    }

    public void setHomepage(URL homepage) {
        this.homepage = homepage;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }
}</programlisting>
  </section>

  <section xml:id="um.beanannotations">
    <title>Annotate the bean</title>
    <para>To create a wrapper class from the bean we have to annotate it</para>

    <section xml:id="um.beanannotations.class">
      <title>Annotate the class</title>
      <para>todo</para>
      <programlisting language="java">@IWrapper(name="UserWrapper", ihandler=UserHandler.class)
public class User {
    ...</programlisting>
    </section>

    <section xml:id="um.beanannotations.getter">
      <title>Annotate the getter</title>
      <para>todo</para>
      <programlisting language="java">@Transient
public int getId() {
    ...</programlisting>
      <para>todo</para>
      <programlisting language="java">@Param(name="name", mandatory=true)
public String getName() {
    ...</programlisting>
      <para>todo</para>
      <programlisting language="java">@Param(name="email", mandatory=true)
public String getEmail() {
    ...</programlisting>
      <para>todo</para>
      <programlisting language="java">@Param(name="birthday", mandatory=true)
@DateSerializer("yyyy/MM/dd")
public Date getBirthday() {
    ...</programlisting>
      <para>todo</para>
      <programlisting language="java">@Param(name="admin", mandatory=false)
public boolean getAdmin() {
    ...</programlisting>
      <para>todo</para>
      <programlisting language="java">@Param(name="homepage", mandatory=false)
@Caster(type=ToURL.class)
public URL getHomepage() {
    ...</programlisting>
      <para>todo</para>
      <programlisting language="java">@Param(name="gender", mandatory=true)
public String getGender() {
    ...</programlisting>
    </section>
  </section>

  <section xml:id="um.caster">
    <title>Create a caster</title>
    <para>We need a caster to cast the String which contains the homepage to a java.net.URL object.</para>
    <section xml:id="um.caster.statuscode">
      <title>Create a new statuscode for the caster</title>
      <para>To show an appropriate errormessage we have to create a new statuscode here. Create the file projects/common/dyntxt/statuscodeinfo.xml 
      with the following content</para>
      <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<statuscodeinfo xmlns="http://pustefix-framework.org/statuscodeinfo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pustefix-framework.org/statuscodeinfo ../../core/schema/statuscodeinfo.xsd">

  <statuscodes class="org.pustefixframework.tutorial.StatusCodeLib">
    <file>statusmessages.xml</file>
  </statuscodes>
  
</statuscodeinfo>]]></programlisting>
      <para>Now we can create the statusmessage. Create a new file projects/common/dyntxt/statusmessages.xml</para>
      <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<include_parts xmlns:ixsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="http://www.schlund.de/pustefix/core">
  <part name="caster.url.URL_INVALID">
    <theme name="default">
      The URL you entered is not valid
    </theme>
  </part>
</include_parts>]]></programlisting>
    </section>

    <section xml:id="um.caster.tourl">
      <title>Create the ToURL-caster</title>
      <para>Create a new class ToURL which extends SimpleCheck.</para>
      <programlisting language="java">package org.pustefixframework.tutorial.caster;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.pustefixframework.tutorial.StatusCodeLib;

import de.schlund.pfixcore.generator.IWrapperParamCaster;
import de.schlund.pfixcore.generator.SimpleCheck;
import de.schlund.pfixxml.RequestParam;
import de.schlund.util.statuscodes.StatusCode;

public class ToURL extends SimpleCheck implements IWrapperParamCaster {

    private URL[] value = null;
    private StatusCode scode;
    
    public ToURL() {
        scode = StatusCodeLib.CASTER_URL_URL_INVALID;
    }
    
    public void castValue(RequestParam[] requestParams) {
        List&lt;URL&gt; out = new ArrayList&lt;URL&gt;();
        URL url;
        for (RequestParam param : requestParams) {
            try {
                url = new URL(param.getValue());
                out.add(url);
            } catch(MalformedURLException ex) {
                addSCode(scode);
            }
        }
        if (!errorHappened()) {
            value = out.toArray(new URL[] {});
        }
    }

    public Object[] getValue() {
        return value;
    }
}</programlisting>
    </section>
  </section>
  
  <section xml:id="um.generation">
    <title>Generate wrapper and StatusCodeLib</title>
    <para>type <prompt>ant generate-src</prompt> to generate the wrapper class and the StatusCodeLib class</para>
    <para>When the build was successful you can find the classes <classname>UserWrapper</classname> and
    <classname>StatusCodeLib</classname> in your <filename>gensrc</filename> directory.
    </para>
  </section>

  <section xml:id="um.userlist">
    <title>Create a class to hold our users</title>
    <para>Create the class UserList</para>
    <programlisting language="java">package org.pustefixframework.tutorial.usermanagement;

import java.util.ArrayList;
import java.util.List;

public class UserList {
    
    private List&lt;User&gt; users = new ArrayList&lt;User&gt;();
    private int id = 0;
    
    public void addUser(User user) {
        user.setId(id);
        users.add(user);
        id++;
    }
    
    public List&lt;User&gt; getUsers() {
        return users;
    }
    
    public User getUser(int id) {
        for (User user : users) {
            if (user.getId() == id) {
                return user;
            }
        }
        return null;
    }
}</programlisting>
  </section>

  <section xml:id="um.contextresource">
    <title>Set UserList as a context resource</title>
    <para>Add the line to the context element in user.conf.xml</para>
    <programlisting language="xml"><![CDATA[<resource class="org.pustefixframework.tutorial.usermanagement.UserList" />]]></programlisting>
  </section>

  <section xml:id="um.userhandler">
    <title>Create the handler</title>
    <para>Create a new class which implements de.schlund.pfixcore.generator.IHandler</para>
    <programlisting language="java">package org.pustefixframework.tutorial.usermanagement;

import de.schlund.pfixcore.generator.IHandler;
import de.schlund.pfixcore.generator.IWrapper;
import de.schlund.pfixcore.generator.iwrpgen.IWrapperToBean;
import de.schlund.pfixcore.workflow.Context;

public class UserHandler implements IHandler {

    public void handleSubmittedData(Context context, IWrapper wrapper) throws Exception {
    }

    public boolean isActive(Context context) throws Exception {
        return true;
    }

    public boolean needsData(Context context) throws Exception {
        return false;
    }

    public boolean prerequisitesMet(Context context) throws Exception {
        return true;
    }

    public void retrieveCurrentStatus(Context context, IWrapper wrapper) throws Exception {
        
    }
}</programlisting>
    <section>
      <title>Implement handleSubmittedData</title>
      <para>todo</para>
      <programlisting language="java">User user = IWrapperToBean.createBean(wrapper, User.class);
UserList userList = context.getContextResourceManager().getResource(UserList.class);
userList.addUser(user);</programlisting>
    </section>
  </section>

  <section xml:id="um.pages">
    <title>Create the pages</title>
    <para>todo</para>
    <section xml:id="um.pages.userform">
      <title>Create a page for data input</title>
      <para>Create a new file <filename>main_userform.xml</filename> in the folder projects/usermanagement/txt/pages</para>
      <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?><include_parts xmlns:ixsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="http://www.schlund.de/pustefix/core">
  <part name="content">
    <theme name="default">
      <pfx:forminput>
        Name: <pfx:xinp type="text" name="user.name" />
        <pfx:checkfield name="user.name">
          <pfx:error><pfx:scode/></pfx:error>
        </pfx:checkfield>
        <br/>

        E-Mail: <pfx:xinp type="text" name="user.email" />
        <pfx:checkfield name="user.email">
          <pfx:error><pfx:scode/></pfx:error>
        </pfx:checkfield>
        <br/>

        Birthday: <pfx:xinp type="text" name="user.birthday" />
        <pfx:checkfield name="user.birthday">
          <pfx:error><pfx:scode/></pfx:error>
        </pfx:checkfield>
        <br/>

        Gender: 
        <pfx:xinp type="select" name="user.gender">
          <pfx:option value="m" >male</pfx:option>
          <pfx:option value="f" >female</pfx:option>
        </pfx:xinp>
        <pfx:checkfield name="user.gender">
          <pfx:error><pfx:scode/></pfx:error>
        </pfx:checkfield>
        <br/>

        Homepage: <pfx:xinp type="text" name="user.homepage" />
        <pfx:checkfield name="user.homepage">
          <pfx:error><pfx:scode/></pfx:error>
        </pfx:checkfield>
        <br/>
        
        Admin: <pfx:xinp type="check" name="user.admin" value="true" default="false" />
        <br/>      
        <pfx:xinp type="submit" value="save"/>
      </pfx:forminput>  
    </theme>
  </part>
 </include_parts>]]></programlisting>
    </section>

    <section xml:id="um.pages.overview">
      <title>Create page for listing users</title>
      <para>todo</para>
      <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?><include_parts xmlns:ixsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="http://www.schlund.de/pustefix/core">
  <part name="content">
    <theme name="default">
      <h3>Users</h3>
      <ixsl:for-each select="/formresult/users/users/user">
        Name: <ixsl:value-of select="./@name"/><br/>
        Email: <ixsl:value-of select="./@email"/><br/>
        Birthday: <ixsl:value-of select="./@birthday"/><br/>
        Sex: <ixsl:value-of select="./@sex"/><br/>
        <ixsl:if test="./@homepage">
          Homepage: <ixsl:value-of select="./@homepage"/><br/>
        </ixsl:if>
        Admin: <ixsl:value-of select="./@admin"/><br/>
        <br/><br/>        
      </ixsl:for-each>

      <pfx:button page="adduser" >add</pfx:button>
    </theme>
  </part>
 </include_parts>]]></programlisting>
    </section>

    <section xml:id="um.pages.configuration">
      <title>Add pages to xml configuration files</title>
      <section xml:id="um.pages.configuration.servlet">
        <title>user.conf.xml</title>
        <para>Add two new pagerequest elements in the user.conf.xml configuration file.</para>
        <programlisting language="xml"><![CDATA[<pagerequest name="userform">
  <input>
    <interface prefix="user" class="org.pustefixframework.tutorial.usermanagement.UserWrapper" />
  </input>
</pagerequest>]]></programlisting>

        <programlisting language="xml"><![CDATA[<pagerequest name="overview">
  <output>
    <resource node="users" class="org.pustefixframework.tutorial.usermanagement.UserList" />
  </output>
</pagerequest>]]></programlisting>
      </section>

      <section xml:id="um.pages.configuration.depend">
        <title>depend.xml</title>
        <para>within navigation tags</para>
        <programlisting language="xml"><![CDATA[<page handler="/xml/user" name="userform"/>
<page handler="/xml/user" name="overview"/>]]></programlisting>
        <para>after standardmetatags</para>
        <programlisting language="xml"><![CDATA[<standardpage name="userform" xml="usermanagement/xml/frame.xml"/>
<standardpage name="overview" xml="usermanagement/xml/frame.xml"/>]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="um.pageflow">
    <title>Add pageflow in user.conf.xml</title>
    <para>Add a pageflow element between context and pageflow elements</para>
    <programlisting language="xml"><![CDATA[<pageflow name="userFlow" final="overview">
  <flowstep name="userform"/>
  <flowstep name="overview"/>
</pageflow>]]></programlisting>
  </section>
  
  <section xml:id="um.sampleusers">
    <title>Add sample users</title>
    <para>todo</para>
    <section xml:id="um.sampleusers.constructor">
      <title>Add a constructor to your UserList class</title>
      <para>To add sample users more easy we add an constructor to set the mandatory data at once.</para>
      <programlisting language="java">public User(String name, String email, Date birthday, Boolean admin, URL homepage, String gender) {
  this.name = name;
  this.email = email;
  this.birthday = birthday;
  this.admin = admin;
  this.homepage = homepage;
  this.gender = gender;
}</programlisting>
      <para>Further we need here a default constructor</para>
      <programlisting language="java">public User() {
}</programlisting>
    </section>
    <section xml:id="um.sampleusers.initmethod">
      <title>Add init method to UserList</title>
      <para>To add the users when the context resource is initialized we need to an an method annotated with @InitResource.</para>
      <programlisting language="java">@InitResource
public void createSampleUsers() throws Exception {
  addUser(new User("Neo", "neo@pustefix-framework.org", new GregorianCalendar(1964, 8, 2).getTime(), true, 
      new URL("http://pustefix-framework.org"), "m"));
  addUser(new User("Trinity", "trinity@pustefix-framework.org", new GregorianCalendar(1967, 7, 21).getTime(), true, 
      new URL("http://pustefix-framework.org"), "f"));
  addUser(new User("Morpheus", "morpheus@pustefix-framework.org", new GregorianCalendar(1961, 6, 30).getTime(), true, 
      new URL("http://pustefix-framework.org"), "m"));
}</programlisting>
    </section>
  </section>
  
  <section xml:id="um.deleteuser">
    <title>Delete an user</title>
    <para>We want to add the feature to delete an existing user</para>
    <section xml:id="um.deleteuser.bean">
      <title>Create a new bean</title>
      <para>We need to create another bean with annotations to generate a wrapper.</para>
      <programlisting language="java">package org.pustefixframework.tutorial.usermanagement;

import de.schlund.pfixcore.generator.annotation.IWrapper;
import de.schlund.pfixcore.generator.annotation.Param;

@IWrapper(name="DeleteUserWrapper", ihandler=DeleteUserHandler.class)
public class DeleteUser {
    private int id;

    @Param(name="id", mandatory=true)
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }
}</programlisting>
    </section>

    <section xml:id="um.deleteuser.method">
      <title>Add a method to delete a user from our UserList class</title>
      <para>In order to delete a user we need a method to do so. We add the following method to the UserList class</para>
      <programlisting language="java">public void deleteUser(Integer id) {
        User userToDelete = null;
        for (User user: users) {
            if (user.getId() == id) {
                userToDelete = user; 
            }
        }
        if (userToDelete != null) {
            users.remove(userToDelete);
        }
    }</programlisting>
    </section>

    <section xml:id="um.deleteuser.handler">
      <title>Create a new handler</title>
      <para>We also need another handler.</para>
      <programlisting language="java">package org.pustefixframework.tutorial.usermanagement;

import de.schlund.pfixcore.generator.IHandler;
import de.schlund.pfixcore.generator.IWrapper;
import de.schlund.pfixcore.generator.iwrpgen.IWrapperToBean;
import de.schlund.pfixcore.workflow.Context;

public class DeleteUserHandler implements IHandler {

    public void handleSubmittedData(Context context, IWrapper wrapper) throws Exception {
        DeleteUser deleteUser = IWrapperToBean.createBean(wrapper, DeleteUser.class);
        UserList userList = context.getContextResourceManager().getResource(UserList.class);
        userList.deleteUser(deleteUser.getId());
    }

    public boolean isActive(Context context) throws Exception {
        return true;
    }

    public boolean needsData(Context context) throws Exception {
        return false;
    }

    public boolean prerequisitesMet(Context context) throws Exception {
        return true;
    }

    public void retrieveCurrentStatus(Context context, IWrapper wrapper) throws Exception {
    }
}</programlisting>
    </section>
    
    <section xml:id="um.deleteuser.button">
      <title>Add a delete button</title>
      <para>We need a button to trigger to deletion of a user. We add the following code inside the for-each loop in the main_overview.xml file</para>
      <programlisting language="xml"><![CDATA[<pfx:button>delete
  <pfx:command name="SELWRP">delete</pfx:command>
  <pfx:argument name="delete.id"><ixsl:value-of select="./@id"/></pfx:argument>
</pfx:button>]]></programlisting>
    </section>

    <section xml:id="um.deleteuser.configuration">
      <title>Adjust the servlet configuration</title>
      <para>Add the following input element to the existing pagerequest of the overview page.</para>
      <programlisting language="xml"><![CDATA[<input>
  <interface prefix="delete" class="org.pustefixframework.tutorial.usermanagement.DeleteUserWrapper" />
  <interface prefix="edit" class="org.pustefixframework.tutorial.usermanagement.EditUserWrapper" />
</input>]]></programlisting> 
    </section>
  </section>

  <section xml:id="um.edituser">
    <title>Edit an user</title>
    <para>We want to add the feature to edit an existing user</para> 
    <section xml:id="um.edituser.bean">
      <title>Create a new bean</title>
      <para>We need to create another bean with annotations to generate a wrapper.</para>
      <programlisting language="java">package org.pustefixframework.tutorial.usermanagement;

import de.schlund.pfixcore.generator.annotation.IWrapper;
import de.schlund.pfixcore.generator.annotation.Param;

@IWrapper(name="EditUserWrapper", ihandler=EditUserHandler.class)
public class EditUser {
    private Integer id;

    @Param(name="id", mandatory=true)
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }
}</programlisting>
    </section>
    
    <section xml:id="um.edituser.method">
      <title>Add a method to edit a user of our UserList class</title>
      <para>In order to edit a user we need a method to replace an existing user. We add the following method to the UserList class</para>
      <programlisting language="java">public void replaceUser(User user) {
    User userToReplace = null;
    for (User existingUser : users) {
        if (existingUser.getId().equals(user.getId())) {
            userToReplace = existingUser;
        }
    }
    if (userToReplace != null) {
        users.remove(userToReplace);
        users.add(user);
    }
}</programlisting>
    </section>
    
    <section xml:id="um.edituser.handler">
      <title>Create a new handler</title>
      <para>We also need another handler.</para>
      <programlisting language="java">package org.pustefixframework.tutorial.usermanagement;

import de.schlund.pfixcore.generator.IHandler;
import de.schlund.pfixcore.generator.IWrapper;
import de.schlund.pfixcore.generator.iwrpgen.IWrapperToBean;
import de.schlund.pfixcore.workflow.Context;

public class EditUserHandler implements IHandler {

    public void handleSubmittedData(Context context, IWrapper wrapper) throws Exception {
        EditUser editUser = IWrapperToBean.createBean(wrapper, EditUser.class);
        EditUser editUserContext = context.getContextResourceManager().getResource(EditUser.class);
        editUserContext.setId(editUser.getId());
    }

    public boolean isActive(Context context) throws Exception {
        return true;
    }

    public boolean needsData(Context context) throws Exception {
        return false;
    }

    public boolean prerequisitesMet(Context context) throws Exception {
        return true;
    }

    public void retrieveCurrentStatus(Context context, IWrapper wrapper) throws Exception {
    }

}</programlisting>
    </section>
    
    <section xml:id="um.edituser.button">
      <title>Add an edit button</title>
      <para>We need a button to edit an user. We add the following code inside the for-each loop in the main_overview.xml file</para>
      <programlisting language="xml"><![CDATA[<pfx:button jumptopage="userform">edit
  <pfx:command name="SELWRP">edit</pfx:command>
  <pfx:argument name="edit.id"><ixsl:value-of select="./@id"/></pfx:argument>
</pfx:button>]]></programlisting>
    </section>
    
    <section xml:id="um.edituser.configuration">
      <title>Adjust the servlet configuration</title>
      <para>Add the EditUser class as an resource to the context element</para>
      <programlisting language="xml"><![CDATA[<resource class="org.pustefixframework.tutorial.usermanagement.EditUser" />]]></programlisting>
      <para>Add the following interface element into the input element of the pagerequest of the overview page.</para>
      <programlisting language="xml"><![CDATA[<interface prefix="edit" class="org.pustefixframework.tutorial.usermanagement.EditUserWrapper" />]]></programlisting>
    </section>
    
    <section xml:id="um.edituser.userhandler">
      <title>Add user to form</title>
      <para>To add the userdata to the existing form of our userform page we need to implement the retrieveCurrentStatus method
      of our UserHandler class.</para>
      <programlisting language="java">    public void retrieveCurrentStatus(Context context, IWrapper wrapper) throws Exception {
        EditUser editUser = context.getContextResourceManager().getResource(EditUser.class);
        if (editUser.getId() != null) {
            UserList userList = context.getContextResourceManager().getResource(UserList.class);
            User user = userList.getUser(editUser.getId());
            BeanToIWrapper.populateIWrapper(user, wrapper);
        }
    }</programlisting>
    </section>

  </section>
</chapter>