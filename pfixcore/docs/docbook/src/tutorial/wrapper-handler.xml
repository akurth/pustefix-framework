<?xml version="1.0"?>
<chapter xml:id="wrapper-handler" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>Wrapper/Handler tutorial</title>
  <para>
    In this tutorial, you will learn how to work with the basic features provided by the Pustefix framework.
    You will accept user input, store it in the session and display it back to the user.
    Furthermore, you will create a very simple workflow containing three pages.  
  </para>
  <para>
    The requirements for your application are:
  </para>
  <orderedlist>
    <listitem>
      <para>
        Provide an HTML form that can be used to register new users. The data for a new user must contain:
        gender, name, email-address, homepage, birthdate and a flag to mark the user as an administrator.
      </para>
    </listitem>
    <listitem>
      <para>
        Validate the user data after the page has been submitted and display error information.
      </para>
    </listitem>
    <listitem>
      <para>
        If the entered data is correct, move to a new page, which displays the user data and allows the
        user to choose whether he wants to go back and modify the data or accept the data.
      </para>
    </listitem>
    <listitem>
      <para>
        After the data has been stored, display a confirmation page to the user.
      </para>
    </listitem>
  </orderedlist>
  <para>
    In this tutorial application, you will focus on how the requirements will be implemented in
    the Pustefix framework. There will be no real business logic like actually storing the
    user data in any data base. These tasks are left to your favorite ORM framework.
  </para>
  <section xml:id="wrapper-handler.setup">
    <title>Setting up a new project</title>
    <para>
      Before you can start developing the application, make sure that your system
      fulfills all requirements that are mentioned in <xref linkend="gettingstarted.requirements"/>
      and that you have build your Pustefix installation at least once, so that all necessary
      files have been extracted from the Pustefix distribution. More information on building
      Pustefix can be found in <xref linkend="gettingstarted.firstbuild"/>
    </para>
    <para>
      If your environment is set up correctly, you may create a new Pustefix project. For this
      tutorial, please name the project <emphasis>first-app</emphasis>. A new Pustefix project
      can be created using the <filename>newProject.sh</filename> script, which is part of the
      Pustefix distribution. This script will guide you to the project creation and copy and
      create all necessary files for you new project.
    </para>
    <para>
      Please move to your installation directory and start the script:
    </para>
    <screen continuation="continues"><![CDATA[$ ./newproject.sh
**************************************************
*                                                *
*         Pustefix ProjectGenerator 1.0          *
*                                                *
**************************************************

Please follow the instructions to create a new project.
You can abort the process by pressing Ctrl + C.

Please type in the projects name e.g. "myproject"]]></screen>
    <para>
      After the <filename>newProject.sh</filename> script has been started, you will be asked for a project name.
      Please enter <literal>first-app</literal> at the prompt and press return. The name of the project will be used
      for several things:
    </para>
    <itemizedlist>
      <listitem><para>It will be used as the name for the folder that contains all project-relevant files inside the <filename>projects</filename> directory</para></listitem>
      <listitem><para>It will also be used as the default sub-domain name for your project.</para></listitem>
    </itemizedlist>
    <para>
      After you entered the project name and pressed return, the setup script will continue:
    </para>
    <screen continuation="continues"><![CDATA[Please type in the projects default language (it's english if you leave the field blank).]]></screen>
    <para>
      As your application will be in English, just leave the default language empty and press return.
      Again, the setup script will continue after you pressed return.
    </para>
    <screen continuation="continues"><![CDATA[Please type in a comment for the Project
It will be "projectname + comment" if you leave it blank.]]></screen>
    <para>
      Please enter <literal>My first Pustefix application</literal> as a comment for the project. This will not be visible
      anywhere for the users of your application.
    </para>
    <screen continuation="continues"><![CDATA[Please type in a name for the servlet 1]]></screen>
    <para>
      Every Pustefix application at least needs one servlet to process the request. Please enter <literal>app</literal> and
      press return to assign a name to the servlet. The setup script will then continue. 
    </para>
    <screen continuation="continues"><![CDATA[Servlet 1 has been added!

Would you like to create another servlet? [yes] [no]]]></screen>
    <para>
      In your first example application, all requests will be processed by the same servlet. Enter <literal>no</literal> to inform
      the setup script, that you do not want to add another servlet. New servlets can easily be added during the development of
      your application.> 
    </para>
    <para>
      Now you provided all necessary information and the setup script will create a new project based on
      your input.
    </para>
    <screen continuation="continues"><![CDATA[Creating project in "/path/to/your/installation/projects/" starts now

Creating project folder: first-app
Folder has been created successfully

Creating subfolder starts now
Creating folder conf...
Folder has been created successfully
Creating folder img...
Folder has been created successfully
Creating folder xsl...
Folder has been created successfully
Creating folder xml...
Folder has been created successfully
Creating folder txt & subfolders
Folder has been created successfully
Creating folder htdocs...
Folder has been created successfully

Xml files editing starts now...

Try to read the dom of the given Document: /path/to/your/installation/projects/core/prjtemplates/config.tmpl
Transforming into dom has been successfull
Changing the attribute depend
Changing attribute has been successfull
Changing the attribute name
Changing attribute has been successfull
Changing the attribute name
Changing attribute has been successfull
Changing the attribute name
Changing attribute has been successfull
Writing the file: app.conf.xml
Writing file has been successfull

Writing the file: app.conf.xml
Writing file has been successfull

Try to read the dom of the given Document: /path/to/your/installation/projects/core/prjtemplates/depend.tmpl
Transforming into dom has been successfull
Changing the attribute project
Changing attribute has been successfull
Changing the attribute lang
Changing attribute has been successfull
Changing the attribute handler
Changing attribute has been successfull
Changing the attribute stylesheet
Changing attribute has been successfull
Changing the attribute stylesheet
Changing attribute has been successfull
Changing the attribute xml
Changing attribute has been successfull
Writing the file: depend.xml
Writing file has been successfull

Try to read the dom of the given Document: /path/to/your/installation/projects/core/prjtemplates/frame.tmpl
Transforming into dom has been successfull
Changing the attribute href
Changing attribute has been successfull
Writing the file: frame.xml
Writing file has been successfull

Try to read the dom of the given Document: /path/to/your/installation/projects/core/prjtemplates/project.tmpl
Transforming into dom has been successfull
Changing the value of the tag depend
Changing Textnode has been successfull

Changing the attribute name
Changing attribute has been successfull
Changing the value of the tag comment
Changing Textnode has been successfull

Changing the value of the tag servername
Changing Textnode has been successfull

Changing the value of the tag serveralias
Changing Textnode has been successfull

Changing the value of the tag defpath
Changing Textnode has been successfull

Changing the value of the tag passthrough
Changing Textnode has been successfull

Changing the value of the tag documentroot
Changing Textnode has been successfull

Writing the file: project.xml.in
Writing file has been successfull

Try to read the dom of the given Document: /path/to/your/installation/projects/core/prjtemplates/skin.tmpl
Transforming into dom has been successfull
Writing the file: skin.xsl
Writing file has been successfull

Try to read the dom of the given Document: /path/to/your/installation/projects/core/prjtemplates/metatags.tmpl
Transforming into dom has been successfull
Writing the file: metatags.xsl
Writing file has been successfull

Try to read the dom of the given Document: /path/to/your/installation/projects/core/prjtemplates/page.tmpl
Transforming into dom has been successfull
Changing the value of the tag theme
Changing Textnode has been successfull

Writing the file: main_home1.xml
Writing file has been successfull

Writing the file: main_home1.xml
Writing file has been successfull


Your project has been successfully created.
To see how it works type in "ant".
Afterwards restart Apache httpd and Tomcat.
Then type in "http://first-app.HOSTNAME.DOMAIN"]]></screen>
    <para>
      To complete the setup process, please re-run <command>ant</command>. Now Pustefix will automatically create
      the Apache and Tomcat configuration for your new project. Please make sure, that you restart Apache and Tomcat,
      after <command>ant</command> has finished its work.
    </para>
    <para>
      After you restarted your web server, please open a web browser and open the URL <uri>http://first-app.$YOURHOSTNAME</uri>.
      Figure <xref linkend="wrapper-handler.first-app"/> shows the output of the new Pustefix project.
    </para>
    <figure xml:id="wrapper-handler.first-app">
      <title>The new Pustefix project</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/tutorial/first-app.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section xml:id="wrapper-handler.structure">
    <title>Generated files</title>
    <para>
      The <filename>newProject.sh</filename> generated a working application for you. All relevant files have been put
      into <filename>projects/first-app</filename>. Please take a look at the most important folders in this new project
      directory:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The <filename>conf</filename> folder contains all configuration files for your applications. These are:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <filename>project.xml.in</filename> contains the information the project, like the domain name where
              the project can be accessed, the servlets available in the project and some Apache configuration options.
            </para>
          </listitem>
          <listitem>
            <para>
              <filename>app.xml</filename> contains the configuration of the <literal>app</literal> servlet that
              you created using the setup script.
            </para>
          </listitem>
          <listitem>
            <para>
              <filename>depend.xml</filename> contains the configuration of the pages and XSL stylesheets used in
              your project.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          The <filename>htdocs</filename> is empty and can be used to store any resource that should be available
          via the web server. Possible resources are JavaScript or CSS files.
        </para>
      </listitem>
      <listitem>
        <para>
          The same applies to the <filename>img</filename> folder, which apparently is used to store image files.
        </para>
      </listitem>
      <listitem>
        <para>
          The <filename>txt</filename> folder contains the text and HTML content of your application. After the
          setup script has finished, it contains a <filename>pages</filename> folder which stores the different
          pages of the application. 
        </para>
      </listitem>
      <listitem>
        <para>
          The <filename>xml</filename> folder contains the different frames of your application. A frame is an
          XML document which will be used for every page that is generated. This way, you can easily share
          header, footer and navigation between all pages.
        </para>
      </listitem>
      <listitem>
        <para>
          The <filename>xsl</filename> folder contains XSL stylesheets that are only used in your application.
          XSL stylesheets provided by Pustefix are not located inside this folder but in <filename>projects/core/xsl</filename>.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="wrapper-handler.pages">
    <title>Creating the pages</title>
    <para>
      Start implementing your application by adding the three needed pages to the application:
      <literal>EnterData</literal>, <literal>ReviewData</literal> and <literal>Confirm</literal>.
    </para>
    <para>
      New pages are added by editing the <filename>conf/depend.xml</filename> file. For each page, you
      have to add two XML tags: 
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The <literal>&lt;page/&gt;</literal> tag defines the servlet, that handles the request to this page.
          All three pages will be handled by the <literal>app</literal> servlet, which is available at
          <literal>xml/app</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          The <literal>&lt;standardpage/&gt;</literal> tag defines the layout of the page by specifying the
          XML frame that should be used. Again, all three pages will be rendered using the standard
          frame that has been generated by the setup script.
        </para>
      </listitem>
    </itemizedlist>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<make lang="en_GB" project="first-app">

  <navigation>
      <page handler="/xml/app" name="home1"/>
      <page handler="/xml/app" name="EnterData"/>
      <page handler="/xml/app" name="ReviewData"/>
      <page handler="/xml/app" name="Confirm"/>
  </navigation>

  <!--
    Metatags have been left out.
  -->
  
  <standardpage name="home1" xml="first-app/xml/frame.xml"/>
  <standardpage name="EnterData" xml="first-app/xml/frame.xml"/>
  <standardpage name="ReviewData" xml="first-app/xml/frame.xml"/>
  <standardpage name="Confirm" xml="first-app/xml/frame.xml"/>
  
</make>]]></programlisting>
    <para>
      You can now open the <literal>EnterData</literal> page by browsing to <uri>http://first-app.$YOURHOSTNAME/xml/app/EnterData</uri>.
    </para>
    <para>
      As you did not provide any content for this page, Pustefix will display an error icon. When hovering
      over this icon, you can see, that the content of the page in the file <filename>first-app/txt/pages/main_EnterData.xml</filename>
      is missing.
    </para>
    <para>
      This problem can easily be solved by adding this file:
    </para>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<include_parts xmlns:ixsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="http://www.schlund.de/pustefix/core">
  <part name="content">
    <theme name="default">
      <h1>Register new user</h1>
    </theme>
  </part>
 </include_parts>]]></programlisting>
    <para>
      If you reload the page, you will see the <literal>Register new user</literal> headline. Now repeat this 
      step for all three pages.
    </para>
  </section>
  <section xml:id="wrapper-handler.entrypage">
    <title>Setting the entry page</title>
    <para>
      If you open the application in your browser without specifying the page directly, Pustefix will redirect
      you to <filename>xml/app/home1</filename>, which is the default page generated by the setup script. Desired behaviour would
      be, that the <literal>EnterData</literal> page is displayed, when your application is started.
      This can be changed in the servlet configuration in <filename>conf/app.xml</filename>:
    </para>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<contextxmlserver xmlns="http://pustefix.sourceforge.net/properties200401"
                  xmlns:cus="http://www.schlund.de/pustefix/customize"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0"
                  xsi:schemaLocation="http://pustefix.sourceforge.net/properties200401 http://pustefix.sourceforge.net/properties200401.xsd">
  
  <servletinfo depend="first-app/conf/depend.xml" name="pfixcore_project:first-app::servlet:app">
    <editmode allow="true"/>
  </servletinfo>
  
  <context defaultpage="EnterData"/>

  <pagerequest name="home1"/>

</contextxmlserver>]]></programlisting>
    <para>
      The entry page is specified using the <literal>defaultpage</literal> attribute of the
      <literal>&lt;context/&gt;</literal> tag. After you set this attribute to <literal>EnterData</literal>
      open the URL <uri>http://first-app.$YOURHOSTNAME</uri> in your browser and you will be automatically
      redirected to the page to register new users.
    </para>
    <para>
      After you changed the entry page, you can get rid of the generated entry page by executing these steps:
    </para>
    <orderedlist>
      <listitem>
        <para>
          Delete the file <filename>main_home1.xml</filename> from the <filename>first-app/txt/pages</filename> folder.
        </para>
      </listitem>
      <listitem>
        <para>
          Remove the <literal>&lt;pagerequest/&gt;></literal> tag from the <filename>app.xml</filename> file.
        </para>
      </listitem>
      <listitem>
        <para>
          Remove the <literal>&lt;page/&gt;></literal> and <literal>&lt;standardpage/&gt;></literal> tags from the <filename>depend.xml</filename> file.
        </para>
      </listitem>
    </orderedlist>
  </section>
  <section xml:id="wrapper-handler.inputform">
    <title>Create the input form</title>
    <para>
      Next, you have to create the HTML form to accept the data of a new user. To create the form, you should
      not use the standard HTML tags, but the replacements by Pustefix, which automatically write back the data
      from the business logic to the HTML page.
    </para>
    <para>
      The form has to be added to <filename>txt/pages/main_EnterData.xml</filename>:
    </para>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<include_parts xmlns:ixsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx="http://www.schlund.de/pustefix/core">
  <part name="content">
    <theme name="default">
      <h1>Register new user</h1>
      <pfx:forminput>
        <table>
          <tr>
            <td>Gender:</td>
            <td>
              <pfx:xinp type="select" name="user.sex">
                <pfx:option value="m">male</pfx:option>
                <pfx:option value="f">female</pfx:option>
              </pfx:xinp>
            </td>
          </tr>
          <tr>
            <td>Name:</td>
            <td><pfx:xinp type="text" name="user.name"/></td>
          </tr>
          <tr>
            <td>Email:</td>
            <td><pfx:xinp type="text" name="user.email"/></td>
          </tr>
          <tr>
            <td>Homepage:</td>
            <td><pfx:xinp type="text" name="user.homepage"/></td>
          </tr>
          <tr>
            <td>Birthdate:</td>
            <td><pfx:xinp type="text" name="user.birthdate"/></td>
          </tr>
          <tr>
            <td>Administrator:</td>
            <td><pfx:xinp type="check" name="user.admin" value="true"/></td>
          </tr>
        </table>
        <pfx:xinp type="submit" value="register"/>
      </pfx:forminput>
    </theme>
  </part>
 </include_parts>]]></programlisting>
    <para>
      See the Pustefix reference documentation for more information about the XML tags that have been used in
      this page.
    </para>
  </section>
  <section xml:id="wrapper-handler.business-logic">
    <title>Implementing the business logic</title>
    <para>
      Now that you have finished most of the HTML frontend, you should start implementing the business logic.
      The business logic in Pustefix applications mostly consists of three parts:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          A <literal>wrapper</literal> is used to extract the user input from the HTTP-request, executes
          some checks and casts the data to the desired Java types. A <literal>wrapper</literal> is also used
          to write the values and/or error information back to the response. It connects your HTML frontend
          with your application logic. 
        </para>
      </listitem>
      <listitem>
        <para>
          A <literal>handler</literal> processes the HTTP request. It extracts the user input from the <literal>wrapper</literal>,
          executes additional information and does whatever is necessary in the specific application. You have all the power
          provided by Java at your command when implementing a <literal>handler</literal>.
        </para>
        <para>
          A handler does not have direct access to the HTTP request, HTTP session or HTTP response.
        </para>
      </listitem>
      <listitem>
        <para>
          A <literal>ContextResource</literal> allows you to store any data in the Pustefix <literal>Context</literal> and thus
          in the HTTP-session.
        </para>
        <para>
          A <literal>ContextResource</literal> furthermore allows you to add XML data to the <literal>ResultDocument</literal>
          which is the Pustefix way to pass information to the HTML frontend.
        </para>
      </listitem>
    </itemizedlist>
    <section xml:id="wrapper-handler.business-logic.wrapper">
      <title>Implementing a wrapper</title>
      <para>
        When implementing the business logic you will always start by implementing a wrapper.
        Wrappers in Pustefix are implemented using XML, which will then be used to generate a Java class for the
        wrapper.
      </para>
      <para>
        Before you can implement a new wrapper, you will have to create a new Java package <literal>org.pustefixframework.tutorial.firstapp.wrapper</literal>
        which will then contain the new wrapper. After the package has been created, create a new <filename>EnterUserDataWrapper.iwrp</filename> file for the wrapper
        and paste the following content into this new file:
      </para>
      <programlisting language="xml"><![CDATA[<interface xsi:schemaLocation="http://pustefix.sourceforge.net/interfacewrapper200401 http://pustefix.sourceforge.net/interfacewrapper200401.xsd"
  xmlns="http://pustefix.sourceforge.net/interfacewrapper200401"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  
  <!-- This handler will process the data -->
  <ihandler class="org.pustefixframework.tutorial.firstapp.handler.EnterUserDataHandler"/>
  
  <!-- Parameters that have to be extracted from the request -->
  <param name="sex" type="java.lang.String" occurrence="mandatory"/>
  <param name="name" type="java.lang.String" occurrence="mandatory"/>
  <param name="email" type="java.lang.String" occurrence="mandatory"/>
  <param name="homepage" type="java.lang.String" occurrence="optional"/>
  <param name="birthdate" type="java.lang.String" occurrence="optional"/>
  <param name="admin" type="java.lang.Boolean" occurrence="optional">
    <default>
      <value>false</value>
    </default>
    <caster class="de.schlund.pfixcore.generator.casters.ToBoolean"/>
  </param>
</interface>]]></programlisting>
      <para>
        The wrapper defines various options:
      </para>
      <orderedlist>
        <listitem>
          <para>
            Using the <literal>&lt;ihandler/&gt;</literal> tag, you define the name of the class that will do
            the request processing for this handler. This class will be implemented at a later point (see
            <xref linkend="wrapper-handler.business-logic.handler"/> if you are too curious).
          </para>
        </listitem>
        <listitem>
          <para>
            The different <literal>&lt;param/&gt;</literal> tags are used to define the different parameters that
            should be extracted from the HTTP request. For each parameter you define the name and the type of the data.
            All parameters except the admin-flag are String parameters, the admin-flag should be casted to a <literal>boolean</literal>
            value. This can be achieved by setting the <literal>type</literal> attribute to <literal>java.lang.Boolean</literal>
            and supplying a <literal>&lt;caster/&gt;</literal> tag that specifies a class to to the conversion for
            you. The class <literal>de.schlund.pfixcore.generator.casters.ToBoolean</literal> is provided by the 
            Pustefix framework.
          </para>
          <para>
            For each parameter you may also specify a default value and define whether the parameter is mandatory or
            not. For more information on the differen <literal>wrapper</literal> features, please refer to the 
            reference documentation.
          </para>
        </listitem>
      </orderedlist>
      <para>
        After you created the <literal>iwrp</literal> definition, please run <command>ant generate-src</command> to
        generate the Java class for this wrapper:
      </para>
      <screen continuation="restarts"><![CDATA[$ ant generate-src
Buildfile: build.xml

init-dirs:
    [mkdir] Created dir: /home/schst/workspace/pfixtutorial/build
    [mkdir] Created dir: /home/schst/workspace/pfixtutorial/gensrc

tomcat.dir.opt:

tomcat.dir.missing:

ant-tasks-stage1:

ant-tasks-stage2:

ant-tasks:

skel.pre-compile:

pre-compile:
     [echo] Extend the pre-compile target with your own definitions here...

generate-src:
 [pfx-iwrp] Transformed 1 of 1 file, 0 have been up to date

BUILD SUCCESSFUL
Total time: 3 seconds]]></screen>
      <para>
        After <literal>ant</literal> has finished the build, you will find a new class
        <literal>org.pustefixframework.tutorial.firstapp.wrapper.EnterUserDataWrapper</literal> in the
        <filename>gensrc</filename> folder of your installation.
        This file contains all information needed to extract the parameters from the request.
      </para>
      <section xml:id="wrapper-handler.business-logic.wrapper.conf">
        <title>Assigning the wrapper to the page</title>
        <para>
          Now that you have implemented the HTML page and the wrapper you have to connect the HTML form with
          the wrapper. This is done using the <filename>app.xml</filename> servlet configuration. If a page
          contains business logic that must be executed, you have to add a <literal>&lt;pagerequest/&gt;</literal>
          tag to the servlet configuration.
        </para>
        <para>
         Place an <literal>&lt;input/&gt;</literal> tag inside the <literal>&lt;pagerequest/&gt;</literal> tag which
         will act as a container for all wrappers on this page.
         Each wrapper is registered using an <literal>&lt;interface/&gt;</literal> tag which requires two parameters
         to be set:
        </para>
        <orderedlist>
          <listitem>
            <para>
              <literal>class</literal> specifies the clasname of the wrapper.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>prefix</literal> specifies the prefix of all request parameters that this wrapper should
              pay attention to. If you take a look the the HTML page (<xref linkend="wrapper-handler.inputform"/>)
              you will see, that all input fields are prefixed with <literal>user</literal> and a dot. This way,
              you can have two wrappers that share parameter names, but will not conflict, as the parameters reside
              in different namespaces. 
            </para>
          </listitem>
        </orderedlist>
        <para>
          To add your new wrapper to the <literal>EnterData</literal> page, add these lines to the configuration:
        </para>
        <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<contextxmlserver xmlns="http://pustefix.sourceforge.net/properties200401"
                  xmlns:cus="http://www.schlund.de/pustefix/customize"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0"
                  xsi:schemaLocation="http://pustefix.sourceforge.net/properties200401 http://pustefix.sourceforge.net/properties200401.xsd">
  <!-- ... -->

  <pagerequest name="EnterData">
    <input>
      <interface prefix="user" class="org.pustefixframework.tutorial.firstapp.wrapper.EnterUserDataWrapper" />
    </input>
  </pagerequest>
  
</contextxmlserver>]]></programlisting>
        <para>
          If you now try to open the page again, Pustefix will respond with an <literal>IllegalStateException</literal>
          and the following message:
        </para>
        <screen>unable to find class [org.pustefixframework.tutorial.firstapp.handler.EnterUserDataHandler] :org.pustefixframework.tutorial.firstapp.handler.EnterUserDataHandler</screen>
        <para>
          This already tells you, that implementing the handler must be your next step. But before you can go on and
          implement the handler, there is a small task left. Up to now, you do not have a Java type that is able to
          store the data for a user. This will be done in your next step.
        </para>          
      </section>
    </section>
    <section xml:id="wrapper-handler.business-logic.bean">
      <title>Interlude: Implementing a bean</title>
      <note>
        <para>
          This step has absolutely nothing to do with the Pustefix framework. However, as it is needed to 
          understand the example, it still is part of the tutorial.
        </para>
      </note>
      <para>
        As you need to store the data submitted by the user, you will need a bean, that is able to store
        all the information. The following class is a very simple implementation, in your applications 
        you might already have these beans or use a framework, that is generating them for you.
      </para>
      <programlisting language="java"><![CDATA[package org.pustefixframework.tutorial.firstapp;

import java.net.URL;
import java.util.Date;

public class User {
    private String name;
    private String email;
    private Date birthday;
    private boolean admin;
    private URL homepage;
    private String sex;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    public boolean getAdmin() {
        return admin;
    }

    public void setAdmin(boolean admin) {
        this.admin = admin;
    }

    public URL getHomepage() {
        return homepage;
    }

    public void setHomepage(URL homepage) {
        this.homepage = homepage;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }
}]]></programlisting>
      <para>
        This bean contains exactly the same properties as the wrapper you defined earlier.
      </para>
    </section>
    <section xml:id="wrapper-handler.business-logic.handler">
      <title>Implementing a handler</title>
      <para>
        A handler is responsible to execute the actual business logic of your application. A handler can be any class
        but is has some requirements that have to be met:
      </para>
      <orderedlist>
        <listitem>
          <para>It has to implement the <literal>de.schlund.pfixcore.generator.IHandler</literal> interface.</para>
        </listitem>
        <listitem>
          <para>As handlers are used as flyweights, they <emphasis>must not</emphasis> have any static non-final properties.</para>
        </listitem>
      </orderedlist>
      <para>
        If you use Eclipse to generate a new <literal>EnterUserDataHandler</literal> class that implements the
        <literal>IHandler</literal> interface, you get the following code:
      </para>
      <programlisting language="java"><![CDATA[package org.pustefixframework.tutorial.firstapp.handler;

import de.schlund.pfixcore.generator.IHandler;
import de.schlund.pfixcore.generator.IWrapper;
import de.schlund.pfixcore.workflow.Context;

public class EnterUserDataHandler implements IHandler {

    public void handleSubmittedData(Context context, IWrapper wrapper)
            throws Exception {
    }

    public boolean isActive(Context context) throws Exception {
        return false;
    }

    public boolean needsData(Context context) throws Exception {
        return false;
    }

    public boolean prerequisitesMet(Context context) throws Exception {
        return false;
    }

    public void retrieveCurrentStatus(Context context, IWrapper wrapper)
            throws Exception {
    }
}]]></programlisting>
      <para>
        If you now open the page again, you still get an error, that the page is still not accessible. This is because of the
        return values of the generated methods and how Pustefix processes a request.
      </para>
      <itemizedlist>
        <listitem>
          <para>
            When a page is requested, Pustefix calls the <function>prerequisitesMet</function> method of all
            handlers that are configured for this page. If any of these methods return <literal>false</literal>,
            the page will not be displayed.
          </para>
        </listitem>
        <listitem>
          <para>
            If all of these methods return <literal>true</literal>, Pustefix will call the <function>isActive</function> method
            on all handlers of the page. If none of the methods return <literal>true</literal>, the page will not be displayed.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        When Eclipse generated the method bodies, both methods return <literal>false</literal> und thus the page
        cannot be displayed.
        Modify the return values of <function>prerequisitesMet</function> and <function>isActive</function> to
        make the page accessible
      </para>
      <programlisting language="java"><![CDATA[package org.pustefixframework.tutorial.firstapp.handler;

import de.schlund.pfixcore.generator.IHandler;
import de.schlund.pfixcore.generator.IWrapper;
import de.schlund.pfixcore.workflow.Context;

public class EnterUserDataHandler implements IHandler {

    public boolean isActive(Context context) throws Exception {
        return true;
    }

    public boolean prerequisitesMet(Context context) throws Exception {
        return true;
    }

}]]></programlisting>
    </section>
    <section xml:id="wrapper-handler.business-logic.contextresource">
      <title>Implementing a ContextResource</title>
      <para>
        todo
      </para>
      <programlisting language="java"><![CDATA[package org.pustefixframework.tutorial.firstapp.contextresources;

import org.pustefixframework.tutorial.firstapp.User;

import de.schlund.pfixcore.workflow.ContextResource;

public interface ContextUser extends ContextResource {
    public void setUser(User user);
    public User getUser();
}]]></programlisting>
      <para>
        todo
      </para>
      <programlisting language="java"><![CDATA[package org.pustefixframework.tutorial.firstapp.contextresources;

import org.pustefixframework.tutorial.firstapp.User;
import org.w3c.dom.Element;

import de.schlund.pfixcore.workflow.Context;
import de.schlund.pfixxml.ResultDocument;

public class ContextUserImpl implements ContextUser {

    private User user;
    
    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public void init(Context context) throws Exception {
        // nothing to do here

    }

    public void insertStatus(ResultDocument document, Element element)
            throws Exception {
        // will be implemented later
    }
}]]></programlisting>
    </section>
  </section>
  <section xml:id="wrapper-handler.pageflow">
    <title>Implementing the workflow</title>
    <para>
      todo
    </para>
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<contextxmlserver xmlns="http://pustefix.sourceforge.net/properties200401" xmlns:cus="http://www.schlund.de/pustefix/customize" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" xsi:schemaLocation="http://pustefix.sourceforge.net/properties200401 http://pustefix.sourceforge.net/properties200401.xsd">

  <!-- Rest of configuration -->  

  <pageflow name="RegisterUser" final="Confirm">
    <flowstep name="EnterData"/>
    <flowstep name="ReviewData" stophere="true"/>
  </pageflow>

  <!-- Rest of configuration -->  

</contextxmlserver>]]></programlisting>
  </section>
  <section xml:id="wrapper-handler.errors">
    <title>Displaying errors</title>
    <para>
      todo
    </para>
  </section>
  <section xml:id="wrapper-handler.domtree">
    <title>Displaying the entered data</title>
    <para>
      todo
    </para>
  </section>
  <section xml:id="wrapper-handler.finish">
    <title>Finishing the application</title>
    <para>
      todo
    </para>
  </section>
</chapter>