<?xml version="1.0"?>
<chapter xml:id="installation" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>Installation</title>    
  <section xml:id="installation.requirements">
    <title>Requirements</title>
    <para>
     Before we can get started, you have to make sure that some requirements
     are met by your development environment. You will need:
    </para>
    <itemizedlist>
      <listitem>
        <para>JDK 5.0 or newer</para>
      </listitem>
      <listitem>
        <para>
          POSIX-like operating system (Pustefix has been tested with Linux
          and Mac OS X, but might also work with other systems like *BSD)
        </para>
      </listitem>
      <listitem>
        <para>Apache Tomcat 5.5.x</para>
      </listitem>
      <listitem>
        <para>Apache Ant 1.6.5 or newer</para>
      </listitem>
    </itemizedlist>
    <para>
      The installation of these tools (except Tomcat) is not covered by this
      tutorial. Please refer to the documentation provided with these tools
      for installation instructions.
    </para>
  </section>
  <section xml:id="installation.prepareprojectdirectory">
    <title>Prepare the project directory</title>
    <para>
      If you are not using Eclipse, you can just create an empty directory
      that will contain the project files and proceed with <xref linkend="installation.unpack"/>.
    </para>
    <para>
      Start the Eclipse workbench and create a new project of type Java Project".
      Make sure that you choose separate source and build folders: Use 
      <filename>src</filename> for the source and <filename>build</filename> for 
      the build folder. This is important because the Pustefix build script 
      expects these folders.
    </para>
  </section>
  <section xml:id="installation.unpack">
    <title>Unpack the skeleton</title>
    <para>
      Download the newest <literal>pfixcore-skel-X.X.X.tar.gz</literal> from 
      Pustefix's <link xlink:href="http://sourceforge.net/project/showfiles.php?group_id=72089&amp;package_id=71811">downloads page</link>.
      Unpack the archive to a temporary directory. A new directory with the name 
      <filename>skel</filename> will be created. Copy the content of this directory
      to your new project directory.
    </para>
    <para>
      Now you need to download Apache Tomcat. Choose the 
      <literal>.tar.gz</literal> archive from the download page and place it in 
      the <filename>lib/tomcat</filename> directory of your project directory.
    </para>
    <para>
      After you are done with that, refresh the resources view in Eclipse to
      make the new files appear.
    </para>
  </section>
  <section xml:id="installation.configureeclipse">
    <title>Configure Eclipse</title>
    <para>
      To make features like auto-completion and auto-build work, you have to 
      import the libraries into Eclipse. Right-click on your project in Eclipse
      and choose "Build Path" ⇒ "Configure Build Path...". Now use the
      "Add JARs..." button to add all libraries from the project's 
      <filename>lib</filename> directory.
    </para>
    <para>
      As Pustefix generates some classes, you have to add the folder with the
      generated sources to Eclipse's source path. To make this work choose the
      "Source" tab in the same dialog you used to configure the build path and
      add the <filename>gensrc</filename> folder to the list of source folders.
    </para>
    <para>
      Finally, you have to configure the path to the JAR file containing Ant.
      In Eclipse choose <guimenu>Window</guimenu> ⇒ <guimenuitem>Preferences</guimenuitem>.
      In the dialog window choose <guimenu>Java</guimenu> ⇒ <guimenuitem>Build Path</guimenuitem> ⇒
      <guimenuitem>Classpath Variables</guimenuitem>. Choose
      <guimenuitem>New...</guimenuitem> and create a variable with the name <literal>PFX_ANT_LIB</literal>
      that contains the path to the <filename>lib/ant.jar</filename> within your
      Ant installation directory.
    </para>
  </section>
  <section xml:id="installation.firstbuild">
    <title>Build parameters &amp; first build</title>
    <para>
      Within the project directory, create a file called 
      <filename>build.properties</filename> containing two properties:
    </para>
    <programlisting>standalone.tomcat=true
makemode=test</programlisting>
    <para>
      The first property tells the build process, that we do want to run
      Tomcat without Apache Httpd integration. Apache Httpd integration can 
      be useful, because static files can be served faster. However this
      is an advanced topic and for our purposes Tomcat alone will be okay. 
    </para>
    <para>
      The second parameter set the so-called "make mode". This flag can be
      set to either "test" or "prod" and will cause the editor console
      to appear in web pages when in "test" mode. In fact you can even make
      your own settings depend on the make mode, but we will take care of 
      this later. For the moment "test" mode is just what we want. By the way,
      whenever you switch the make mode, you should do a complete rebuild 
      using <command>ant realclean &amp;&amp; ant</command> to make sure, 
      all resources have been built using the same make mode.
    </para>
    <para>
      Now run <command>ant</command> to perform a first build of the 
      environment. This will create needed symlinks and initialize the 
      environment.
    </para>
  </section>

</chapter>
