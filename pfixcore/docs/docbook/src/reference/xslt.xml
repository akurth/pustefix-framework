<?xml version="1.0"?>
<chapter xml:id="xslt" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd"
>
  <title>Core Pustefix tag library</title>
  <para>
    Pustefix includes a small library of tags defined as XSLT templates which implement low level functionality common to all
    Pustefix application. These templates are mostly concerned with creating links to Pustefix pages or external URLs, sending
    data via HTML forms (including the necessary error handling) and including XML ressources (<emphasis>Include Parts</emphasis>).
  </para>
  <para>
    All core tags reside in their own namespace. The prefix usually used is
    <code>pfx</code>, and the namespace is
    <code>http://www.schlund.de/pustefix/core</code>. You are not supposed to enter your own private project 
    specific tags into this namespace.
  </para>

  <para>
    The following table lists these tags together with a very short explanation what they do. Refer to the relevant subsections
    below to find a detailed explanation on their relevant attributes, subnodes and how to use them.
  </para>

<para>
  <table rules="all" frame="box">
    <caption>The Core Pustefix XSLT Tags</caption>
    <thead>
      <tr>
        <th>Tag name</th>
        <th>Short information</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>pfx:document</td>
        <td>The top-most container for all Pustefix pages</td>
      </tr>
      <tr>
        <td>pfx:frameset, pfx:frame</td>
        <td>Used to define pages with framesets and frames.</td>
      </tr>
      <tr>
        <td>pfx:button</td>
        <td>This tag creates simple links to internal Pustefix pages (possibly submitting parameters for requests)</td>
      </tr>
      <tr>
        <td>pfx:url</td>
        <td>Used to create only the content of the href attribute of a link to an internal page.</td>
      </tr>
      <tr>
        <td>pfx:elink</td>
        <td>
          This tag creates links to external URLs where care must be taken to strip the session ID from the referer header to not leak
          sensitive information to the outside world
        </td>
      </tr>
      <tr>
        <td>pfx:include</td>
        <td>
          This tag references a file via its href attribute, and includes a named snippet of xml content contained in this file
          via the part attribute.
        </td>
      </tr>
      <tr>
        <td>pfx:maincontent</td>
        <td>This tag is used to include "computed" include parts.</td>
      </tr>
      <tr>
        <td>pfx:image</td>
        <td>
          This tag references images to be included in the final page (via
          img-tags).
        </td>
      </tr>
      <tr>
        <td>pfx:forminput</td>
        <td>This tag creates a HTML form.</td>
      </tr>
      <tr>
        <td>pfx:xinp</td>
        <td>Used to create HTML form elements.</td>
      </tr>
      <tr>
        <td>pfx:checkfield</td>
        <td>This tag supplies content depending on the error state of a special form field.</td>
      </tr>
      <tr>
        <td>pfx:checkerror</td>
        <td>Used to check for the presence of any error condition.</td>
      </tr>
      <tr>
        <td>pfx:checkmessage</td>
        <td>Used to check for the presence of any page message.</td>
      </tr>
      <tr>
        <td>pfx:checkactive, pfx:checknotactive</td>
        <td>These tags check for visibility (or not) of pages or for the activity (or not) of handlers.</td>
      </tr>
      <tr>
        <td>pfx:themeselect, pfx:langselect</td>
        <td>Used to select content depending on a matching theme or currently selected language.</td>
      </tr>
      <tr>
        <td>pfx:editconsole, pfx:webserviceconsole</td>
        <td>create panels of shortcut links useful during development.</td>
      </tr>
    </tbody>
  </table>
</para>

  <section>
    <title>Defining the structure of a document</title>
    <para>
      This section describes the format for those documents serving as the structure defining
      xml source of the finally transformed documents. These can be found in the xml
      subdirectory of your project.
    </para>
    <para>
      The explanation keeps an eye on the expected usage patterns of these documents.
    </para>
    <para>
      There are basically two kind of "pages" you deliver with Pustefix.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Pages that have no frames and may deliver html or any other text based format.
        </para>
      </listitem>
      <listitem>
        <para>
          Pages that contain an arbitrary amount of frames and framesets. Those usually deliver html.
        </para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Structure of a Type 1 document</title>
      <para>
        For a html delivering page without frames:
      </para>
      <programlisting language="xml"><![CDATA[
<pfx:document xmlns:pfx="http://www.schlund.de/pustefix/core">
  <html>
    <!--
      Any content valid for an html document
    -->
  </html>
</pfx:document>]]></programlisting>
      <para>
        If you don't want to deliver html, just ommit the &lt;html&gt; tag. The following
        could be used to implement a CSS stylesheet.
      </para>
      <programlisting language="xml"><![CDATA[<pfx:document>.foo { color: #ffff00; font-family: Helvetica; }</pfx:document>]]></programlisting>
      <para>
        The rule of thumb is: Whatever you put between &lt;pfx:document&gt; is up to you and
        will be delivered just as you write it there. Just remember that the &lt;html&gt; is
        not automatically inserted for you, you have to write it yourself.
      </para>
    </section>
    <section>
      <title>Structure of a Type 2 document</title>
      <para>
        There are only subtle differences. A document is a Type 2 doc by definition
        whenever there is a &lt;pfx:frameset&gt; and possibly a &lt;head&gt; node as the
        only direct children of &lt;pfx:document&gt;.
      </para>
      <programlisting language="xml"><![CDATA[
<pfx:document xmlns:pfx="http://www.schlund.de/pustefix/core">
  <head>
    <!--
      Again, put anything you want to appear in the head of the _top frame! This means
      page title, script stuff or stylesheets.
    -->
  </head>
  <pfx:frameset rows="20,*">
    <pfx:frame name="navi">
      <html>
        <head>...</head>
        <body>
          <!-- Any HTML content -->
        </body>
      </html>
    </pfx:frame>
    <pfx:frame name="main">
      <html>
        <body>
          <!-- Any HTML content -->
        </body>
      </html>
    </pfx:frame>
  </pfx:frameset>
</pfx:document>]]></programlisting>
      <para>
        As you can see there is NO &lt;html&gt; tag just below &lt;pfx:document&gt;.
        This is the one important difference between Type 1) and Type 2). As a rule you
        could say that you only have to insert the &lt;html&gt; yourself wherever the
        "real" content is. In a Type 1) doc this is the whole content of the
        &lt;pfx:document&gt; tag, so we need to set it there. But for a Type 2) doc,
        the "real" content is the content of the &lt;pfx:frame&gt; tags, so you need to
        set it there.
      </para>
    </section>
  </section>

  <section>
    <title>Creating links to internal and external pages</title>
    <para></para>
  </section>

  <section>
    <title>Including text and images</title>
    <para>Introduction here...</para>
    <section>
      <title>Include parts (&lt;pfx:include&gt;)</title>
      <para>
        Include parts contain the content that is displayed on your pages.
        The parts are organized into include files. Every part has the same structure:
      </para>
      <para>
        The children of the part tag are theme tags (at least one). The name attribute
        of the theme tag is the name of a theme as it is defined in the projects
        depend.xml.in file. Often these themes are just the project name or "default",
        which is used as the fallback when no more specific theme name matches
        (see here on how to define themes in the depend.xml.in file).
      </para>
      <note>
        <para>
          Earlier versions of Pustefix had no special themeing, the only thing that
          was used was the project name itself and "default" as the fallback. Still today,
          the default value for the "themes" attribute in the root node of the depend.xml.in
          file (when not given explicitely) is just "&lt;ProjectName&gt; default", which
          makes the new system behave exactly as the old one did.
        </para>
      </note>
      <para>
        The resolution of the matching theme is done at the time the part is included
        (see below). Every page "knows" which themes are defined for it, and therefore it
        is possible to decide which product branch to use on generation time. The language
        on the other hand can be changed dynamically while the user clicks through the
        application, so the selection of the right language subtree (if more than one is
        present) is done at runtime.
      </para>
      <programlisting language="xml"><![CDATA[<include_parts>
  <part name="Foo">
    <theme name="default">
      <pfx:langselect>
        <pfx:lang name="default">
          <!--
            The default content of part Foo goes here...
          -->
        </pfx:lang>
        <pfx:lang name="en_GB">
          <!--
            Default content in british english goes here...
          -->
        </pfx:lang>
        <pfx:lang name="en_*">
          <!--
            Default content in any other english language goes here...
          -->
        </pfx:lang>
      </pfx:langselect>
    </theme>
    <theme name="Theme_A">
      <!--
        The default content for theme Theme_A goes here...
      -->
    </theme>
  </part>

  <part name="Baz">
    <!-- Other parts -->
  </part>
</include_parts>]]></programlisting>
      <para>
        A part is referenced with two attributes: The filename of the include file that
        contains it, and the name of the part.
      </para>
      <programlisting language="xml"><![CDATA[<pfx:include href="MyProject/txt/MyIncludefile" part="Foo" noerror="true|false" noedit="true|false"/>]]></programlisting>
      <para>
        <table rules="all" frame="box">
          <caption>Attributes of the pfx:include tag</caption>
          <thead>
            <tr>
              <th>Attribute name</th>
              <th>Mandatory?</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>href</td>
              <td>optional</td>
              <td>If not given, it defaults to the current include part file</td>
            </tr>
            <tr>
              <td>part</td>
              <td>mandatory</td>
              <td>The name of the part to include</td>
            </tr>
            <tr>
              <td>noerror</td>
              <td>optional</td>
              <td>Defaults to false. Set this to true to imply that no warning sign should be generated when the include is not found. Only set this when you know what you do.</td>
            </tr>
            <tr>
              <td>noedit</td>
              <td>optional</td>
              <td>Defaults to false. Set this to true to imply that this include part should not be editable via the pustefix editor. Only set this when you know what you do.</td>
            </tr>
          </tbody>
        </table>
      </para>
      <para>
        Using this tag results in the matching product branch of the include part to be
        inserted in place of the tag.
      </para>
    </section>
    <section>
      <title>Generated include requests (&lt;pfx:maincontent&gt;)</title>
      <para>
        Looking at the example naturally leads to the question how it is possible to
        generate different pages with only a small number of structural xml files and
        always the same XSLT stylesheets. The answer is that at least one of the include
        parts isn't included via the pfx:include tag (which only handles static attribute values)
        but instead the filename of the include part is auto generated from the name of the
        page that is to be produced.
      </para>
      <para>
        Looking at this page, one can see that the two transformations which produce BazPage.xml resp. BazPage.xsl have the page name supplied through the use of an XSLT transformation parameter. Using this parameter, the tag pfx:maincontent constructs an include request depending on the page name.
      </para>
      <programlisting language="xml"><![CDATA[<pfx:maincontent part="content" path="MyProject/txt/pages" prefix="main_"/>]]></programlisting>
      <para>
        <table rules="all" frame="box">
          <caption>Attributes of the pfx:maincontent tag</caption>
          <thead>
            <tr>
              <th>Attribute name</th>
              <th>Mandatory?</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>path</td>
              <td>optional</td>
              <td>If not given, but a XSLT parameter $maincontentpath has been defined in the depend.xml.in file, the value of the parameter is used. If there's even no $maincontentpath parameter, it defaults to PROJECTNAME/txt/pages</td>
            </tr>
            <tr>
              <td>prefix</td>
              <td>optional</td>
              <td>defaults to main_</td>
            </tr>
            <tr>
              <td>postfix</td>
              <td>optional</td>
              <td>defaults to .xml</td>
            </tr>
            <tr>
              <td>part</td>
              <td>optional</td>
              <td>defaults to content</td>
            </tr>
          </tbody>
        </table>
      </para>
      <para>
        For the page "home" this is equivalent to <![CDATA[<pfx:include href="MyProject/txt/pages/main_home.xml" part="content"/>]]> and of course similar for every other page.
      </para>
      <para>
        Starting with this page specific include, the content of the page can be included from many different include parts.
      </para>
    </section>
  </section>

  <section>
    <title>Handling HTML forms</title>
    <para></para>
  </section>

  <section>
    <title>Miscellaneous utility tags</title>
    <para></para>
  </section>

</chapter>
