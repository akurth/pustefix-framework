The Pustefix testing guide
--------------------------

This is a guide to make you familiar with the capabilities of testing subsystem
of Pustefix.

First I will give a brief summary on the following chapters:

1) The basics.
2) Using the RecordManager to record reference data.
3) Using the TestClient to play-back recorded data.



1)Imagine that at time point T1 your application works well. Now its
time to record this. After a some week of development at time point T2
you want to know if your application still works well. To do this, the
requests from T1 are sent against your application at T2. The idea is
that the output of T2 must not differ against the output of T1. If these
outputs differ the difference will be displayed.


2)Prerequisite is that in the 'depend.xml.in' the make node must have a
'record_dir' attribute. The 'record_dir' attribute is the directory where 
recorded files will be written. Specify it relative to document root.

After restarting Pustefix the EditConsole will be appear expanded. On the right
next to the 'EditMode'- and the 'XMLTree Switch' there is an input field
with an arrow on the right. In the input field the name of the recording
session is specified. After you entered a name and presses the arrow button,
the arrow button changes to a red blinking button. This means that every request
and every response will be recorded. When recoding is finished, press the blinking
button and it will become the arrow button again. Now recording is disabled.

For the name of your record session  a directory where all requests and responses 
are written to will be created. The path to this directory will be:
[THE_RECORD_DIR_FROM_DEPEND_XML]/[RECORD_SESSION_NAME]/

If the name of your recording session already exists it will be replaced with 
something [YOUR_NAME]_N , where N is a positive Integer.


Alternatively you can get a recording session by appending __recordmode=[RECORD_SESSION_NAME]
to the URL and stop it by appending __recordmode=0.

3)There are two possibilities to play-back the recorded data. One is in the CMS of Pustefix 
which is a simple web application. Its user interface should be self-explaining.
The other is a application that runs in textual mode on a console. This application
can be found at 'de.schlund.pfixxml.testenv.ConsoleTestClient'. If you start it 
without any parameters you will receive following output:
 ConsoleTestClient -l [log4jconfig] -d [recorded dir] -t [temporary dir] -s [stylesheet dir]
These 4 parameters will be explained now:
* -l specify a log4j configuration. A default configuration can be found at 
example/testenv/log4jconf.xml. 
* -d specify the directory containing recorded data. It might be 
[THE_RECORD_DIR_FROM_DEPEND_XML]/[RECORD_SESSION_NAME]/
* -t specify a directory where temporary files will be written.
* -d specify a directory containing stylesheets. If you do not want to use a stylessheet
specify any directory.

After specifying the correct parameter the ConsoleTestClient will play-back
the recorded data and displays the differences between the current result and
the recorded result.

