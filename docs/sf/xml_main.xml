<div>
  <h1>Recursive Transformations</h1>
  <p>
    The XML/XSLT System of <pustefix/> is responsible for generating the
    final stylesheet that represents the static content of a page.  This
    stylesheet is then used together with the DOM tree that holds the
    result of the request (as given by the business logic) to produce the
    final HTML output.
  </p>

  <p>The figure below shows the typical transformations and files that
    are involved in producing the final stylesheet
    <code>BazPage.xsl</code> (this is slightly simplified,
    <code>master.xsl</code> and <code>metatags.xsl</code> are in fact
    the product of yet another transformation, but the only thing these transformations
    do is to customize the resulting stylesheets to your particulary environment
    so they can be written without using e.g. absolute pathnames).</p>
  <p>
    Note that we only discuss the common case here, arbitrary complex
    and deep transformation trees are in fact possible.
  </p>
    
  <stdimg src="img/targets.png">
    Typical transformation steps used to generate a single page.
  </stdimg>

  <p>
    <span style="background-color: #eb613d; border: black solid
    1px;">red boxes</span> are supplied by the framework, you don't
    need to create them yourself and as an application programmer, you can't change them. Currently this is only the case for
    <code>master.xsl</code> and other stylesheets that make up the core environment (these are not shown here,
    they are included into <code>master.xsl</code> and <code>metatags.xsl</code> with the help of <code>xsl:include</code>).
  </p>

  <p>
    <span style="background-color: #94bd5e; border: black solid 1px;">green boxes</span> are the result of
    XSL transformations.
  </p>

  <p>
    All the <span style="background-color: #99ccff; border: black solid 1px;">blue boxes</span>
    represent files that you need to create yourself. As you can see from the diagram, you only need one
    <code>metatags.xsl</code> per project. The <code>skin.xsl</code>
    file is special, as it is not a target (see below) but just another
    XSLT stylesheet that can be included via <code>xsl:include</code> into both 
    <code>master.xsl</code> and <code>metatags.xsl</code>. It contains templates that should apply on both
    transformation stages, while <code>metatags.xsl</code> contains templates that apply only on the
    first stage.</p>

  <p>
    There are projects that don't use a <code>skin.xsl</code>
    stylesheet at all or include even more stylesheets. This is part
    of the customization of <code>master.xsl</code> and
    <code>metatags.xsl</code> mentioned above (and <a href="#caution">below</a>), but not shown in the diagram.
  </p>

  <p>
    The <code>FooBase.xml</code> file defines the <i>structure</i> of
    the "BazPage" page (e.g. frames, the outer table structure if you do the
    layout with tables or divs and the like). You define one of these
    <b>structural xml</b> files for every layout you want to use in your project (the number of
    structural xml files is typically quite small, as many pages share the same layout).
  </p>
  
  <p><span style="background-color: #99ccff; border: black solid 1px;">blue discs</span> represent <b>include parts</b>.
    These are little snippets of XML code that make up the actual
    content of the page. As can be seen from the diagram, they can
    include themselves recursively. Include parts have a <i>name</i>
    and are organized into so called <b>include documents</b>. These
    can hold an arbitray number of parts. Learn more about include parts and the way they are used below.
  </p>
  
  <h1>Targets</h1>
  <p>
    A <b>target</b> is everything that is the result of a XSLT
    transformation as seen in the figure above. It is also obvious
    that a target can be used to create new targets. For the sake of
    completeness, the initial XML or XSL files that are used in
    transformations are called targets, too.
  </p>
  <p>
    The <pustefix/> system knows four different types of tragets:
  </p>

  <table class="stdtable">
    <tr>
      <th nowrap="nowrap">Main Category</th>
      <th>Type</th>
      <th>Example</th>
      <th>Notes</th>
    </tr>
    <tr>
      <td rowspan="2" nowrap="nowrap">Leaf targets</td>
      <td>XML</td>
      <td>
        <code>FooBase.xml</code>
      </td>
      <td rowspan="2">
        Leaf targets are targets that are not the result of a XSL
        transformation, but are read directly from files.  You only
        edit leaf targets, never virtual targets. The distinction
        between XML/XSL is made depending on the purpose the target
        serves. A XML target is read into the system without doing any
        special processing, while a XSL target is compiled into a
        <code>templates</code> object that is able to transform XML
        input.
      </td>
    </tr>
    <tr>
      <td>XSL</td>
      <td>
        <code>metatags.xsl</code>, <code>master.xsl</code>
      </td>
    </tr>
    <tr>
      <td rowspan="2" nowrap="nowrap">Virtual targets</td>
      <td>XML</td>
      <td>
        <code>BazPage.xml</code>
      </td>
      <td rowspan="2">
        Virtual targets are the result of a XSL transformation. They
        don't exist as files (in fact they do, but only to cache the
        result on the harddisk. These cache files must never be edited
        by hand). The difference between the XML/XSL type is analog
        to the leaf targets</td>
    </tr>
    <tr>
      <td>XSL</td>
      <td><code>BazPage.xsl</code>
      </td>
    </tr>
  </table>

  <p><a name="caution"/>
    <b>Caution:</b> The table uses the slightly simplified example from above. As noted there, <code>master.xsl</code>
    and <code>metatags.xsl</code> are no leaf targets, but in fact virtual targets. The complete truth is that
    the transformations look like this:</p>
  <center>
    <code>core/xsl/master.xsl</code> (<b>XML</b>/Leaf) + <code>YOUR_PROJECT/xsl/custommaster.xsl</code> (XSL/Leaf) =>
    <code>master.xsl</code> (XSL/Virtual)
    <br/>and<br/>
    <code>YOUR_PROJECT/xsl/metatags.xsl</code> (<b>XML</b>/Leaf) + <code>core/xsl/customizestylesheet.xsl</code> (XSL/Leaf) =>
    <code>metatags.xsl</code> (XSL/Virtual)
  </center>
  <p>
    In almost all cases, you can just forget about this added
    complexity when reading the documentation. We will explicitely make it clear where you can't.</p>

  <h1>Include parts</h1>
  Include parts hold the content that is displayed on your pages.
  The parts are organized into include files.

  <xmlcode>
    
    <include_parts>
      <xmlcodeNS ns="ixsl">http://www.w3.org/1999/XSL/Transform</xmlcodeNS>
      <xmlcodeNS ns="pfx">http://www.schlund.de/pustefix/core</xmlcodeNS>
      <part name="Foo">
        <product name="default">
          <lang  name="default">
            <xmlcodeOFF>
              <div class="comment">The <b>default</b> content of part <b>Foo</b> goes here...</div>
            </xmlcodeOFF>
          </lang>
          <lang name="fr">
            <xmlcodeOFF>
              <div class="comment">Default content in <b>french</b> goes here...</div>
            </xmlcodeOFF>
          </lang>
        </product>
        <product name="">
          <lang name="default">
            <xmlcodeOFF>
              <div class="comment">The default content for product <b>prod_b</b> goes here...</div>
            </xmlcodeOFF>
          </lang>
          <lang name="fr">
            <xmlcodeOFF>
              <div class="comment">Content for <b>prod_b</b> in <b>french</b> goes here...</div>
            </xmlcodeOFF>
          </lang>
        </product>
      </part>
      <xmlcodeOFF/>
      <part name="partBaz">
        <xmlcodeOFF>
          <div class="comment">Other parts...</div>
        </xmlcodeOFF>
      </part>
    </include_parts>
  </xmlcode>
  
</div>