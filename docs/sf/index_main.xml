<div>
  <h1>What is Pustefix</h1>

  <p>
    <pustefix/> is a framework that helps you to develop web based
    applications (referred to as <i>projects</i> here). A high level
    view of the system is given on <a href="overview.html">this</a>
    page. The framework consists of two more or less independent
    parts:
  </p>

  <ul>
    <li>A machinery to apply recursive XSLT transformations that
      produces the UI of the web application. You can learn more about
      this <a href="xml.html">here</a>.</li>
    <li>A Java framework that takes input from the UI to change the
      application data and supplies changes of the application data back
      to the UI. This part is explained in much more detail <a href="java.html">here</a></li>
  </ul>

  <p>
    Together, the framework acts similar to the <i>Model-View-Controller</i> pattern.
  </p>

  <h2>Sourceforge</h2>
  <pustefix/> uses <a href="http://sourceforge.net/cvs/?group_id=72089">CVS</a>,
  <a href="http://lists.sourceforge.net/lists/listinfo/pustefix-devel">mailing list</a>,
  web space and other services supplied by SourceForge. You can go to the
  project page <a href="http://sourceforge.net/projects/pustefix">here</a>.
  
  <h1>Development news</h1>
  
  Mostly internal stuff and bugfixes (please refer to the ChangeLog or
  the documentation on this site for more details):

  <ul>
    <li>
      Removed <code>needsData()</code> as part of the
      <code>ContextResource</code> interface. This was never really
      needed anyway.
    </li>

    <li>
      implemented a very simple form of "aliasing" for pagerequests in the config files.
      Many different pagerequests can now share their configuration details.
    </li>

    <li>
      Added the possibility to jump into a pageflow without directly
      specifing the target page. The page that will be used is
      determined to be the first page needing data from the given pageflow.
    </li>
    
    <li>
      Added the possiblity to add <code>FlowStepAction</code>s to
      every step of a pageflow. These actions consist of a list of
      XPath expressions acting as tests on the generated result DOM
      which will trigger an associated action (like "jump to another
      page") when they match. These tests are run whenever the
      relevant flowstep want's to continue with the pageflow. Using
      this mechanism it's possible to change the whole pageflow run
      depending on the state of the application (if this state is
      reflected in the result DOM).
    </li>

    <li>
      Added a new configurable exception handling. The current system will
      be changed to use this system shortly.
    </li>

    <li>
      Simplified and normalised the depend.xml.in file syntax even
      more. Now also metatags.xsl is a customized version of core
      stylesheet (much like master.xsl)
    </li>

    <li>
      Moved to XSLT 1.1 for the core stylesheets. This will help with
      the time it still takes for the transition to XSLT 2.0.
    </li>

    <li>
      changed the way parameters and commands are associated to a
      special submit button. They are no longer completely encoded
      into the name of the button, instead only a prefix is
      transmitted as the name while the parameters are put into
      special named hidden input tags.
    </li>

    <li><b>...and many many bugfixes</b></li>
  </ul>
  <h2>ChangeLog</h2>

  You can see the up to date ChangeLog entries from CVS
  <a href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pustefix/pfixcore/ChangeLog?rev=HEAD&amp;content-type=text/vnd.viewcvs-markup">
    here</a>


    <h2>Old news</h2>

    <h3>0.5.3</h3>
    <p>
      We added more possibilities for the pageflow handling (See the ChangeLog for more information).
    </p>
    <ul>
      <li>
        You can now set a pageflow even if the current page is no
        member of that pageflow. This allows to enter into any
        pageflow after the submit to the current page returns
        successfully.
      </li>
      <li>
        The request parameters <code>__jumptopage</code> and
        <code>__jumptopageflow</code> are similar to the common
        <code>__page</code> and <code>__pageflow</code> parameters,
        but they specify a page (and the associated pageflow) the
        system should jump to unconditionally after a successful
        submit. In other words: If there is a
        <code>__jumptopage</code> set, the system won't start the
        usual pageflow process, but instead jump to the specified page
        (selecting, if it exists, the value of <code>__jumptopageflow</code> as the
        new pageflow)
      </li>
    </ul>
    <p>
      We upgraded our embedded tomcat to version 4.1.30
    </p>
    
</div>
