<div>
  <h1>The depend.xml.in file</h1>

  <p>
    The <code>depend.xml</code> configuration file serves two
    purposes: First, it is used to create the <i>hierarchical page
    structure</i> of the project by defining a <i>tree of pages</i>.
    Then, it is used to define the internal structure of the pages by
    defining for every single page, the <i>tree of transformations</i>
    that need to be applied to certain files to get the final
    stylesheet (which is the representation of the page in
    <pustefix/>). For an overview over the transformation aspect of
    the whole framework, please go <a href="xml.html">here</a>.
  </p>

  <p>To make life a little easier, you never edit the <code>depend.xml</code> file directly,
    but instead a <code>depend.xml.in</code> file which is used to
    produce the <code>depend.xml</code> file (this is done
    automatically by the build system of the skeleton package and the
    CVS checkout).
  </p>
  
  <p>The structure of the config file is show below:
  </p>
  
  <xmlcode>
    <make cachedir="..." recorddir="...">
      <xmlcodeOFF>
        <table class="stdtable">
          <tr>
            <th>Attribute</th>
            <th>Notes</th>
          </tr>
          <tr>
            <td>cachedir</td>
            <td>
              <p>This attribute designates a directory where the generated stylesheets are saved to.</p>
              <p>NOTE: The attribute is <b>mandatory</b>; you must give a path relative to the <b>docroot</b> here!</p>
            </td>
          </tr>
          <tr>
            <td>record_dir</td>
            <td>
              <p>This attribute designates the directory that is used
              to save recorded trails to (see the documentation for
              the <a href="testclient.html">testclient</a> to learn
              more about the use of this attribute).</p> <p>NOTE: The
              attribute is <b>optional</b>, if given, it must be
              either an absolute path name or a relative path which is
              interpreted as being relative to the <b>docroot</b></p>
            </td>
          </tr>
        </table>
      </xmlcodeOFF>
      <navigation>
        <xmlcodeOFF>
          <table class="stdtable">
            <tr>
              <td>This tag has only <code>page</code> nodes as
              children. The tree of pages matches the hierarchy of the
              projects sitetree.</td>
            </tr>
          </table>
        </xmlcodeOFF>
        <page name="foo" handler="/xml/static">
          <page name="sub_foo1" handler="/xml/static"/>
          <page name="sub_foo2" handler="/xml/static"/>
          ...
        </page>
        <page name="bar" handler="/xml/config">
          ...
        </page>
        ...
        <xmlcodeOFF>
          <table class="stdtable">
            <tr>
              <th>Attribute</th>
              <th>Notes</th>
            </tr>
            <tr>
              <td>
                name
              </td>
              <td>
                <p>
                  The name of the page. This name is used throughout
                  <pustefix/> to reference the page (e.g. when creating
                  internal links and in other config files).
                </p>
                <p>
                  NOTE: This attribute is <b>mandatory</b>
                </p>
              </td>
            </tr>
            <tr>
              <td>
                handler
              </td>
              <td>
                <p>This attribute tells the system which servlet is
                  used to handle requests for this page. You can think
                  of the <code>handler</code> attribute as a project wide servlet "name" 
                  as defined in the <a href="project.html">project definition</a></p>
                <p>
                  NOTE: This attribute is <b>mandatory</b>
                </p>
              </td>
            </tr>
          </table>
        </xmlcodeOFF>

        <target name="a_target_name.xsl"       type="[xsl|xml]">...</target>
        <target name="another_target_name.xml" type="[xsl|xml]">...</target>
        ...
        <standardpage name="a_page_name"       xml="a_base_xml_file.xml">...</standardpage>
        <standardpage name="another_page_name" xml="a_base_xml_file.xml">...</standardpage>
        ...
        <xmlcodeOFF>
          <table class="stdtable">
            <tr>
              <td>
                <p>The only other tags allowed besides the
                  <code>navigation</code> tag are <code>target</code>
                  and <code>standardpage</code>. The latter is only a
                  convenience tag that can be expressed fully in terms
                  of <code>target</code> tags (Expanding the
                  <code>standardpage</code> tag is one of the duties
                  of the transformation [<code>depend.xml.in</code>
                  => <code>depend.xml</code>] mentioned above).
                </p>
                <p>See below for a detailed explanation of targets and their configuration</p>
              </td>
            </tr>
          </table>
        </xmlcodeOFF>
      </navigation>
    </make>
  </xmlcode>

  <h2>Targets and their definition</h2>

  coming soon...
</div>

  