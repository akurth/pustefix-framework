<?xml version="1.0"?>
<chapter xml:id="configuration" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd">
  <title>Configuration Files</title>
  
  <section xml:id="configuration.javaprops">
    <title>Java property files in Pustefix</title>
    <para>
      Some parts of the Pustefix frameworks are configured using Java 
      properties. To ease this configuration Pustefix provides you with 
      a special XML format which is read instead of the usual Java 
      property file format. This format provides some customization 
      mechanism to allow configuration options to depend on settings 
      like the makemode or the machine the application is being built on.
    </para>
    <para>
      The structure of a standard .xml property file is very easy:
      <programlisting language="xml"><![CDATA[
<standardprops version="1.0"
  xmlns="http://pustefix.sourceforge.net/2004/properties"
  xmlns:cus="http://www.schlund.de/pustefix/customize"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pustefix.sourceforge.net/2004/properties http://pustefix.sourceforge.net/2004/properties.xsd">
      ]]></programlisting>
      The <tag class="namespace">cus</tag> namespace is needed to use 
      the customization tags explained below.
      <programlisting language="xml"><![CDATA[
  <properties>
    <prop name="statuscodefactory.messagefile">common/dyntxt/statusmessages.xml</prop>
]]>
      </programlisting>
      The prop tag is the most primitive way to enter a single property. 
      The example above would simply result in the java property
      <literal>statuscodefactory.messagefile=common/dyntxt/statusmessages.xml</literal>.
      <programlisting language="xml"><![CDATA[
  </properties>
</standardprops>
      ]]></programlisting>
      Pustefix allows to customize the creation of the property files 
      in certain ways. When the file is being read, the system uses 
      settings defined in common/conf/buildtime.prop (which itself is 
      automatically generated by the build system) to provide the 
      parameters used in the customization tags:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>makemode</literal> The value of the ant property 
          makemode, which can be passed on the ant commandline but will 
          more commonly be specified in the environment variable 
          MAKE_MODE. This can be used to easily switch preferences 
          depending on the "mode" that is active when the application 
          is built, e.g. "test" on development machines, and "prod" on 
          the production servers. The value is supplied as the parameter 
          mode. Note that the value of MAKE_MODE also determines if 
          certain features are allowed like the possiblity to use the 
          Pustefix editor or to get the XML result instead of the 
          rendered page. These features are turned off for security 
          reasons when the mode is "prod".
        </para>
      </listitem>
      <listitem>
        <para>
          The user id (<literal>uid</literal>) of the user that starts 
          the build process.
        </para>
      </listitem>
      <listitem>
        <para>
          The full qualified domainname (as the parameter 
          <literal>fqdn</literal>) of the machine you start the build 
          process.
        </para>
      </listitem>
      <listitem>
        <para>
          The name of the machine (<literal>machine</literal>) you 
          start the build process on.
        </para>
      </listitem>
      <listitem>
        <para>
          Any ant property (<literal>__antprop_*</literal>) defined 
          within the build file.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Certain customization tags work with these parameters:
      <programlisting language="xml"><![CDATA[
<properties
  xmlns:cus="http://www.schlund.de/pustefix/customize">
  <prop name="foo">
    <cus:uid/>
  </prop>
      ]]></programlisting>
      Use <tag>cus:uid</tag> to reference the user that started 
      the build process. In the same way you can use 
      <tag>cus:machine</tag> and <tag>cus:fqdn</tag> to insert 
      the value of the supplied XSLT parameter
      <programlisting language="xml"><![CDATA[
  <choose>
    <when test="$mode='test'">
      
    </when>
    <when test="$uid='pfixuser'">
      
    </when>
    <when test="$machine='server1'">
      ]]></programlisting>
      These <tag>choose</tag> and <tag>when</tag> elements are 
      allowed only within properties elements. The three 
      <tag class="attribute">test</tag> nodes above test for one 
      of the supplied XSLT parameters...
      <programlisting language="xml"><![CDATA[
    </when>
    <when test="$mode='prod' and $uid='pfixuser'">
      
    </when>
    <when test="$mode='prod' or machine='server1'">
      ]]></programlisting>
      ...you can use boolean operators to combine tests
      <programlisting language="xml"><![CDATA[
    </when>
    <otherwise>
      ]]></programlisting>
      The "default test" that will always pass.
      <programlisting language="xml"><![CDATA[
    </otherwise>
  </choose>
</properties>
      ]]></programlisting>
      If you think the customization system really looks like XSLT, 
      you are almost right as in fact the test expressions are coded 
      using XPath - the same standard XSLT is using, too.
    </para>
    <para>
      This customization mechanism is not only available within the 
      XML property files but also in most other Pustefix 
      configuration files.
    </para>
  </section>
  
  <section xml:id="configuration.contextxmlservlet">
    <title>ContextXMLServlet configuration format</title>
    <para>
      Most projects use one or a (small) number of 
      <classname>de.schlund.pfixxml.ContextXMLServlet</classname> 
      servlets that drive the business logic of the application. 
      All pages that are to be generated via XSLT from a data XML 
      tree are handled by a servlet of this type.
     </para>
    <para>
      This servlet uses a configuration file that has a special 
      syntax. However properties and customization in this file 
      work nearly the same way as explained for the standard 
      property definitions.
    </para>
    <para>
      <programlisting language="xml"><![CDATA[
<contextxmlserver version="1.0"
  xmlns="http://pustefix.sourceforge.net/2004/properties"
  xmlns:cus="http://www.schlund.de/pustefix/customize"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pustefix.sourceforge.net/2004/properties http://pustefix.sourceforge.net/2004/properties.xsd">
  <servletinfo depend="MyProject/conf/depend.xml" name="AUniqueNameForTheServlet">
      ]]></programlisting>
      The attributes <tag class="attribute">depend</tag> and 
      <tag class="attribute">name</tag> are mandatory. If 
      <tag class="attribute">depend</tag> starts with a '/' 
      the value is used unchanged, otherwise (which is the 
      usual case) it's interpreted as a path relative to 
      the <literal>docroot</literal>.
      <programlisting language="xml"><![CDATA[
    <editmode allow="true|false"/>
      ]]></programlisting>
      <tag class="attribute">allow</tag> needs to be set to 
      <literal>true</literal> if you want to be able to use 
      the pustefix editor. You can wrap this tag within a 
      customization element to allow edit mode only in 
      certain modes (e.g. test mode). The whole node is 
      optional.
      <programlisting language="xml"><![CDATA[
    <ssl force="true|false" modes="ListOfModes"/>
      ]]></programlisting>
      <tag class="attribute">force</tag> must be set to 
      <literal>true</literal> if the servlet needs to run 
      under SSL. You can wrap this tag within a 
      customization element to force use of SSL only in 
      certain modes (e.g. prod mode). The whole node is 
      optional.
      <programlisting language="xml"><![CDATA[
    <defaultstate class="a.state.Class"/>
    <defaultihandlerstate class="another.state.Class"/>
      ]]></programlisting>
      <tag>defaultstate</tag> and 
      <tag>defaultihandlerstate</tag> are both optional. 
      The <tag class="attribute">class</tag> attribute must 
      be given. <classname>a.state.Class</classname> should 
      de a descendant of 
      <classname>de.schlund.pfixcore.workflow.app.StaticState</classname> 
      and <classname>another.state.Class</classname> should 
      be a descendant of 
      <classname>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</classname> 
      (unless you really know what you are doing). They are 
      used to set the defaults for the state tag used when 
      processing the <tag>pagerequest</tag> tag 
      (see there for more info).
      <programlisting language="xml"><![CDATA[
  </servletinfo>
  
  <context defaultflow="AFlowName" authpage="APageName" synchronized="true">
      ]]></programlisting>
      <table rules="all" frame="box">
        <caption>Context attributes</caption>
        <thead align="left">
          <tr>
            <th>Attribute</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>defaultflow</literal></td>
            <td><emphasis>Mandatory</emphasis>. Must reference a 
            valid <literal>pageflow</literal> (See below).</td>
          </tr>
          <tr>
            <td><literal>authpage</literal></td>
            <td>Optional. It must be given, if the servlet should 
            supply a login/authentification page. If given, it must 
            reference a valid <literal>pagerequest</literal> with an 
            auth child node.</td>
          </tr>
          <tr>
            <td><literal>synchronized</literal></td>
            <td>Optional. Defaults to <literal>true</literal>. If 
            set to <literal>true</literal>, only one request per 
            session is handled concurrently. If set to 
            <literal>false</literal> all requests will be handled 
            concurrently, requiring thread-safe business logic.</td>
          </tr>
        </tbody>
      </table>
      <programlisting language="xml"><![CDATA[
    <resource class="AContextResource">
      ]]></programlisting>
      <tag class="attribute">class</tag> is 
      <emphasis>mandatory</emphasis>, must be a 
      <classname>ContextResource</classname>. There may be multiple 
      resource tags given.
      <programlisting language="xml"><![CDATA[
      <implements class="An_Interface">
      ]]></programlisting>
      <tag class="attribute">class</tag> is 
      <emphasis>mandatory</emphasis>, must be an interface 
      implemented by the <classname>ContextResource</classname>. 
      There may be more than one <tag>implements</tag> tag for a 
      <classname>ContextResource</classname>, but each interface 
      must be unique in the whole context. In other words: it's 
      possible for a <classname>ContextResource</classname> to 
      implement more than one interface, but not possible for one 
      interface to be implemented by two 
      <classname>ContextResources</classname> used in the same 
      <classname>Context</classname> definition.
      <programlisting language="xml"><![CDATA[
      </implements>
      <properties>
      ]]></programlisting>
      The whole node is optional.
      <programlisting language="xml"><![CDATA[
        <prop name="AName">AValue</prop>
      ]]></programlisting>
      <tag>prop</tag> is <emphasis>mandatory</emphasis> and can 
      be used multiple times. It's similar to the use as a child 
      of <tag>pagerequest</tag>/<tag>properties</tag>, but used 
      here to create properties that are related to a context 
      resource implementation. The resulting property looks like this:
      <literal>context.resourceparameter.AContextResource.AName=AValue</literal>
      Customization tags may be used around a property to make it 
      depend on a certain makemode, etc.
      <programlisting language="xml"><![CDATA[
      </properties>
    </resource>
  </context>
  
  <scriptedflow name="AName" file="path/to/scriptfile.xml"/>
      ]]></programlisting>
      There may be an arbitrary number of <tag>scriptedflow</tag> 
      tags, but each one must have a unique name. Scripted flows 
      are a special method to control a session and do automatic 
      requests based on initial user input.
      <programlisting language="xml"><![CDATA[
  <role name="MY_ROLE">
    <pageaccess names="mypage*"/>
  </role>
      ]]></programlisting>
       You can define an arbitrary number of roles and assigned 
       authorizations here, for details see Role-based authorization.
       <!-- TODO Add link here -->
       <programlisting language="xml"><![CDATA[
  <pageflow name="AName" final="APageName" stopnext="true|false">
       ]]></programlisting>
       There may be multiple pageflow tags defined, but you need at 
       least one (which must be referenced by the defaultflow attribute 
       above). We only describe the normal case without using variants. 
       See here for more information on how to handle variants of 
       pageflows.
       <!-- TODO Add link here --> 
       <table rules="all" frame="box">
        <caption>Pageflow attributes</caption>
        <thead align="left">
          <tr>
            <th>Attribute</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>name</literal></td>
            <td><emphasis>Mandatory</emphasis>. Must be a unique name.</td>
          </tr>
          <tr>
            <td><literal>final</literal></td>
            <td> Optional, must reference a page with a valid 
            <tag>pagerequest</tag> definition given in this property 
            file. There may be many pageflows defined for a servlet. 
            A page may well be used in more than one pageflow.</td>
          </tr>
          <tr>
            <td><literal>stopnext</literal></td>
            <td> Optional, defaults to false. If given and 
            <literal>true</literal>, the pageflow will stop at the 
            next accessible page after the current page even if this 
            page would normally be skipped in the workflow because 
            it doesn't need any input.</td>
          </tr>
        </tbody>
      </table>
      <programlisting language="xml"><![CDATA[
    <flowstep name="AnotherPageName" stophere="true|false">
      ]]></programlisting>
      <table rules="all" frame="box">
        <caption>Flowstep attributes</caption>
        <thead align="left">
          <tr>
            <th>Attribute</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>name</literal></td>
            <td><emphasis>Mandatory</emphasis>. Must reference a 
            valid <tag>pagerequest</tag>. Usually there are many 
            flowsteps defined in a pageflow.</td>
          </tr>
          <tr>
            <td><literal>stophere</literal></td>
            <td>Optional, if true the pageflow will stop at this 
            step unconditionally if the submit originated from a 
            step that's before this one in the pageflow. See 
            also the <tag class="attribute">stopnext</tag> 
            attribute of the  tag which is quivalent to 
            specifying <literal>stophere="true"</literal> for 
            every single flowstep.</td>
          </tr>
        </tbody>
      </table>
      <programlisting language="xml"><![CDATA[
      <oncontinue applyall="true|false">
      ]]></programlisting>
      This tag (which is optional) starts a sequence of 
      test/action pairs. The tests are XPath expressions which 
      work on the DOM tree as produced by the flowstep's 
      associated state (note that the navigation is not 
      inserted into the DOM tree at this stage, and the 
      <literal>/formresult/formvalues</literal> and 
      <literal>/formresult/formerrors</literal> paths are also 
      not present). The pageflow system calls the tests whenever 
      a state returns a ResultDocument (before it continues with 
      other stuff e.g. a pageflow run).
      The <tag class="attribute">applyall</tag> attribute is 
      optional. If given and <literal>true</literal>, all actions 
      with matching conditions are executed, if not given or 
      <literal>false</literal> (the default) only the first 
      action with a matching condition is executed.
      <programlisting language="xml"><![CDATA[
        <when test="A_XPath_Expression">
      ]]></programlisting>
      The <tag>when</tag> tag contains the XPath expression to try 
      in it's <tag class="attribute">test</tag> attribute. If this 
      attribute is omitted, the whole condition is considered to 
      be true.
      <programlisting language="xml"><![CDATA[
          <action type="jumpto" page="APage" pageflow="APageFlow">
      ]]></programlisting>
      The <tag>action</tag> tag denotes the 
      <classname>FlowStepAction</classname> to execute. The 
      <tag class="attribute">type</tag> attribute is mandatory and 
      defines the special action to use. The string 
      <literal>jumpto</literal> denotes the special 
      <classname>FlowStepAction</classname> 
      <classname>de.schlund.pfixcore.workflow.FlowStepJumpToAction</classname>  
      which is used to set the jumptopage (defined via the 
      <tag class="attribute">page</tag> attribute) and/or the 
      jumptopageflow (defined via the 
      <tag class="attribute">pageflow</tag> attribute).
      <programlisting language="xml"><![CDATA[
          </action>
        </when>
        <when test="A_XPath_Expression">
          <action type="A_FlowStepAction" somekey="somevalue">
      ]]></programlisting>
      If the <tag class="attribute">type</tag> attribute is not 
      <literal>jumpto</literal>, the value is interpreted as a 
      class of type 
      <classname>de.schlund.pfixcore.workflow.FlowStepAction</classname>. 
      There can be an arbitrary number of additional 
      attributes (<literal>somekey</literal> in this example) which are 
      supplied as named parameters to the special 
      <classname>FlowStepAction</classname>.
      <programlisting language="xml"><![CDATA[
          </action>
        </when>
      </oncontinue>
    </flowstep>
  </pageflow>
  
  <pagerequest name="APageName" nostore="true|false" copyfrom="APageName">
      ]]></programlisting>
      <table rules="all" frame="box">
        <caption>Pagerequest attributes</caption>
        <thead align="left">
          <tr>
            <th>Attribute</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>name</literal></td>
            <td><emphasis>Mandatory</emphasis>. It must be the name of 
            a page defined in the corresponding depend.xml file.</td>
          </tr>
          <tr>
            <td><literal>nostore</literal></td>
            <td>Optional. If given, and set to <literal>true</literal> 
            makes the page a so called sidestep page. This has the 
            consequence that the resulting DOM tree is not stored in 
            the session (so no frames are possible!) and that the 
            status of the <classname>Context</classname> object 
            (current page, current pageflow) isn't changed. The use of 
            this feature is to allow for pages to act as e.g. CSS or 
            JavaScript without disturbing the flow of the main pages. 
            See also the section about properties below.</td>
          </tr>
          <tr>
            <td><literal>copyfrom</literal></td>
            <td>Optional. If given, and set to the name of a valid 
            <tag>pagerequest</tag>, all configuration from this 
            referenced <tag>pagerequest</tag> are used for the current 
            page, disregarding all configuration that is made in this 
            <tag>pagerequest</tag>. It's a plain and simple copy, no 
            extending, no restricting!</td>
          </tr>
        </tbody>
      </table>
      <programlisting language="xml"><![CDATA[
    <ssl force="true|false"/>
      ]]></programlisting>
      The node is optional. If given, and the attribute 
      <tag class="attribute">force</tag> is set to 
      <literal>true</literal>, the page will only run under SSL when 
      jumped to via a link or a submit of form data. If the session 
      currently does not run under SSL, the system will make sure to 
      redirect to a secure session prior to handling the request. 
      After a session is running under SSL, there is no way back 
      (so all other pages will run securely regardless if they have 
      a <tag>ssl</tag> node or not).
      You can wrap this tag within a customization element to force 
      use of SSL only in certain modes (e.g. <literal>prod</literal> 
      mode).
      <note>
        <para>You can force the servlet as a whole to run only under 
        SSL by specifying the ssl subnode of the servletinfo 
        node.</para>
      </note>
      <programlisting language="xml"><![CDATA[
<state class="AClassName"/>
      ]]></programlisting>
      The whole node is optional. If given, the 
      <tag class="attribute">class</tag> attribute must  be the name 
      of a java class implementing the 
      <classname>de.schlund.pfixcore.workflow.State</classname> 
      interface. The used <classname>State</classname> is determined 
      as follows:
      <orderedlist>
        <listitem>
          <para>If state is given, use the value of it's 
          <tag class="attribute">class</tag> attribute. Else:</para>
        </listitem>
        <listitem>
          <para>If the <tag>pagerequest</tag> has a <tag>auth</tag> 
          child, use 
          <classname>de.schlund.pfixcore.workflow.app.DefaultAuthIWrapperState</classname>. 
          Else:</para>
        </listitem>
        <listitem>
          <para>If the pagerequest has an <tag>input</tag> child, use 
          the value of the <tag class="attribute">class</tag> 
          attribute of the <tag>defaultihandlerstate</tag> tag 
          explained above if it is given. If this is not given, just 
          use <classname>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</classname>.
          Else:</para>
        </listitem>
        <listitem>
          <para>use the value of the <tag class="attribute">class</tag> 
          attribute of the <tag>defaultstate</tag> tag explained above 
          if it is given. If this is not given, just use 
          <classname>de.schlund.pfixcore.workflow.app.StaticState</classname>.</para>
        </listitem>
      </orderedlist>
      You can use any BSF-supported scripting language for writing 
      your State-implementation, too. See PustefixScripting for 
      details on how to do this.
      <!-- TODO Add link here -->
      <programlisting language="xml"><![CDATA[
    <finalizer class="AClassName"/>
      ]]></programlisting>
      The whole node is optional. It may only be given for a 
      <classname>State</classname> that is either 
      <classname>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</classname> 
      or a descendent of it.
      The <tag class="attribute">class</tag> attribute is mandatory 
      and denotes a class implementing 
      <classname>de.schlund.pfixcore.workflow.app.ResdocFinalizer</classname>.
      <caution>
        <para>
          The use of finalizers is not suggested most of the time! 
          They can completely change the result document and the logic 
          when to trigger the next step in the current page flow. Use 
          them at your own risk. Or better: Don't use them at all.
        </para>
      </caution>
      <programlisting language="xml"><![CDATA[
    <input policy="ANY|ALL|NONE">
      ]]></programlisting>
      The whole node is optional. It may only be given for a 
      <classname>State</classname> that is either 
      <classname>de.schlund.pfixcore.workflow.app.DefaultIWrapperState</classname> 
      or a descendent of it!
      <tag class="attribute">policy</tag> is optional (default is 
      <literal>ANY</literal>). The policy decides when a whole page is 
      considered to be accessible:
      <itemizedlist>
        <listitem>
          <para>ANY: just one of the associated handlers needs to be 
          active for the page to be accessible.</para>
        </listitem>
        <listitem>
          <para> ALL: all the associated handlers must be active for 
          the page to be accessible.</para>
        </listitem>
        <listitem>
          <para> NONE: none of the associated handlers needs to be 
          active for the page to be accessible.</para>
        </listitem>
      </itemizedlist>
      If one of the associated handlers returns 
      <literal>false</literal> on calling 
      <methodname>prerequisitesMet()</methodname>, the page is of 
      course still inaccessible.
      <programlisting language="xml"><![CDATA[
      <interface prefix="AName" class="AClassName" activeignore="true|false" continue="true|false" alwaysretrieve="true|false"/>
      ]]></programlisting>
      There can be many <tag>interface</tag> nodes for a page. Each 
      one references an "atomic" functional entity consisting of an 
      <classname>IWrapper</classname> java class (usually 
      autogenerated from a <literal>.iwrp</literal> xml file, see 
      here) that defines the type and names of the parameters passed 
      between the UI and the functional entity and an associated 
      <classname>IHandler</classname> java class that uses the 
      <classname>IWrapper</classname> to retrieve the passed 
      parameters via typed getter methods.
      <!-- TODO Add link here -->
      <table rules="all" frame="box">
        <caption>Input attributes</caption>
        <thead align="left">
          <tr>
            <th>Attribute</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>prefix</literal></td>
            <td><emphasis>Mandatory</emphasis>. The prefix defines a 
            name for the <classname>IWrapper</classname> and in effect 
            a namespace for the <classname>IWrapper</classname>'s 
            parameters. If the prefix "<literal>bar</literal>" is 
            defined for an <classname>IWrapper</classname> that 
            contains a parameter called "<literal>Foo</literal>", the 
            submitted HTTP parameter must be called 
            <literal>bar.Foo</literal>.</td>
          </tr>
          <tr>
            <td><literal>class</literal></td>
            <td><emphasis>Mandatory</emphasis>. Must be the name of a 
            java class implementing 
            <classname>de.schlund.pfixcore.generator.IWrapper</classname>. 
            This implicitly defines a 
            <classname>de.schlund.pfixcore.generator.IHandler</classname>, 
            as every <classname>IWrapper</classname> knows it's 
            associated <classname>IHandler</classname> and can be 
            queried for it.</td>
          </tr>
          <tr>
            <td><literal>continue</literal></td>
            <td>Optional, defaults to <literal>false</literal>.
            If the user submits data usually all defined handlers are 
            called. If the submit doesn't result in errors, the usual 
            action is that the context will switch to the next page 
            according to the current pageflow.
            This is different when the submit is restricted to a 
            subset of one ore more of the page's defined handlers. The 
            usual action in this case is to stay on the page no matter 
            if the data submit was successful (no errors happened) or 
            not. <emphasis>BUT:</emphasis> if <emphasis>ALL</emphasis> 
            of the handlers the submit was restricted to have the 
            attribute <tag class="attribute">continue</tag> set to 
            <literal>true</literal>, the context again will switch to 
            the next page.</td>
          </tr>
          <tr>
            <td><literal>activeignore</literal></td>
            <td>Optional, default is <literal>false</literal>. The 
            <classname>IHandler</classname> method 
            <methodname>isActive()</methodname> is 
            <emphasis>NOT</emphasis> called on handlers with 
            <tag class="attribute">activeignore</tag> set to 
            <literal>true</literal>. In other words: the handler is 
            ignored when the system tries to find out if the page is 
            accessible or not. See also the comment for the 
            <tag class="attribute">policy</tag> attribute above.</td>
          </tr>
          <tr>
            <td><literal>alwaysretrieve</literal></td>
            <td>Optional, default is <literal>false</literal>. This 
            attribute changes the way the not selected 
            <classname>IHandlers</classname> of a page are treated 
            when the system decides that it should stay on the page 
            after a submit has been handled without an error.
            The default behaviour is to only call 
            <methodname>retrieveCurrentStatus()</methodname> on those 
            <classname>IHandler</classname>s that are in the set of 
            selected (via the <literal>SELWRP</literal> command) 
            <classname>IHandler</classname>s. For the remaining 
            <classname>IHandler</classname>s, only the (ignored) input 
            is copied back verbatim so the net effect is that all 
            associated form elements stay the same as they were before 
            the submit.
            By setting <tag class="attribute">alwaysretrieve</tag> to 
            <literal>true</literal> the 
            <methodname>retrieveCurrentStatus()</methodname> method of 
            this <classname>IHandler</classname> is also called in the 
            described situation. You need this if a submit handled in 
            one or more <classname>IHandler</classname>(s) should 
            change the filled-in form values of another, not currently 
            selected <classname>IHandler</classname>. </td>
          </tr>
        </tbody>
      </table>
      <programlisting language="xml"><![CDATA[
    </input>
      ]]></programlisting>
      <caution>
        <para>
          Only one of <tag>input</tag> or <tag>auth</tag> may be 
          given as a child node!
        </para>
      </caution>
      <programlisting language="xml"><![CDATA[
    <auth>
      ]]></programlisting>
      The whole node is optional. It may only be given for a page 
      using a <classname>State</classname> that is either 
      <classname>de.schlund.pfixcore.workflow.app.DefaultAuthIWrapperState</classname> 
      or a descendent of it!
      There may be only one pagerequest using such a 
      <classname>State</classname>, it must be the one that is also 
      referred to via the <tag class="attribute">authpage</tag> 
      attribute of the <tag>context</tag> node above. Other 
      <tag>pagerequest</tag> nodes must not have this subnode!
      <programlisting language="xml"><![CDATA[
      <authinterface prefix="AName" class="AClassName"/>
      <auxinterface prefix="AName" class="AClassName"/>
      ]]></programlisting>
      One and only one <tag>authinterface</tag> node must be given. 
      <tag>auxinterface</tag> nodes are optional and can be given 
      multiple times.
      The <tag class="attribute">prefix</tag> and 
      <tag class="attribute">class</tag> attributes are mandatory for 
      both nodes. The meaning is the same as for the 
      <tag>interface</tag> subnodes of the <tag>ihandler</tag> node.
      The <tag>authinterface</tag> node denotes the one 
      <classname>IWrapper</classname>/<classname>IHandler</classname> 
      combo that is responsible for checking the authentification of a 
      user session. The <tag>auxinterface</tag> nodes denote 
      additional <classname>IWrapper</classname>s/<classname>IHandler</classname>s 
      that are called after the authentification handler if the 
      authorization is granted.
      Note that no error handling whatsoever takes place for 
      <tag>auxinterface</tag> <classname>IHandler</classname>s.
      <programlisting language="xml"><![CDATA[
    </auth>
    
    <output>
      ]]></programlisting>
      The whole node is optional. Every page using a 
      <classname>State</classname> that is itself or a descendant of 
      <classname>de.schlund.pfixcore.workflow.app.StaticState</classname> 
      can use this.
      You can have as many <tag>resource</tag> childnodes as you like.
      <programlisting language="xml"><![CDATA[
      <resource node="AName" class="AClassName"/>
      ]]></programlisting>
      <table rules="all" frame="box">
        <caption>Resource attributes</caption>
        <thead align="left">
          <tr>
            <th>Attribute</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>class</literal></td>
            <td><emphasis>Mandatory</emphasis>. 
            <tag class="attribute">class</tag> is one of the 
            <classname>ContextResources</classname> defined via 
            implements above.</td>
          </tr>
          <tr>
            <td><literal>node</literal></td>
            <td><emphasis>Mandatory</emphasis>. 
            <tag class="attribute">node</tag> is the node in the 
            output tree ("<literal>/formresult/AName</literal>") under 
            which the <classname>ContextResource</classname> inserts 
            it's data.</td>
          </tr>
        </tbody>
      </table>
      <programlisting language="xml"><![CDATA[
    </output>
    
    <properties>
      ]]></programlisting>
      The whole node is optional.
      <programlisting language="xml"><![CDATA[
      <prop name="APropertyKey">AValue</prop>
      ]]></programlisting>
      The node is mandatory and can be used multiple times. It will be 
      transformed into a java property that is associated to the page.
      There are some props that are already defined for 
      <classname>de.schlund.pfixcore.workflow.app.StaticState</classname> 
      and descendants. These are listed below
      <table rules="all" frame="box">
        <caption>Properties</caption>
        <thead align="left">
          <tr>
            <th>Property Name</th>
            <th>Property Value</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>mimetype</literal></td>
            <td>e.g. <literal>text/css</literal></td>
            <td> If given, sets the mimetype of the HttpResponse 
            object to something else than the default 
            <literal>text/html</literal>. This is most often used for 
            <literal>text/css</literal>.</td>
          </tr>
          <tr>
            <td><literal>responseheader.A_HEADER</literal></td>
            <td><literal>A_VALUE</literal></td>
            <td>If given, set the header <literal>A_HEADER</literal> 
            of the HttpResponse object to <literal>A_VALUE</literal>.
            NOTE: the Pustefix system uses a set of default headers 
            that are only used, when no user defined headers are 
            given! The set of default headers is:
            <code>Expires=Mon, 26 Jul 1997 05:00:00 GMT
Cache-Control=private</code>
            If you want to use some of them in addition to your own 
            headers, you must manually supply them, too. </td>
          </tr>
        </tbody>
      </table>
      <programlisting language="xml"><![CDATA[
    </properties>
  </pagerequest>
  
  <config-include file="myproject/conf/myfile.xml" section="pagerequests"/>
      ]]></programlisting>
      Includes a part of a config-fragments at this location.
      <!-- TODO Add link here -->
      <table rules="all" frame="box">
        <caption>Config include attributes</caption>
        <thead align="left">
          <tr>
            <th>Attribute</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>file</literal></td>
            <td><emphasis>Mandatory</emphasis>. Path to the file that 
            contains the tags to be included (relative to docroot). </td>
          </tr>
          <tr>
            <td><literal>section</literal></td>
            <td><emphasis>Optional</emphasis>. 
            Type of the section that shall be included. If more than 
            one section of the specified type exists in the file, the 
            content of all this sections is included.</td>
          </tr>
          <tr>
            <td><literal>refid</literal></td>
            <td><emphasis>Optional</emphasis>. 
            Include a section identified by the specified id. The 
            refid specified here must match the id attribute of 
            exactly one section in the specified file.</td>
          </tr>
          <tr>
            <td><literal>xpath</literal></td>
            <td><emphasis>Optional</emphasis>. 
            A XPath expression specifying the node-set to be included. 
            The prefixes to be used for XML namespaces are "fr" for 
            the namespace of the fragments file tags and "pr" for the 
            namespace of the ContextXMLServer configuration tags.</td>
            <!-- TODO Add link to fragments format -->
          </tr>
        </tbody>
      </table>
      <emphasis>One and only one</emphasis> of the section, refid or 
      xpath attribute has to be specified for each config-include.
      <programlisting language="xml"><![CDATA[
  <properties>
    <prop name="AProperty">AValue</prop>
      ]]></programlisting>
      <table rules="all" frame="box">
        <caption>Properties</caption>
        <thead align="left">
          <tr>
            <th>Property Name</th>
            <th>Property Value</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>mimetype</literal></td>
            <td>e.g. <literal>text/css</literal></td>
            <td> If given, sets the mimetype of the HttpResponse 
            object to something else than the default 
            <literal>text/html</literal>. This is most often used for 
            <literal>text/css</literal>.</td>
          </tr>
          <tr>
            <td><literal>responseheader.A_HEADER</literal></td>
            <td><literal>A_VALUE</literal></td>
            <td>If given, set the header <literal>A_HEADER</literal> 
            of the HttpResponse object to <literal>A_VALUE</literal>.
            Headers set here can be overwritten for specific pages.
            NOTE: the Pustefix system uses a set of default headers 
            that are only used, when no user defined headers are 
            given! The set of default headers is:
            <code>Expires=Mon, 26 Jul 1997 05:00:00 GMT
Cache-Control=private</code>
            If you want to use some of them in addition to your own 
            headers, you must manually supply them, too. </td>
          </tr>
        </tbody>
      </table>
       You can also specify properties here that are understood by the 
       ServletManager class.
       <!-- TODO Add link to ServletManager description -->
      <programlisting language="xml"><![CDATA[
  </properties>
</contextxmlserver>
      ]]></programlisting>
    </para>
  </section>
  
  <section xml:id="configuration.directoutputservlet">
    <title>DirectOutputServlet</title>
    <para>
      Occasionally you don't want to generate output with an XSLT 
      Transformation, but e.g. deliver binary content directly to the 
      output stream instead. In this case you need to provide another 
      servlet of type 
      <classname>de.schlund.pfixxml.DirectOutputServlet</classname>. 
      This servlet doesn't have it's own <classname>Context</classname> 
      object but instead "hijacks" the <classname>Context</classname> 
      of a foreign 
      <classname>de.schlund.pfixxml.ContextXMLServlet</classname>. The 
      context isn't used for any pageflow handling, only as a means to 
      get to the data (via its <classname>ContextResource</classname>s) 
      of the "main" application.
    </para>
    <para>
      The servlet knows about one or many 
      <literal>directoutputpagerequests</literal>. For the XML/XSLT 
      side of things, they look like normal pages (in fact, the value 
      of the <literal>directoutputpagerequest</literal>'s name 
      attribute must be a page defined in 
      <filename>depened.xml</filename>. Of course, no target 
      definition has to be given, only the page in the navigation 
      structure must exist). But other than the usual 
      <literal>pagerequest</literal>, a 
      <literal>directoutputpagerequest</literal> has an associated 
      <literal>directoutputstate</literal> whose class attribute is a 
      java class implementing 
      <classname>de.schlund.pfixcore.workflow.app.DirectOutputState</classname>.
    </para>
    <para>
      <programlisting language="xml"><![CDATA[
<directoutputserver version="1.0"
  xmlns="http://pustefix.sourceforge.net/2004/properties"
  xmlns:cus="http://www.schlund.de/pustefix/customize"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pustefix.sourceforge.net/2004/properties http://pustefix.sourceforge.net/2004/properties.xsd">
  
  <directoutputservletinfo depend="MyProject/conf/depend.xml" name="AUniqueNameForTheServlet">
    <ssl force="true|false"/>
    <editmode allow="true|false"/>
      ]]></programlisting>
       See the comment for the <tag>servletinfo</tag> node in
       <xref linkend="configuration.contextxmlservlet"/>.
       <programlisting language="xml"><![CDATA[
  </directoutputservletinfo>
  
  <foreigncontext externalservletname="UniqueNameOfAnotherServlet" synchronized="true"/>
       ]]></programlisting>
       The <tag class="attribute">externalservletname</tag> must 
       reference the name of a servlet of type 
       <classname>de.schlund.pfixxml.ContextXMLServlet</classname>. 
       The <classname>Context</classname> (or better: the 
       <classname>ContextResourceManager</classname>) of this servlet 
       is used for getting stored application data.
       Additionally, if the <classname>ContextXMLServlet</classname> 
       requires authentication, it's authentication page is checked 
       before any <classname>DirectOutputState</classname> is called.
       The <tag class="attribute">synchronized</tag> attribute is 
       optional. It defaults to <literal>true</literal>. If set to 
       <literal>true</literal>, only one request per session is 
       handled concurrently. If set to <literal>false</literal> all 
       requests will be handled concurrently, requiring thread-safe 
       business logic.
       <programlisting language="xml"><![CDATA[
  <config-include file="myproject/conf/myfile.xml" section="directoutputpagerequests"/>
       ]]></programlisting>
      Includes a part of a config-fragments at this location.
      <!-- TODO Add link here -->
      <table rules="all" frame="box">
        <caption>Config include attributes</caption>
        <thead align="left">
          <tr>
            <th>Attribute</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><literal>file</literal></td>
            <td><emphasis>Mandatory</emphasis>. Path to the file that 
            contains the tags to be included (relative to docroot). </td>
          </tr>
          <tr>
            <td><literal>section</literal></td>
            <td><emphasis>Optional</emphasis>. 
            Type of the section that shall be included. If more than 
            one section of the specified type exists in the file, the 
            content of all this sections is included. For a 
            <classname>DirectOutputServlet</classname> configuration
            only <literal>directouputpagerequests</literal> and 
            <literal>properties</literal> are valid.</td>
          </tr>
          <tr>
            <td><literal>refid</literal></td>
            <td><emphasis>Optional</emphasis>. 
            Include a section identified by the specified id. The 
            refid specified here must match the id attribute of 
            exactly one section in the specified file.</td>
          </tr>
          <tr>
            <td><literal>xpath</literal></td>
            <td><emphasis>Optional</emphasis>. 
            A XPath expression specifying the node-set to be included. 
            The prefixes to be used for XML namespaces are "fr" for 
            the namespace of the fragments file tags and "pr" for the 
            namespace of the <classname>DirectOutputServlet</classname> 
            configuration tags.</td>
            <!-- TODO Add link to fragments format -->
          </tr>
        </tbody>
      </table>
      <emphasis>One and only one</emphasis> of the section, refid or 
      xpath attribute has to be specified for each config-include.
      <programlisting language="xml"><![CDATA[
  <directoutputpagerequest name="APageName">
    <directoutputstate class="AClassName"/>
    <properties>
      ]]></programlisting>
      The whole <tag>properties</tag> node is optional.
      <programlisting language="xml"><![CDATA[
      <prop name="APropertyKey">AValue</prop>
      ]]></programlisting>
      The node is mandatory and can be used multiple times. It will be 
      transformed into a java property that is associated to the page. 
      The java property that is constructed will look like this: 
      <literal>pagerequest.APpageName.APropertyKey=AValue</literal> 
      where <literal>APageName</literal> is the value of the 
      <tag class="attribute">name</tag> attribute.
      <programlisting language="xml"><![CDATA[
    </properties>
  </directoutputpagerequest>
</directoutputserver>
      ]]></programlisting>
    </para>
  </section>
  
</chapter>
