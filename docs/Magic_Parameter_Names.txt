

UPDATE: This document is outdated. It no longer describes correctly
the way the submitted data or commands are encoded (jtl, may
2004). The general idea of parameters and commands being associated to 
a special submit button still holds, though.

--------------------------------------------------------------------





Magic parameter names in Pfixcore                                (author: jtl)
=================================

CAUTION: This information presented here should be still
         acurate, but nevertheless should the normal user almost never be
         exposed to this low level stuff. Links and submit buttons are
         treated in a way that both can have arguments and commands
         attached to them. How these will be encoded is up to the core
         stylesheets. E.g. Normal code will look like the following:

               <pfx:button page="foo">
                 <pfx:argument name="param_a">value_a</pfx:argument>
                 <pfx:argument name="param_b">value_b</pfx:argument>
                 ...
                 <pfx:command name="SELWRP">name_of_interface</pfx:command>
                 ...
                 A Text that should be used as the link
               </pfx:button>

         Exactly the same form works for <pfx:xinp type="submit"> in place
         of <pfx:button> (of course most of the time, you don't need
         to encode parameters into submit buttons, that's what
         forms/hidden parameters are for).

         So, read this documentation to learn about the way the stuff works 
         (and about the available commands), but remember that you can use
         them in a much nicer way.
        

Magic parameter names are parameters that carry information via their name and
not their value. They do this by following a special convention to encode the 
data in their name.

There are two kinds of magic parameter names, DATA and CMD (commands).

1) DATA 
=======

The first one is very easy to understand.  Instead of submitting data
via a form element or a hidden parameter which results in having named
parameter/value pairs, the data is encoded in the parameter name
itself, without any need for a value.

This helps in the frequent situation where one want's to have a submit
button transmit special data that is only send when this (and no
other) submit button is pressed. You can't do this with a hidden parameter, as
this will be submitted by every submit button that's defined in the form.

Using a magic parameter name that task becomes easy. Say you have a
"Delete" button, which -- when pressed -- should submit all the form
values PLUS a parameter "info.delete" set to "true".

You do this by using this piece of code:

    <input type="submit" name="__DATA:info.delete:true:"/>

Note the trailing ":", this is mandatory. 

You can even add more DATA, like here:

    <input type="submit" name="__DATA:info.delete:true:__DATA:info.foo:bar:"/>

Or you may want to transmit an array of values:

    <input type="submit" name="__DATA:info.foo:1:__DATA:info.foo:2:"/>

Of course we assume, for all these examples that there is a IWrapper
interface defined and aliased with "info" that knows how to handle
these parameters --- it's completely transparent for the IWrapper if
you use a normal name/value pair or magic parameter names. Note
however that you can not mix the two possibilities.  If a normal
name/value pair is found with the matching name, all possibly
submitted magic parameter names will be ignored.


2) CMD
======

Commands are a different beast. They are used internally for certain
flowcontrol jobs, and it's not possible for the user to define new
commands. All commands are defined and used in the
IWrapperSimpleContainer (If you use a different instance of an
IWrapperContainer, all this does not apply to you).  In fact, there are
only 4 of them and all will be explained here in detail.

All commands alter the way a data submit is handled by the
IWrapperSimpleContainer class.

All commands follow the general form:

    __CMD[<pagename>]:<cmd>:<arg>:
        
where <pagename> is the pagename the command is used on (== the result
of a call to getName() on the current PageRequest)

The first 3 commands are used when switching between groups of wrappers.
Let's assume for this example that we are on a page called "home".

    __CMD[home]:SELGRP:NEXT:
    __CMD[home]:SELGRP:PREV:

These two commands with well known args switch to the next
resp. previous group after the submit is handled, with the effect that
a following call to "insertCurrentStatus" will display the contents of
the handlers which are located on the next resp. previous group.

    __CMD[home]:SELGRP:<index>:

if the argument <index> is an integer it is interpreted as an absolut group
index: The current group will be switched to the given index after the
submit is handled.

NOTE: there is another important thing needed for groups and group
switching to work: A parameter named 

    __currentindex[<pagename>] 

holds the index of the group that is to be displayed. This parameter
is used internally before the submit is handled. It will normally be
submitted automatically by means of a hidden parameter.

You can also use this parameter to switch to another group _without_
doing a submit: just call the page with the parameter set to some
defined index. The State will notice that the request is what we call a
"direct trigger", that means you don't want to submit data, just call
the page with the current status displayed.

The value of the parameter __currentindex[<pagename>] will then be
used to determine the group that's about to be used.

The last command is used to express that only some of the currently
active IWrappers (that means: all IWrappers with active IHandlers on
the current group) should be used when submitting data and doing error
handling. All other active IWrappers will just copy the input data
through, without any further work.

    __CMD[<pagename>]:SELWRP:<wrapper given by its prefix>:

E.g. __CMD[home]:SELWRP:info:, if used as part of the name of a submit
button on the page "home", will use only the IWrapper referred to by
means of the prefix "info". 

Again, as with the DATA parameter names, you can repeatedly use this command 
in one parameter name, E.g. __CMD[home]:SELWRP:info:__CMD[home]:SELWRP:test:
will use the IWrappers "info" and "test" for submitting and error handling.

NOTE: it makes no sense to use two different pages in the case of
multiple SELWRP commands.


