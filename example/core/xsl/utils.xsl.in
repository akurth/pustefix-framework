<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:pfx="http://www.schlund.de/pustefix/core"
                xmlns:ixsl="http://www.w3.org/1999/XSL/TransformOutputAlias"
                xmlns:cus="http://www.schlund.de/pustefix/customize">

  <xsl:template match="pfx:on">
    <cus:documentation>
       <description>Always a child of pfx:layer_check (see there)</description>
    </cus:documentation>
  </xsl:template>
  
  <xsl:template match="pfx:off">
    <cus:documentation>
       <description>Always a child of pfx:layer_check (see there)</description>
    </cus:documentation>
  </xsl:template>

  
  <xsl:template match="pfx:maincontent">
   <cus:documentation>
     <responsible>JTL</responsible>
     <description></description>
      <param required="0">
        <name>path</name>
        <values><path default="PRODUCTNAME/txt/pages"/></values>
        <description>Path, where the pages are (e.g. productname/txt/pages)
          <xmlcode><table><tr><td>Hallo</td></tr></table>
          </xmlcode>
        </description>
      </param>

      <param required="0">
        <name>prefix</name>
        <values><string default="main_"/></values>
        <description>Value of the Prefix.</description>
      </param>

      <param required="0">
        <name>postfix</name>
        <values><string default=".xml"/></values>
        <description>Value of the Postfix.</description>
      </param>

      <param required="0">
        <name>part</name>
        <values><string/></values>
        <description>The name of the part to include.</description>
      </param>      

      <example>
        <input>
          <xmlcode><pfx:maincontent path="sample1/txt/pages" prefix="main_" part="content"/></xmlcode>
        </input>
        <output>
        </output>
      </example>
    </cus:documentation>
          
    <xsl:variable name="path">
      <xsl:choose>
        <xsl:when test="@path">
          <xsl:value-of select="@path"/>
        </xsl:when>
        <xsl:otherwise><xsl:value-of select="$product"/>/txt/pages</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="prefix">
      <xsl:choose>
        <xsl:when test="@prefix">
          <xsl:value-of select="@prefix"/>
        </xsl:when>
        <xsl:otherwise>main_</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="postfix">
      <xsl:choose>
        <xsl:when test="@postfix">
          <xsl:value-of select="@postfix"/>
        </xsl:when>
        <xsl:otherwise>.xml</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="part">
      <xsl:choose>
        <xsl:when test="@part">
          <xsl:value-of select="@part"/>
        </xsl:when>
        <xsl:otherwise>content</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:call-template name="pfx:include">
      <xsl:with-param name="href"><xsl:value-of select="$path"/>/<xsl:value-of select="$prefix"/><xsl:value-of select="$page"/><xsl:value-of select="$postfix"/></xsl:with-param>
      <xsl:with-param name="part" select="$part"/>
      <!-- this is tricky to understand --> 
      <xsl:with-param name="parent_path"></xsl:with-param>
      <xsl:with-param name="parent_part"></xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template match="pfx:progressbar">
  <cus:documentation>
    <responsible>JTL</responsible>
     <description>Should open a Progressbar, but doesn't work at the moment on different browsers</description>
      
      <example>
        <input>
          <xmlcode><pfx:progressbar/></xmlcode>
        </input>
        <output>
          <xmlcode></xmlcode>
        </output>
      </example>
   
    </cus:documentation>

    <div id="core_progress_back"></div>
    <div id="core_progress_wait">
      <center><span align="center" id="core_progress_waittext"><xsl:apply-templates/></span></center>
      <div id="core_progress_frame">
        <div id="core_progress_bar">
        </div>
      </div>
    </div>
  </xsl:template>
  
  <xsl:template match="pfx:blank">
   <cus:documentation>
     <description>Inserts a transparent .gif of the specified width and height (default  width=1 height=1)</description>
      <param required="0">
        <name>src</name>
        <values><path default="/core/img/blank.gif"/></values>
        <description>The Path to the Image. You can also use another Image <xmlcode width="120"><pfx:blank/></xmlcode></description>
      </param>
      <param required="0">
        <name>width</name>
        <values><html default="1"/></values>
        <description>Width of the Image</description>
      </param>
      <param required="0">
        <name>height</name>
        <values><html default="1"/></values>
        <description>Height of the image</description>
      </param>
      <param required="0">
        <name>border</name>
        <values><html default="0"/></values>
        <description>Border</description>
      </param>

      <example>
        <input>
          <xmlcode><pfx:blank width="10"/></xmlcode>
        </input>
        <output>
          <xmlcode><img src="/core/img/blank.gif" width="10" height="1" border="0" alt=""/></xmlcode>
        </output>
      </example>

      <example>
        <input>
          <xmlcode><pfx:blank width="10"/></xmlcode>
        </input>
        <output>
          <xmlcode><img src="/core/img/blank.gif" width="10" height="1" border="0" alt=""/></xmlcode>
        </output>
      </example> 
      
    </cus:documentation>
    <img src="/core/img/blank.gif" width="1" height="1" border="0" alt="">
      <xsl:copy-of select="@*"/>
    </img>
  </xsl:template>

  <xsl:template match="pfx:layer">
    <cus:documentation>
     <responsible>JTL</responsible>
     <description>Creates a layer object which can be shown/hidden and moved on demand.</description>
      <param required="1">
        <name>name</name>
        <values><string/></values>
        <description>id of this layer object</description>
      </param>

      <param required="0">
        <name>element</name>
        <values><oneof><option default="true">div</option><option>span</option><option>tr</option><option>table</option></oneof></values>
        <description>The html element that is used as the container for the layer content</description>
      </param>

      <param required="0">
        <name>pos-left</name>
        <values><html/></values>
        <description>left position</description>
      </param>

      <param required="0">
        <name>pos-right</name>
        <values><html/></values>
        <description>right position</description>
      </param>

      <param required="0">
        <name>pos-top</name>
        <values><html/></values>
        <description>top position</description>
      </param>

      <param required="0">
        <name>pos-bottom</name>
        <values><html/></values>
        <description>bottom  position</description>
      </param>

      <param required="0">
        <name>visible</name>
        <values><oneof><option>true</option><option>false</option></oneof></values>
        <description>Visibility</description>
      </param>

      <param required="0">
        <name>store</name>
        <values><oneof><option default="true">true</option><option>false</option></oneof></values>
        <description>If the status of the layer should be stored over different invocations of the page</description>
      </param>

      <children>
        <name>pfx:switch</name>
        <description>see pfx:switch</description>        
      </children>
    </cus:documentation>
    <xsl:param name="elem"><xsl:choose>
        <xsl:when test="@element"><xsl:value-of select="@element"/></xsl:when>
        <xsl:otherwise>div</xsl:otherwise>
      </xsl:choose></xsl:param>
    <xsl:param name="name" select="concat($page, '_', @name)"/>
    <xsl:element name="{$elem}">
      <xsl:attribute name="id"><xsl:value-of select="$name"/></xsl:attribute>
      <xsl:copy-of select="@style"/>
      <xsl:copy-of select="@class"/>
      <xsl:apply-templates/>
    </xsl:element>
    <script>
      var layer = top.__js_getLayer("<xsl:value-of select="$name"/>");
      layer.init("<xsl:value-of select="@visible"/>",window,"<xsl:value-of select="@store"/>");
      <xsl:if test="@pos-left">
        layer.moveLeft(<xsl:value-of select="@pos-left"/>);
      </xsl:if>
      <xsl:if test="@pos-top">
        layer.moveTop(<xsl:value-of select="@pos-top"/>);
      </xsl:if>
      <xsl:if test="@pos-right">
        layer.moveRight(<xsl:value-of select="@pos-right"/>);
      </xsl:if>
      <xsl:if test="@pos-bottom">
        layer.moveBottom(<xsl:value-of select="@pos-bottom"/>);
      </xsl:if>
    </script>
  </xsl:template>
  
  <xsl:template match="pfx:switch">
    <cus:documentation>
    <responsible>JTL</responsible>
     <description>Creates a "switch" (a link) to show/hide layers (see &lt;pfx:layer&gt;)</description>
      <param required="0">
        <name>class</name>
        <values><string default="core_button_normal"/></values>
        <description>link stylesheet</description>
      </param>

<!--       <param required="0"> -->
<!--         <name>method</name> -->
<!--         <standard>toggle</standard> -->
<!--         <possible_values>on|off|toggle</possible_values> -->
<!--         <description>The method called on the associated layer. "On" -->
<!--         shows the layer, "off" hides it and "toggle" toggles it's state.</description> -->
<!--       </param> -->

      <children>
        <name>pfx:layer_ref</name>
        <description>Can occur multiple times. See &lt;pfx:layer_ref&gt;</description>        
      </children>

      <example>
        <input>
          <xmlcode>
            <pfx:switch>
              <pfx:layer_ref name="C"/>
                 Toggle Layer C
            </pfx:switch>
          </xmlcode>
        </input>
        <output>
          <xmlcode></xmlcode>
        </output>
      </example>
    </cus:documentation>  
    <xsl:param name="class">
      <xsl:choose>
        <xsl:when test="not(@class = '')"><xsl:value-of select="@class"/></xsl:when>
        <xsl:otherwise>core_button_normal</xsl:otherwise>
      </xsl:choose>
    </xsl:param>
    <a class="{$class}" href="javascript://">
      <xsl:attribute name="onclick">top.__js_toggleLayers(<xsl:for-each select=".//pfx:layer_ref[not(@method) or @method = 'toggle']">
          <xsl:text>'</xsl:text><xsl:value-of select="concat($page,'_',@name)"/><xsl:text>'</xsl:text>
          <xsl:if test="count(following-sibling::pfx:layer_ref[not(@method) or @method = 'toggle']) > 0">,</xsl:if>
        </xsl:for-each>);top.__js_showLayers(<xsl:for-each select=".//pfx:layer_ref[@method = 'on']">
          <xsl:text>'</xsl:text><xsl:value-of select="concat($page,'_',@name)"/><xsl:text>'</xsl:text>
          <xsl:if test="count(following-sibling::pfx:layer_ref[@method = 'on']) > 0">,</xsl:if>
        </xsl:for-each>);top.__js_hideLayers(<xsl:for-each select=".//pfx:layer_ref[@method = 'off']">
          <xsl:text>'</xsl:text><xsl:value-of select="concat($page,'_',@name)"/><xsl:text>'</xsl:text>
          <xsl:if test="count(following-sibling::pfx:layer_ref[@method = 'off']) > 0">,</xsl:if>
        </xsl:for-each>);
        return false;</xsl:attribute>      
      <xsl:apply-templates/>
    </a>
  </xsl:template>

  <xsl:template match="pfx:layer_check">
    <cus:documentation>
    <responsible>JTL</responsible>
      <description>Checks the visibility of a sub-layer. </description>
      <param required="0">
        <name>name</name>
        <values><string/></values>
        <description>Name of the sub-layer</description>
      </param>
      
      <parent>
        <name>pfx:switch</name>
      </parent>

      <children>
        <name>pfx:on</name>
        <description>Will displayed, if the sub-layer is visible</description>        
      </children>

      <children>
        <name>pfx:off</name>
        <description>Will displayed, if the sub-layer is invisible</description>        
      </children>

      <example>
        <input>
          <xmlcode>
            <pfx:layer_check name="B">
              <pfx:on>Switch Layer B OFF</pfx:on>
              <pfx:off>Switch Layer B ON</pfx:off>
            </pfx:layer_check>
          </xmlcode>
        </input>
        <output>
          The "user visible part" (there is also some javascript generated):
          <xmlcode>
            <span id="SWITCH_ON_d1e174">
             Swith Layer B OFF
            </span>
            <span id="SWITCH_OFF_d1e174">
              Switch Layer B ON
            </span>
          </xmlcode>
        </output>
      </example>
    </cus:documentation>
    
    <xsl:variable name="name"><xsl:value-of select="concat($page,'_',@name)"/></xsl:variable>
    <xsl:variable name="unique"><xsl:value-of select="generate-id(.)"/></xsl:variable>
    <span>
      <xsl:attribute name="id">SWITCH_ON_<xsl:value-of select="$unique"/></xsl:attribute>
      <xsl:if test="./pfx:on/@class">
        <xsl:attribute name="class"><xsl:value-of select="./pfx:on/@class"/></xsl:attribute>
      </xsl:if>
      <xsl:apply-templates select="./pfx:on/node()"/>
    </span>
    <span>
      <xsl:attribute name="id">SWITCH_OFF_<xsl:value-of select="$unique"/></xsl:attribute>
      <xsl:if test="./pfx:off/@class">
        <xsl:attribute name="class"><xsl:value-of select="./pfx:off/@class"/></xsl:attribute>
      </xsl:if>
      <xsl:apply-templates select="./pfx:off/node()"/>
    </span>
    <script>
      top.__js_getLayer('<xsl:value-of select="$name"/>').addSwitchOn(window.document.getElementById('SWITCH_ON_<xsl:value-of select="$unique"/>'));
      top.__js_getLayer('<xsl:value-of select="$name"/>').addSwitchOff(window.document.getElementById('SWITCH_OFF_<xsl:value-of select="$unique"/>'));
    </script>
  </xsl:template>
  
  <xsl:template match="pfx:layer_ref">
    <cus:documentation>
      <responsible>JTL</responsible>
      <description>Always a child of &lt;pfx:switch&gt;. This selects which layer
        should be toggled by the switch. Multiple
        &lt;pfx:layer_ref&gt; are possible.</description>
      <param required="1">
        <name>name</name>
        <values><string/></values>
        <description>This must be a layer defined via &lt;pfx:layer&gt;. </description>
      </param>
      <param required="0">
        <name>method</name>
        <values><oneof><option>on</option><option>off</option><option default="true">toggle</option></oneof></values>
        <description>The method called on the associated layer. "On"
        shows the layer, "off" hides it. Don't specifying the
        attribute or giving it the value "toggle" toggles the layer's state.</description>
      </param>
    </cus:documentation>
    <xsl:param name="parent">
      <xsl:choose>
        <xsl:when test="count(ancestor::pfx:layer) > 0">
          <xsl:value-of select="concat($page, '_', ancestor::pfx:layer[position() = 1]/@name)"/>
        </xsl:when>
        <xsl:otherwise>__ROOT_LAYER__</xsl:otherwise>
      </xsl:choose>
    </xsl:param>
    <xsl:param name="child" select="concat($page, '_', @name)"/>
    <script>
      top.__js_getLayer('<xsl:value-of select="$parent"/>').addChild(top.__js_getLayer('<xsl:value-of select="$child"/>'));
      top.__js_getLayer('<xsl:value-of select="$child"/>').addParent(top.__js_getLayer('<xsl:value-of select="$parent"/>'));
    </script>
  </xsl:template>
    
</xsl:stylesheet>

<!--
Local Variables:
mode: xml
End:
-->
