<?xml version="1.0"?>
<chapter xml:id="ajax" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0CR7/xsd/docbook.xsd">
  <title>AJAX</title>

  <qandaset>
    <qandaentry xml:id="ajax.soaptojson">
      <question>
        <para>
          How do I switch my webservice from the SOAP to the JSON protocol?
        </para>
      </question>
      <answer>
        <para>
          You just have to exchange some Javascript libraries. The stub implementations are compatible, so you don't have to
          modify your Javascript code.
        </para>
        <para>
          Replace the SOAP libraries
        </para>
        <programlisting language="xml"><![CDATA[<script type="text/javascript" src="/core/script/xmlRequest.js"></script>
<script type="text/javascript" src="/core/script/webservice.js"></script>
<script type="text/javascript" src="/xml/wsscript/MyService.js"></script>]]></programlisting>
        <para>
          by the according JSON libraries (the build-time generated stub is replaced by its dynamic counterpart using the
          <literal>pfx:wsscript</literal> tag)
        </para>
        <programlisting language="xml"><![CDATA[<script type="text/javascript" src="/core/script/httpRequest.js"></script>
<script type="text/javascript" src="/core/script/webservice_json.js"></script>
<pfx:wsscript name="MyService"/>]]></programlisting>
      </answer>
    </qandaentry>
    <qandaentry xml:id="ajax.async">
      <question>
        <para>
          How to make a asynchronous webservice call?
        </para>
      </question>
      <answer>
        <para>
          Simply add, as an additional parameter, a function reference to the call of the appropriate webservice-object's method call:
        </para>
        <programlisting>webserviceObject.getRemoteSearchResult(queryString, callbackFunction);</programlisting>
        <para>
          Or create the webservice with an object reference as argument (whose methods will be called back automatically):
        </para>
        <programlisting>var search={
   getRemoteSearchResult: function(result,requestid,exception) {
      ...
   }
}
var service=new WS_SearchService(search);
service.getRemoteSearchResult(queryString);</programlisting>
      </answer>
    </qandaentry>

    <qandaentry xml:id="ajax.requestid">
      <question>
        <para>
          For what is requestID parameter in async-callback functions?
        </para>
      </question>
      <answer>
        <para>
          While synchronous calls are blocking and only can be made sequentially, asynchronous calls can be made simultaneously
          and they can return in undetermined order. Using a requestID the application can control or manage the order of the
          returning calls.
        </para>
      </answer>
    </qandaentry>

    <qandaentry xml:id="ajax.sessiontypes">
      <question>
        <para>
          What are the different session types for in webservices.conf.xml?
        </para>
      </question>
      <answer>
        <para>
          The session type <literal>servlet</literal> indicates that the service request needs a valid Pustefix/HTTP session
          (webservices which need to access ContextResources have to be of this type). Type <literal>none</literal> indicates that the service
          needs no session.
        </para>
      </answer>
    </qandaentry>

    <qandaentry xml:id="ajax.context">
      <question>
        <para>
          How do I get access to the Context or Context Resources inside a webservice implementation?
        </para>
      </question>
      <answer>
        <para>
          A webservice gets access to the <classname>Context</classname> or <classname>ContextResources</classname> by deriving from
          <classname>de.schlund.pfixcore.webservice.AbstractService</classname> and thus inheriting its access methods
          <function>getContext()</function> and <function>getContextResource()</function>.
        </para>
      </answer>
    </qandaentry>

    <qandaentry xml:id="ajax.libs">
      <question>
        <para>
          Which libraries have to be added?
        </para>
      </question>
      <answer>
        <para>
          None. All necessary libraries come bundled with Pustefix.
        </para>
      </answer>
    </qandaentry>

    <qandaentry xml:id="ajax.multistubs">
      <question>
        <para>
          How to load multiple generated JSON stubs in a single file, within a single request?
        </para>
      </question>
      <answer>
        <para>
          Using <literal>pfx:wsscript</literal> you can request multiple stubs by specifying the servicenames as a whitespace-separated list.
        </para>
        <programlisting language="xml"><![CDATA[<pfx:wsscript name="service1 service2 service3"/>]]></programlisting>
        <warning>
          <title>Be careful with the SOAP client</title>
          <para>
            Never include the SOAP implementation code twice on a page! leads to strange "serializer not found exception"
          </para>
        </warning>
      </answer>
    </qandaentry>
  </qandaset>

</chapter>