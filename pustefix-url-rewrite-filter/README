The URL Rewrite Filter can be used in two ways:

In a standard JEE servlet environment you can use the filter 
org.pustefixframework.util.urlrewrite.filter.UrlRewriteFilter.
Use the "configFile" init parameter to specify the path to the configuration 
file.

Example:
<filter>
  <filter-name>URL Rewrite Filter</filter-name>
  <filter-class>org.pustefixframework.util.urlrewrite.filter.UrlRewriteFilter</filter-class>
  <init-param>
    <description>Path to the configuration file</description>
    <param-name>configFile</param-name>
    <param-value>/WEB-INF/url-rewrite.properties</param-value>
  </init-param>
</filter>

In a Pustefix 1.0.2+ environment, you can use the 
org.pustefixframework.util.urlrewrite.UrlRewriteHttpRequestFilter.
You have to create an instance of this filter within your application's
ApplicationContext by specifying the configuration in the "spring.xml" 
configuration file.  

Example:
<bean id="url-rewrite-filter" class="org.pustefixframework.util.urlrewrite.filter.UrlRewriteHttpRequestFilter">
  <property name="configFile" value="osgibundle:/META-INF/url-rewrite.properties" />
</bean>

The format of the property files is the same in both cases: Original page names 
are used as keys and their translations are used as values.

For example, if you have an application with the pages "login", "logout" and 
"preferences", the configuration file, which translates this page names into 
German might look like this:
/login: /anmelden
/logout: /abmelden
/preferences: /einstellungen

You should prefix the names with a slash, in order to avoid accidentally 
rewriting other parts of the URL, which contain a word that is also used as a 
page name.

Only the path info (that is the part of the URL following the servlet path) can 
be rewritten by the URL Rewrite Filter, because for a non-existing servlet path 
the filter will not receive the request, as the the servlet container returns an 
error before running the filters.
  