/*
 * This file is part of Pustefix.
 *
 * Pustefix is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Pustefix is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Pustefix; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package org.pustefixframework.editor.webui.webservice;

import java.util.Iterator;
import java.util.SortedSet;

import javax.servlet.http.HttpServletRequest;

import org.pustefixframework.editor.common.dom.IncludeFile;
import org.pustefixframework.editor.common.dom.IncludePartThemeVariant;
import org.pustefixframework.editor.webui.resources.CommonIncludesResource;
import org.w3c.dom.Element;

import de.schlund.pfixcore.workflow.Context;
import de.schlund.pfixcore.workflow.ContextResourceManager;
import de.schlund.pfixcore.workflow.app.StaticState;
import de.schlund.pfixxml.PfixServletRequest;
import de.schlund.pfixxml.ResultDocument;

/**
 * Handles request generated by JS code when navigating through 
 * the include / dyninclude tree.
 * 
 * @author Sebastian Marsching <sebastian.marsching@1und1.de>
 */
public abstract class CommonIncludeState extends StaticState {

    @Override
    public ResultDocument getDocument(Context context, PfixServletRequest preq)
            throws Exception {
        ResultDocument doc = super.getDocument(context, preq);

        HttpServletRequest req = preq.getRequest();
        ContextResourceManager crm = context.getContextResourceManager();
        String action = req.getParameter("action");
        if (action == null || action.length() == 0) {
            handleError(doc);
            return doc;
        }
        if (action.equals("openDirectoryTree")) {
            this.actionOpenDirectoryTree(crm, preq.getRequest(), doc);
        } else if (action.equals("openFileTree")) {
            this.actionOpenFileTree(crm, preq.getRequest(), doc);
        } else if (action.equals("closeDirectoryTree")) {
            this.actionCloseDirectoryTree(crm, preq.getRequest(), doc);
        } else if (action.equals("closeFileTree")) {
            this.actionCloseFileTree(crm, preq.getRequest(), doc);
        } else {
            this.handleBadAction(doc);
        }

        return doc;
    }

    private void handleBadAction(ResultDocument doc) {
        Element error = doc.createNode("wserror");
        error.setAttribute("description", "Bad action!");
    }

    private void actionCloseFileTree(ContextResourceManager crm,
            HttpServletRequest req, ResultDocument doc) {
        String file = req.getParameter("file");
        if (file == null || file.length() == 0) {
            handleError(doc);
            return;
        }
        this.getResource(crm).closeFileTree(file);
    }

    private void actionCloseDirectoryTree(ContextResourceManager crm,
            HttpServletRequest req, ResultDocument doc) {
        String dir = req.getParameter("dir");
        if (dir == null || dir.length() == 0) {
            handleError(doc);
            return;
        }
        this.getResource(crm).closeDirectoryTree(dir);
    }

    private void actionOpenFileTree(ContextResourceManager crm,
            HttpServletRequest req, ResultDocument doc) {
        String file = req.getParameter("file");
        if (file == null || file.length() == 0) {
            handleError(doc);
            return;
        }
        SortedSet<IncludePartThemeVariant> parts = this.getResource(crm).openFileTree(file);
        Element parent = doc.createNode("wsresponse");
        for (Iterator<IncludePartThemeVariant> i = parts.iterator(); i.hasNext();) {
            IncludePartThemeVariant part = i.next();
            Element node = doc.createSubNode(parent, "includepart");
            node.setAttribute("file", part.getIncludePart().getIncludeFile()
                    .getPath());
            node.setAttribute("part", part.getIncludePart().getName());
            node.setAttribute("theme", part.getTheme().getName());
        }
    }

    private void actionOpenDirectoryTree(ContextResourceManager crm,
            HttpServletRequest req, ResultDocument doc) {
        String dir = req.getParameter("dir");
        if (dir == null || dir.length() == 0) {
            handleError(doc);
            return;
        }
        SortedSet<IncludeFile> files = this.getResource(crm).openDirectoryTree(dir);
        Element parent = doc.createNode("wsresponse");
        for (Iterator<IncludeFile> i = files.iterator(); i.hasNext();) {
            IncludeFile file = i.next();
            Element node = doc.createSubNode(parent, "file");
            node.setAttribute("path", file.getPath());
        }
    }

    private void handleError(ResultDocument doc) {
        Element error = doc.createNode("wserror");
        error.setAttribute("description", "Generic error");
    }

    protected abstract CommonIncludesResource getResource(
            ContextResourceManager crm);

}
