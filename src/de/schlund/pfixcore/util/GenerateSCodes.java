/*
 * This file is part of PFIXCORE.
 *
 * PFIXCORE is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * PFIXCORE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with PFIXCORE; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
package de.schlund.pfixcore.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashSet;
import java.util.Properties;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import de.schlund.pfixxml.config.GlobalConfigurator;
import de.schlund.pfixxml.config.XMLPropertiesUtil;
import de.schlund.pfixxml.resources.DocrootResource;
import de.schlund.pfixxml.resources.FileResource;
import de.schlund.pfixxml.resources.ResourceUtil;
import de.schlund.pfixxml.util.Xml;
import de.schlund.util.statuscodes.StatusCode;

public class GenerateSCodes {

    private static final String SCODEFILES = "partindex.scodefile";
    
    public static void main(String[] args) throws Exception {
        if (args.length != 3) {
            throw new IOException("expected 3 arguments, got " + args.length);
        }

        //System.out.println("**** prop " + args[1]);
        // Initialize PathFactory as it is needed by XMLPropertiesUtil
        GlobalConfigurator.setDocroot(args[2]);
        Properties tmp = new Properties();
        if (args[1].endsWith(".prop") || args[1].endsWith(".properties")) {
            tmp.load(new FileInputStream(args[1]));
        } else {
            XMLPropertiesUtil.loadPropertiesFromXMLFile(new File(args[1]), tmp);
        }
        
        new GenerateSCodes (new File(args[0]), tmp, args[2]).run();
    }
    
    File          dest;
    HashSet<DocrootResource> scfiles;
    String        docroot;
    
    
    public GenerateSCodes(File dest, Properties prop, String docroot) throws IOException {
        this.dest    = dest;
        this.docroot = docroot;

        scfiles          = new HashSet<DocrootResource>();
        
        HashSet<String> propfiles = new HashSet<String>(PropertiesUtils.selectProperties(prop, SCODEFILES).values());

        for (String tmp: propfiles) {
            //System.out.println("**** scfile: " + tmp);
            scfiles.add(ResourceUtil.getFileResourceFromDocroot(tmp));
        }
    }
    

    
    public void run() throws IOException, SAXException {
        boolean dogen         = false;
        long    targetmodtime = -1;

        //System.out.println("**** " + dest.getCanonicalPath());

        if (dest.exists()) {
            targetmodtime = dest.lastModified();
        } else {
            if (!dest.getParentFile().exists()) {
                dest.getParentFile().mkdirs();
            }
        }

        
        for (FileResource path: scfiles) {
            //System.out.println("**** look at " + tmp.getCanonicalPath());
            if (path.exists() && path.lastModified() > targetmodtime) {
                dogen = true;
                break;
            }
        }

        //System.out.println("**** dogen is " + dogen);

        if (dogen) {

            Writer writer = new OutputStreamWriter(new FileOutputStream(dest), "ascii");
            createHeader(writer);
            
            for (DocrootResource input: scfiles) {
                Document doc   = Xml.parseMutable(input);
                NodeList list  = doc.getElementsByTagName("part");
                for (int i = 0; i < list.getLength() ; i++) {
                    Element node      = (Element) list.item(i);
                    String  name      = node.getAttribute("name");
                    String  classname = StatusCode.convertToFieldName(name);
                    writer.write("  public static final StatusCode " + classname +
                                 " = new StatusCode(\"" + name + "\", ResourceUtil.getFileResourceFromDocroot(\"" + input.getRelativePath() + "\"));\n");
                }
            }
            
            writer.write("}\n");
            writer.flush();
            writer.close();
        }
    }

    private void createHeader(Writer writer) throws IOException {
        writer.write("/*\n");
        writer.write(" * This file is AUTOGENERATED. Do not change by hand.\n");
        writer.write(" */\n");
        writer.write("\n");
        writer.write("\n");
        writer.write("package de.schlund.util.statuscodes;\n");
        writer.write("import de.schlund.pfixxml.resources.ResourceUtil;\n");
        writer.write("import java.lang.reflect.Field;\n");
        writer.write("\n");
        writer.write("public class StatusCodeLib {\n");
        writer.write("    public static StatusCode getStatusCodeByName(String name) throws StatusCodeException {\n");
        writer.write("        return getStatusCodeByName(name, false);\n");
        writer.write("    }\n");        
        writer.write("\n");        
        writer.write("    public static StatusCode getStatusCodeByName(String name, boolean optional) throws StatusCodeException {\n");
        writer.write("        String     fieldname = StatusCode.convertToFieldName(name);\n");
        writer.write("        StatusCode scode     = null;\n");
        writer.write("        try {\n");
        writer.write("            Field field = StatusCodeLib.class.getField(fieldname);\n");
        writer.write("            scode = (StatusCode) field.get(null);\n");
        writer.write("        } catch (NoSuchFieldException e) {\n");
        writer.write("            //\n");
        writer.write("        } catch (SecurityException e) {\n");
        writer.write("            //\n");
        writer.write("        } catch (IllegalAccessException e) {\n");
        writer.write("            //\n");
        writer.write("        }\n");
        writer.write("        if (scode == null && optional == false) {\n");
        writer.write("            throw new StatusCodeException(\"StatusCode \" + name + \" is not defined.\");\n");
        writer.write("        }\n");
        writer.write("        return scode;\n");
        writer.write("    }\n");
    }

}
