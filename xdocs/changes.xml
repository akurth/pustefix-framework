<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <title>Changes</title>
  </properties>
  <body>
    <release version="0.7.1" date="2004-10-11">
      <action dev="mtld" type="add">
        <p>
          Added webservice support to Pustefix, which now makes it possible
          to exchange data/access application state via SOAP by providing
          special webservice capabilities. This is done by a close webservice
          server integration on the server side (with Apache Axis as default
          server) and a client side Javascript SOAP implementation supporting
          all important browsers (with some special features, like automatically
          generated Javascript webservice stubs).
        </p>
        <p>
          Pustefix defines a webservice development process, which enables the
          user to create and deploy new webservices in an easy and fast way,
          without demanding in-depth knowledge about SOAP internals. This is 
          done by a range of tools supporting this process.
        </p>
        <p>
          Development of new webservices is a straightforward process: the
          service is described by simply defining a Java interface and declaring
          the service in the application's webservice configuration file, then
          an Ant task automatically generates the WSDL description, the deployment
          descriptor and the Javascript webservice stub. After creating the
	  class implementing the service interface and extending the 
          AbstractService class (which gives access to the application state via
          the ContextResourceManager) the service is ready to use. 
        </p>
        <p>
          A complete documentation of the webservice development process has
          still to come, meanwhile interested people can have a look at the
          <code>webservice</code> example application, containing a range of
          examples, including a simple Chat application. For more details take
          a look at the ChangeLog.
        </p>
      </action>
    </release>
    <release version="0.7.1-pre" date="in cvs">
      <action dev="mlhartme" type="add">
        <p>Use Maven SourceForge Plugin for automatic deployment.</p>
      </action>
    </release>
    <release version="0.7.0" date="2004-08-19">
      <action dev="jenstl" type="update">
        <p>
          More relative paths for configuration files. We try to remove
          as many instances of &lt;cus:docroot&gt; from the config
          files as possible. Currently we still miss this goal by a long
          shot. The file types already cleared are:
          common/conf/pustefix.prop.in, PRJ/conf/depend.xml.in and
          PRJ/conf/SERVLETNAME.prop.in. The property file
          common/conf/factory.prop.in defines in one place the docroot property
          that is used to configure all the other places in the running
          application (This is done by configuring a PathFactory, that
          is able to resolve relative to a given root directory).
        </p>
        <p>
          There are still a lot of places where we need to have the
          docroot around unfortunately.  These are at least all the
          log4j config files, the PRJ/conf/project.xml.in files and
          maybe more (depending on the application). The goal is to
          have only one place left where we configure this root
          directory.
        </p>
      </action>
      <action dev="mlhartme" type="remove">
        <p>
          Removed <code>common/conf/projects.prj</code>, the necessary data 
          is read from <code>servletconf/projects.xml.in</code> now. 
        </p>
      </action>
      <action dev="mlhartme" type="remove">
        <p>
        Removed the following properties from depend.xml: record_dir, cachedir and 
        docroot. Pustefix automatically passes them to the xslt processor, you don't 
        have to mention them in depend files.
        </p>
      </action>
      <action dev="mlhartme" type="update">
        <p>
        XML dependencies are concentrated in three files (in the <code>de.schlund.pfixxml.util</code> package):
        <code>Xml.java</code> for parsing and serialization, <code>XPath</code> for xpath compuations, and 
        <code>Xslt</code> for XSL processing. E.g. if you have to parse or serialize an xml document,
        you should have a look at <code>Xml.java</code>.
        </p>
      </action>
    </release>
    <release version="0.6.7" date="2004-08-06">
      <action dev="jenstl" type="remove">
        <p>The tomcat distribution has been removed from the skeleton, the install instructions
        describe how to get it.</p>
      </action>
      <action dev="jenstl" type="fix">
        <p>
          Various Tomcat 5 fixes.
        </p>
      </action>
      <action dev="mlhartme" type="add">
        <p>Enable stylechecker and fix missing copyright headers reported by it.</p>
      </action>
    </release>
    <release version="0.6.6" date="2004-08-03">
      <action dev="mlhartme" type="update">
        <p>Switched from Tomcat 4.1.30 to 5.0.27.</p>
      </action>
      <action dev="mlhartme" type="update">
        <p>
        Convert documentation to xdoc and configure a maven build. 
        The <code>docs</code> directory is gone, all documentation resides in 
        <code>xdocs</code> now.</p>
      </action>
    </release>
    <release version="0.6.5" date="2004-07-11">
      <action dev="ecker" type="update">
        <p>Replaced the Java applet based editing area with one based completely 
        on JavaScript. Now we finally have a solid foundation to build upon. The 
        new editing area has not many additional features for the time being, but 
        this will change. For now,</p>
        <ul>
          <li>The syntax highlighting should just work.</li>
          <li>You can indent a line or a selected region by pressing TAB.</li>
          <li>For reasonably sized include parts, it's much faster.</li>
        </ul>
      </action>
      <action dev="rrapude" type="add">
        <p>Added <code>pfixcore-examples.tar.gz</code> with three very basic example 
        applications which can be unpacked into the the projects directory of the 
        environment.</p>
      </action>
      <action dev="jenstl" type="update">
        <p>Cleanup and bug fixes on our way to xslt 2.0. We already have another branch 
        where this work is done now, called SAXON_8. Please see there if you're 
        interested in this.</p>
      </action>
    </release>
    <release version="0.5.4" date="2004-06-01">
      <action dev="jenstl" type="remove">
        Removed <code>needsData()</code> as part of the
        <code>ContextResource</code> interface. This was never really
        needed anyway.
      </action>
      <action dev="jenstl" type="update">
        Internal cleanup (please refer to the ChangeLog or
        the documentation on this site for more details). But note that
        <i>you need to update your depend.xml.in files</i> when using this release!
      </action>
      <action dev="jenstl" type="add">
        Implemented a very simple form of "aliasing" for pagerequests in the config files.
        Many different pagerequests can now share their configuration details.
      </action>
      <action dev="jenstl" type="add">
        Added the possibility to jump into a pageflow without directly
        specifing the target page. The page that will be used is
        determined to be the first page needing data from the given pageflow.
      </action>
      <action dev="jenstl" type="add">
        Added the possiblity to add <code>FlowStepAction</code>s to
        every step of a pageflow. These actions consist of a list of
        XPath expressions acting as tests on the generated result DOM
        which will trigger an associated action (like "jump to another
        page") when they match. These tests are run whenever the
        relevant flowstep want's to continue with the pageflow. Using
        this mechanism it's possible to change the whole pageflow run
        depending on the state of the application (if this state is
        reflected in the result DOM).
      </action>
      <action dev="jenstl" type="add">
        Added a new configurable exception handling. The current system will
        be changed to use this system shortly.
      </action>
      <action dev="jenstl" type="add">
        Simplified and normalised the depend.xml.in file syntax even
        more. Now also metatags.xsl is a customized version of core
        stylesheet (much like master.xsl)
      </action>
      <action dev="jenstl" type="add">
        Moved to XSLT 1.1 for the core stylesheets. This will help with
        the time it still takes for the transition to XSLT 2.0.
      </action>
      <action dev="jenstl" type="update">
        Changed the way parameters and commands are associated to a
        special submit button. They are no longer completely encoded
        into the name of the button, instead only a prefix is
        transmitted as the name while the parameters are put into
        special named hidden input tags.
      </action>
      <action dev="jenstl" type="fix">
        <b>...and many many bugfixes</b>
      </action>
    </release>

    <release version="0.5.3" date="2004-03-23">
      <action dev="jenstl" type="add">
        You can now set a pageflow even if the current page is no
        member of that pageflow. This allows to enter into any
        pageflow after the submit to the current page returns
        successfully.
      </action>
      <action dev="jenstl" type="add">
        The request parameters <code>__jumptopage</code> and
        <code>__jumptopageflow</code> are similar to the common
        <code>__page</code> and <code>__pageflow</code> parameters,
        but they specify a page (and the associated pageflow) the
        system should jump to unconditionally after a successful
        submit. In other words: If there is a
        <code>__jumptopage</code> set, the system won't start the
        usual pageflow process, but instead jump to the specified page
        (selecting, if it exists, the value of <code>__jumptopageflow</code> as the
        new pageflow)
      </action>
      <action dev="jenstl" type="update">
        We upgraded our embedded tomcat to version 4.1.30
      </action>
    </release>
  </body>
</document>
